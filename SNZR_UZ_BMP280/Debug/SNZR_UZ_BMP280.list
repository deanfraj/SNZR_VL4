
SNZR_UZ_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a298  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800a468  0800a468  0001a468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a93c  0800a93c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a944  0800a944  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a944  0800a944  0001a944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a948  0800a948  0001a948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a94c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001e0  0800ab2c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800ab2c  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001310a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e0  00000000  00000000  0003331a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00035b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00036b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023956  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f77  00000000  00000000  0005b406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4d02  00000000  00000000  0007037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014507f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b10  00000000  00000000  001450d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a450 	.word	0x0800a450

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a450 	.word	0x0800a450

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f5 	b.w	80010d4 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9aa 	b.w	80010d4 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468e      	mov	lr, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	4694      	mov	ip, r2
 8000e16:	d969      	bls.n	8000eec <__udivmoddi4+0xe8>
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b152      	cbz	r2, 8000e34 <__udivmoddi4+0x30>
 8000e1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e22:	f1c2 0120 	rsb	r1, r2, #32
 8000e26:	fa20 f101 	lsr.w	r1, r0, r1
 8000e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e32:	4094      	lsls	r4, r2
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	0c21      	lsrs	r1, r4, #16
 8000e3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e3e:	fa1f f78c 	uxth.w	r7, ip
 8000e42:	fb08 e316 	mls	r3, r8, r6, lr
 8000e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e4a:	fb06 f107 	mul.w	r1, r6, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e5a:	f080 811f 	bcs.w	800109c <__udivmoddi4+0x298>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 811c 	bls.w	800109c <__udivmoddi4+0x298>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb00 f707 	mul.w	r7, r0, r7
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x92>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	f080 810a 	bcs.w	80010a0 <__udivmoddi4+0x29c>
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	f240 8107 	bls.w	80010a0 <__udivmoddi4+0x29c>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e9a:	1be4      	subs	r4, r4, r7
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	b11d      	cbz	r5, 8000ea8 <__udivmoddi4+0xa4>
 8000ea0:	40d4      	lsrs	r4, r2
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d909      	bls.n	8000ec6 <__udivmoddi4+0xc2>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	f000 80ef 	beq.w	8001096 <__udivmoddi4+0x292>
 8000eb8:	2600      	movs	r6, #0
 8000eba:	e9c5 0100 	strd	r0, r1, [r5]
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	fab3 f683 	clz	r6, r3
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d14a      	bne.n	8000f64 <__udivmoddi4+0x160>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d302      	bcc.n	8000ed8 <__udivmoddi4+0xd4>
 8000ed2:	4282      	cmp	r2, r0
 8000ed4:	f200 80f9 	bhi.w	80010ca <__udivmoddi4+0x2c6>
 8000ed8:	1a84      	subs	r4, r0, r2
 8000eda:	eb61 0303 	sbc.w	r3, r1, r3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	2d00      	cmp	r5, #0
 8000ee4:	d0e0      	beq.n	8000ea8 <__udivmoddi4+0xa4>
 8000ee6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eea:	e7dd      	b.n	8000ea8 <__udivmoddi4+0xa4>
 8000eec:	b902      	cbnz	r2, 8000ef0 <__udivmoddi4+0xec>
 8000eee:	deff      	udf	#255	; 0xff
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	f040 8092 	bne.w	800101e <__udivmoddi4+0x21a>
 8000efa:	eba1 010c 	sub.w	r1, r1, ip
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f fe8c 	uxth.w	lr, ip
 8000f06:	2601      	movs	r6, #1
 8000f08:	0c20      	lsrs	r0, r4, #16
 8000f0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f16:	fb0e f003 	mul.w	r0, lr, r3
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x12c>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x12a>
 8000f28:	4288      	cmp	r0, r1
 8000f2a:	f200 80cb 	bhi.w	80010c4 <__udivmoddi4+0x2c0>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1110 	mls	r1, r7, r0, r1
 8000f3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f40:	fb0e fe00 	mul.w	lr, lr, r0
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x156>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x154>
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	f200 80bb 	bhi.w	80010ce <__udivmoddi4+0x2ca>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f62:	e79c      	b.n	8000e9e <__udivmoddi4+0x9a>
 8000f64:	f1c6 0720 	rsb	r7, r6, #32
 8000f68:	40b3      	lsls	r3, r6
 8000f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f72:	fa20 f407 	lsr.w	r4, r0, r7
 8000f76:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	40f9      	lsrs	r1, r7
 8000f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f82:	fa00 f306 	lsl.w	r3, r0, r6
 8000f86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f8a:	0c20      	lsrs	r0, r4, #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fb09 1118 	mls	r1, r9, r8, r1
 8000f94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f98:	fb08 f00e 	mul.w	r0, r8, lr
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa2:	d90b      	bls.n	8000fbc <__udivmoddi4+0x1b8>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fac:	f080 8088 	bcs.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f240 8085 	bls.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1a09      	subs	r1, r1, r0
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	458e      	cmp	lr, r1
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x1e2>
 8000fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fdc:	d26c      	bcs.n	80010b8 <__udivmoddi4+0x2b4>
 8000fde:	458e      	cmp	lr, r1
 8000fe0:	d96a      	bls.n	80010b8 <__udivmoddi4+0x2b4>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4461      	add	r1, ip
 8000fe6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fea:	fba0 9402 	umull	r9, r4, r0, r2
 8000fee:	eba1 010e 	sub.w	r1, r1, lr
 8000ff2:	42a1      	cmp	r1, r4
 8000ff4:	46c8      	mov	r8, r9
 8000ff6:	46a6      	mov	lr, r4
 8000ff8:	d356      	bcc.n	80010a8 <__udivmoddi4+0x2a4>
 8000ffa:	d053      	beq.n	80010a4 <__udivmoddi4+0x2a0>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x212>
 8000ffe:	ebb3 0208 	subs.w	r2, r3, r8
 8001002:	eb61 010e 	sbc.w	r1, r1, lr
 8001006:	fa01 f707 	lsl.w	r7, r1, r7
 800100a:	fa22 f306 	lsr.w	r3, r2, r6
 800100e:	40f1      	lsrs	r1, r6
 8001010:	431f      	orrs	r7, r3
 8001012:	e9c5 7100 	strd	r7, r1, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	f1c2 0320 	rsb	r3, r2, #32
 8001022:	40d8      	lsrs	r0, r3
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	fa21 f303 	lsr.w	r3, r1, r3
 800102c:	4091      	lsls	r1, r2
 800102e:	4301      	orrs	r1, r0
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa1f fe8c 	uxth.w	lr, ip
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3610 	mls	r6, r7, r0, r3
 8001040:	0c0b      	lsrs	r3, r1, #16
 8001042:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001046:	fb00 f60e 	mul.w	r6, r0, lr
 800104a:	429e      	cmp	r6, r3
 800104c:	fa04 f402 	lsl.w	r4, r4, r2
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x260>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 38ff 	add.w	r8, r0, #4294967295
 800105a:	d22f      	bcs.n	80010bc <__udivmoddi4+0x2b8>
 800105c:	429e      	cmp	r6, r3
 800105e:	d92d      	bls.n	80010bc <__udivmoddi4+0x2b8>
 8001060:	3802      	subs	r0, #2
 8001062:	4463      	add	r3, ip
 8001064:	1b9b      	subs	r3, r3, r6
 8001066:	b289      	uxth	r1, r1
 8001068:	fbb3 f6f7 	udiv	r6, r3, r7
 800106c:	fb07 3316 	mls	r3, r7, r6, r3
 8001070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001074:	fb06 f30e 	mul.w	r3, r6, lr
 8001078:	428b      	cmp	r3, r1
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x28a>
 800107c:	eb1c 0101 	adds.w	r1, ip, r1
 8001080:	f106 38ff 	add.w	r8, r6, #4294967295
 8001084:	d216      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001086:	428b      	cmp	r3, r1
 8001088:	d914      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 800108a:	3e02      	subs	r6, #2
 800108c:	4461      	add	r1, ip
 800108e:	1ac9      	subs	r1, r1, r3
 8001090:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001094:	e738      	b.n	8000f08 <__udivmoddi4+0x104>
 8001096:	462e      	mov	r6, r5
 8001098:	4628      	mov	r0, r5
 800109a:	e705      	b.n	8000ea8 <__udivmoddi4+0xa4>
 800109c:	4606      	mov	r6, r0
 800109e:	e6e3      	b.n	8000e68 <__udivmoddi4+0x64>
 80010a0:	4618      	mov	r0, r3
 80010a2:	e6f8      	b.n	8000e96 <__udivmoddi4+0x92>
 80010a4:	454b      	cmp	r3, r9
 80010a6:	d2a9      	bcs.n	8000ffc <__udivmoddi4+0x1f8>
 80010a8:	ebb9 0802 	subs.w	r8, r9, r2
 80010ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7a3      	b.n	8000ffc <__udivmoddi4+0x1f8>
 80010b4:	4646      	mov	r6, r8
 80010b6:	e7ea      	b.n	800108e <__udivmoddi4+0x28a>
 80010b8:	4620      	mov	r0, r4
 80010ba:	e794      	b.n	8000fe6 <__udivmoddi4+0x1e2>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7d1      	b.n	8001064 <__udivmoddi4+0x260>
 80010c0:	46d0      	mov	r8, sl
 80010c2:	e77b      	b.n	8000fbc <__udivmoddi4+0x1b8>
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4461      	add	r1, ip
 80010c8:	e732      	b.n	8000f30 <__udivmoddi4+0x12c>
 80010ca:	4630      	mov	r0, r6
 80010cc:	e709      	b.n	8000ee2 <__udivmoddi4+0xde>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	e742      	b.n	8000f5a <__udivmoddi4+0x156>

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <bmp280_init_default_params>:
#define BMP280_REG_CALIB       0x88
#define BMP280_REG_HUM_CALIB   0x88

#define BMP280_RESET_VALUE     0xB6

void bmp280_init_default_params(bmp280_params_t *params) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2203      	movs	r2, #3
 80010fc:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	715a      	strb	r2, [r3, #5]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af04      	add	r7, sp, #16
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	460b      	mov	r3, r1
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	b29a      	uxth	r2, r3
 800112e:	8af9      	ldrh	r1, [r7, #22]
 8001130:	f241 3388 	movw	r3, #5000	; 0x1388
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	2302      	movs	r3, #2
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	f002 f81b 	bl	800317c <HAL_I2C_Mem_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800114c:	7d7b      	ldrb	r3, [r7, #21]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7d3b      	ldrb	r3, [r7, #20]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21b      	sxth	r3, r3
 800115a:	b29a      	uxth	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	801a      	strh	r2, [r3, #0]
		return true;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <read_register16+0x56>
	} else
		return false;
 8001164:	2300      	movs	r3, #0

}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800116e:	b590      	push	{r4, r7, lr}
 8001170:	b08b      	sub	sp, #44	; 0x2c
 8001172:	af04      	add	r7, sp, #16
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	461a      	mov	r2, r3
 800117a:	460b      	mov	r3, r1
 800117c:	72fb      	strb	r3, [r7, #11]
 800117e:	4613      	mov	r3, r2
 8001180:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	b29a      	uxth	r2, r3
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	b29b      	uxth	r3, r3
 8001196:	8af9      	ldrh	r1, [r7, #22]
 8001198:	f241 3488 	movw	r4, #5000	; 0x1388
 800119c:	9402      	str	r4, [sp, #8]
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	f001 ffe9 	bl	800317c <HAL_I2C_Mem_Read>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <read_data+0x46>
		return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e000      	b.n	80011b6 <read_data+0x48>
	else
		return 1;
 80011b4:	2301      	movs	r3, #1

}
 80011b6:	4618      	mov	r0, r3
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}

080011be <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2188      	movs	r1, #136	; 0x88
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff9f 	bl	8001110 <read_register16>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d06f      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3302      	adds	r3, #2
 80011dc:	461a      	mov	r2, r3
 80011de:	218a      	movs	r1, #138	; 0x8a
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff95 	bl	8001110 <read_register16>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d065      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	461a      	mov	r2, r3
 80011f2:	218c      	movs	r1, #140	; 0x8c
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff8b 	bl	8001110 <read_register16>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d05b      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3306      	adds	r3, #6
 8001204:	461a      	mov	r2, r3
 8001206:	218e      	movs	r1, #142	; 0x8e
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff81 	bl	8001110 <read_register16>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d051      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3308      	adds	r3, #8
 8001218:	461a      	mov	r2, r3
 800121a:	2190      	movs	r1, #144	; 0x90
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff77 	bl	8001110 <read_register16>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d047      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	330a      	adds	r3, #10
 800122c:	461a      	mov	r2, r3
 800122e:	2192      	movs	r1, #146	; 0x92
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff6d 	bl	8001110 <read_register16>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d03d      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	330c      	adds	r3, #12
 8001240:	461a      	mov	r2, r3
 8001242:	2194      	movs	r1, #148	; 0x94
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff63 	bl	8001110 <read_register16>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d033      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	330e      	adds	r3, #14
 8001254:	461a      	mov	r2, r3
 8001256:	2196      	movs	r1, #150	; 0x96
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff59 	bl	8001110 <read_register16>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d029      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3310      	adds	r3, #16
 8001268:	461a      	mov	r2, r3
 800126a:	2198      	movs	r1, #152	; 0x98
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff4f 	bl	8001110 <read_register16>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d01f      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3312      	adds	r3, #18
 800127c:	461a      	mov	r2, r3
 800127e:	219a      	movs	r1, #154	; 0x9a
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff45 	bl	8001110 <read_register16>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d015      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3314      	adds	r3, #20
 8001290:	461a      	mov	r2, r3
 8001292:	219c      	movs	r1, #156	; 0x9c
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff3b 	bl	8001110 <read_register16>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00b      	beq.n	80012b8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80012a4:	461a      	mov	r2, r3
 80012a6:	219e      	movs	r1, #158	; 0x9e
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff31 	bl	8001110 <read_register16>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <read_calibration_data+0xfa>

		return true;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <read_calibration_data+0xfc>
	}

	return false;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f103 0218 	add.w	r2, r3, #24
 80012d0:	2301      	movs	r3, #1
 80012d2:	21a1      	movs	r1, #161	; 0xa1
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff4a 	bl	800116e <read_data>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d14b      	bne.n	8001378 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	331a      	adds	r3, #26
 80012e4:	461a      	mov	r2, r3
 80012e6:	21e1      	movs	r1, #225	; 0xe1
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff11 	bl	8001110 <read_register16>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d041      	beq.n	8001378 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f103 021c 	add.w	r2, r3, #28
 80012fa:	2301      	movs	r3, #1
 80012fc:	21e3      	movs	r1, #227	; 0xe3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff35 	bl	800116e <read_data>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d136      	bne.n	8001378 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800130a:	f107 030e 	add.w	r3, r7, #14
 800130e:	461a      	mov	r2, r3
 8001310:	21e4      	movs	r1, #228	; 0xe4
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fefc 	bl	8001110 <read_register16>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d02c      	beq.n	8001378 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	461a      	mov	r2, r3
 8001324:	21e5      	movs	r1, #229	; 0xe5
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fef2 	bl	8001110 <read_register16>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d022      	beq.n	8001378 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001338:	2301      	movs	r3, #1
 800133a:	21e7      	movs	r1, #231	; 0xe7
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff16 	bl	800116e <read_data>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d117      	bne.n	8001378 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b21b      	sxth	r3, r3
 800134e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001352:	b21a      	sxth	r2, r3
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	121b      	asrs	r3, r3, #8
 8001358:	b21b      	sxth	r3, r3
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001368:	89bb      	ldrh	r3, [r7, #12]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	b29b      	uxth	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	841a      	strh	r2, [r3, #32]

		return true;
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001382:	b580      	push	{r7, lr}
 8001384:	b088      	sub	sp, #32
 8001386:	af04      	add	r7, sp, #16
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
 800138e:	4613      	mov	r3, r2
 8001390:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	89f9      	ldrh	r1, [r7, #14]
 80013a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	1cbb      	adds	r3, r7, #2
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	f001 fde8 	bl	8002f88 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <write_register8+0x40>
		return false;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <write_register8+0x42>
	else
		return true;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013da:	2b76      	cmp	r3, #118	; 0x76
 80013dc:	d005      	beq.n	80013ea <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013e2:	2b77      	cmp	r3, #119	; 0x77
 80013e4:	d001      	beq.n	80013ea <bmp280_init+0x1e>

		return false;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e099      	b.n	800151e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013f0:	2301      	movs	r3, #1
 80013f2:	21d0      	movs	r1, #208	; 0xd0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff feba 	bl	800116e <read_data>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <bmp280_init+0x38>
		return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e08c      	b.n	800151e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800140a:	2b58      	cmp	r3, #88	; 0x58
 800140c:	d006      	beq.n	800141c <bmp280_init+0x50>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001414:	2b60      	cmp	r3, #96	; 0x60
 8001416:	d001      	beq.n	800141c <bmp280_init+0x50>

		return false;
 8001418:	2300      	movs	r3, #0
 800141a:	e080      	b.n	800151e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800141c:	22b6      	movs	r2, #182	; 0xb6
 800141e:	21e0      	movs	r1, #224	; 0xe0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ffae 	bl	8001382 <write_register8>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <bmp280_init+0x64>
		return false;
 800142c:	2300      	movs	r3, #0
 800142e:	e076      	b.n	800151e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001430:	f107 020c 	add.w	r2, r7, #12
 8001434:	2301      	movs	r3, #1
 8001436:	21f3      	movs	r1, #243	; 0xf3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fe98 	bl	800116e <read_data>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f5      	bne.n	8001430 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001444:	7b3b      	ldrb	r3, [r7, #12]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff feb5 	bl	80011be <read_calibration_data>
 8001454:	4603      	mov	r3, r0
 8001456:	f083 0301 	eor.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d100      	bne.n	8001462 <bmp280_init+0x96>
 8001460:	e001      	b.n	8001466 <bmp280_init+0x9a>
		return false;
 8001462:	2300      	movs	r3, #0
 8001464:	e05b      	b.n	800151e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800146c:	2b60      	cmp	r3, #96	; 0x60
 800146e:	d10a      	bne.n	8001486 <bmp280_init+0xba>
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff26 	bl	80012c2 <read_hum_calibration_data>
 8001476:	4603      	mov	r3, r0
 8001478:	f083 0301 	eor.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <bmp280_init+0xba>
		return false;
 8001482:	2300      	movs	r3, #0
 8001484:	e04b      	b.n	800151e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	795b      	ldrb	r3, [r3, #5]
 800148a:	015b      	lsls	r3, r3, #5
 800148c:	b25a      	sxtb	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	b25b      	sxtb	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b25b      	sxtb	r3, r3
 800149a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	461a      	mov	r2, r3
 80014a0:	21f5      	movs	r1, #245	; 0xf5
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff6d 	bl	8001382 <write_register8>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <bmp280_init+0xe6>
		return false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e035      	b.n	800151e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	78db      	ldrb	r3, [r3, #3]
 80014c4:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014de:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014e6:	2b60      	cmp	r3, #96	; 0x60
 80014e8:	d10d      	bne.n	8001506 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	791b      	ldrb	r3, [r3, #4]
 80014ee:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	461a      	mov	r2, r3
 80014f4:	21f2      	movs	r1, #242	; 0xf2
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff43 	bl	8001382 <write_register8>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <bmp280_init+0x13a>
			return false;
 8001502:	2300      	movs	r3, #0
 8001504:	e00b      	b.n	800151e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	461a      	mov	r2, r3
 800150a:	21f4      	movs	r1, #244	; 0xf4
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff38 	bl	8001382 <write_register8>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <bmp280_init+0x150>
		return false;
 8001518:	2300      	movs	r3, #0
 800151a:	e000      	b.n	800151e <bmp280_init+0x152>
	}

	return true;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001526:	b480      	push	{r7}
 8001528:	b087      	sub	sp, #28
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	10da      	asrs	r2, r3, #3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001544:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001548:	12db      	asrs	r3, r3, #11
 800154a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	111b      	asrs	r3, r3, #4
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	8812      	ldrh	r2, [r2, #0]
 8001554:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	1112      	asrs	r2, r2, #4
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	8809      	ldrh	r1, [r1, #0]
 800155e:	1a52      	subs	r2, r2, r1
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800156c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001570:	139b      	asrs	r3, r3, #14
 8001572:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	441a      	add	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3380      	adds	r3, #128	; 0x80
 800158a:	121b      	asrs	r3, r3, #8
}
 800158c:	4618      	mov	r0, r3
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b0cc      	sub	sp, #304	; 0x130
 800159e:	af00      	add	r7, sp, #0
 80015a0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80015a4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80015a8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80015ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015b0:	17da      	asrs	r2, r3, #31
 80015b2:	461c      	mov	r4, r3
 80015b4:	4615      	mov	r5, r2
 80015b6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015ba:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015be:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80015c2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ca:	fb03 f102 	mul.w	r1, r3, r2
 80015ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	18ca      	adds	r2, r1, r3
 80015dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015e0:	fba3 8903 	umull	r8, r9, r3, r3
 80015e4:	eb02 0309 	add.w	r3, r2, r9
 80015e8:	4699      	mov	r9, r3
 80015ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	17da      	asrs	r2, r3, #31
 80015f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015fa:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001602:	4603      	mov	r3, r0
 8001604:	fb03 f209 	mul.w	r2, r3, r9
 8001608:	460b      	mov	r3, r1
 800160a:	fb08 f303 	mul.w	r3, r8, r3
 800160e:	4413      	add	r3, r2
 8001610:	4602      	mov	r2, r0
 8001612:	fba8 1202 	umull	r1, r2, r8, r2
 8001616:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800161a:	460a      	mov	r2, r1
 800161c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001620:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800162a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800162e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001632:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800163a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800163e:	b21b      	sxth	r3, r3
 8001640:	17da      	asrs	r2, r3, #31
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001646:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800164a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800164e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001652:	462a      	mov	r2, r5
 8001654:	fb02 f203 	mul.w	r2, r2, r3
 8001658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800165c:	4621      	mov	r1, r4
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	441a      	add	r2, r3
 8001664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001668:	4621      	mov	r1, r4
 800166a:	fba3 1301 	umull	r1, r3, r3, r1
 800166e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001672:	460b      	mov	r3, r1
 8001674:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800168e:	462b      	mov	r3, r5
 8001690:	0459      	lsls	r1, r3, #17
 8001692:	4623      	mov	r3, r4
 8001694:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001698:	4623      	mov	r3, r4
 800169a:	0458      	lsls	r0, r3, #17
 800169c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016a0:	1814      	adds	r4, r2, r0
 80016a2:	643c      	str	r4, [r7, #64]	; 0x40
 80016a4:	414b      	adcs	r3, r1
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
 80016a8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016ac:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80016b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	17da      	asrs	r2, r3, #31
 80016bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016d0:	00d9      	lsls	r1, r3, #3
 80016d2:	2000      	movs	r0, #0
 80016d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016d8:	1814      	adds	r4, r2, r0
 80016da:	63bc      	str	r4, [r7, #56]	; 0x38
 80016dc:	414b      	adcs	r3, r1
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016e4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016e8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016f0:	fb03 f102 	mul.w	r1, r3, r2
 80016f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	18ca      	adds	r2, r1, r3
 8001702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001706:	fba3 1303 	umull	r1, r3, r3, r3
 800170a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800170e:	460b      	mov	r3, r1
 8001710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800171e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001722:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001726:	b21b      	sxth	r3, r3
 8001728:	17da      	asrs	r2, r3, #31
 800172a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800172e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001732:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001736:	462b      	mov	r3, r5
 8001738:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800173c:	4642      	mov	r2, r8
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	464b      	mov	r3, r9
 8001744:	4621      	mov	r1, r4
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	4622      	mov	r2, r4
 800174e:	4641      	mov	r1, r8
 8001750:	fba2 1201 	umull	r1, r2, r2, r1
 8001754:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001758:	460a      	mov	r2, r1
 800175a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800175e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001762:	4413      	add	r3, r2
 8001764:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001774:	4623      	mov	r3, r4
 8001776:	0a18      	lsrs	r0, r3, #8
 8001778:	462b      	mov	r3, r5
 800177a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800177e:	462b      	mov	r3, r5
 8001780:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001786:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800178a:	b21b      	sxth	r3, r3
 800178c:	17da      	asrs	r2, r3, #31
 800178e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001792:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800179a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800179e:	464a      	mov	r2, r9
 80017a0:	fb02 f203 	mul.w	r2, r2, r3
 80017a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017a8:	4644      	mov	r4, r8
 80017aa:	fb04 f303 	mul.w	r3, r4, r3
 80017ae:	441a      	add	r2, r3
 80017b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017b4:	4644      	mov	r4, r8
 80017b6:	fba3 4304 	umull	r4, r3, r3, r4
 80017ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017be:	4623      	mov	r3, r4
 80017c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017da:	464c      	mov	r4, r9
 80017dc:	0323      	lsls	r3, r4, #12
 80017de:	4644      	mov	r4, r8
 80017e0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017e4:	4644      	mov	r4, r8
 80017e6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017e8:	1884      	adds	r4, r0, r2
 80017ea:	633c      	str	r4, [r7, #48]	; 0x30
 80017ec:	eb41 0303 	adc.w	r3, r1, r3
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
 80017f2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017f6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80017fa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017fe:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001802:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800180a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800180e:	88db      	ldrh	r3, [r3, #6]
 8001810:	b29b      	uxth	r3, r3
 8001812:	2200      	movs	r2, #0
 8001814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800181c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001820:	462b      	mov	r3, r5
 8001822:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001826:	4642      	mov	r2, r8
 8001828:	fb02 f203 	mul.w	r2, r2, r3
 800182c:	464b      	mov	r3, r9
 800182e:	4621      	mov	r1, r4
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	4622      	mov	r2, r4
 8001838:	4641      	mov	r1, r8
 800183a:	fba2 1201 	umull	r1, r2, r2, r1
 800183e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001842:	460a      	mov	r2, r1
 8001844:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001848:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800184c:	4413      	add	r3, r2
 800184e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800185e:	4629      	mov	r1, r5
 8001860:	104a      	asrs	r2, r1, #1
 8001862:	4629      	mov	r1, r5
 8001864:	17cb      	asrs	r3, r1, #31
 8001866:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 800186a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800186e:	4313      	orrs	r3, r2
 8001870:	d101      	bne.n	8001876 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001872:	2300      	movs	r3, #0
 8001874:	e148      	b.n	8001b08 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800187a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800187e:	17da      	asrs	r2, r3, #31
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
 8001882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001884:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001888:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800188c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001890:	105b      	asrs	r3, r3, #1
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001896:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800189a:	07db      	lsls	r3, r3, #31
 800189c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018a4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018a8:	4621      	mov	r1, r4
 80018aa:	1a89      	subs	r1, r1, r2
 80018ac:	67b9      	str	r1, [r7, #120]	; 0x78
 80018ae:	4629      	mov	r1, r5
 80018b0:	eb61 0303 	sbc.w	r3, r1, r3
 80018b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018ba:	4622      	mov	r2, r4
 80018bc:	462b      	mov	r3, r5
 80018be:	1891      	adds	r1, r2, r2
 80018c0:	6239      	str	r1, [r7, #32]
 80018c2:	415b      	adcs	r3, r3
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ca:	4621      	mov	r1, r4
 80018cc:	1851      	adds	r1, r2, r1
 80018ce:	61b9      	str	r1, [r7, #24]
 80018d0:	4629      	mov	r1, r5
 80018d2:	414b      	adcs	r3, r1
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018e2:	4649      	mov	r1, r9
 80018e4:	018b      	lsls	r3, r1, #6
 80018e6:	4641      	mov	r1, r8
 80018e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ec:	4641      	mov	r1, r8
 80018ee:	018a      	lsls	r2, r1, #6
 80018f0:	4641      	mov	r1, r8
 80018f2:	1889      	adds	r1, r1, r2
 80018f4:	6139      	str	r1, [r7, #16]
 80018f6:	4649      	mov	r1, r9
 80018f8:	eb43 0101 	adc.w	r1, r3, r1
 80018fc:	6179      	str	r1, [r7, #20]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800190a:	4649      	mov	r1, r9
 800190c:	008b      	lsls	r3, r1, #2
 800190e:	4641      	mov	r1, r8
 8001910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001914:	4641      	mov	r1, r8
 8001916:	008a      	lsls	r2, r1, #2
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	4603      	mov	r3, r0
 800191e:	4622      	mov	r2, r4
 8001920:	189b      	adds	r3, r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	460b      	mov	r3, r1
 8001926:	462a      	mov	r2, r5
 8001928:	eb42 0303 	adc.w	r3, r2, r3
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800193a:	4649      	mov	r1, r9
 800193c:	008b      	lsls	r3, r1, #2
 800193e:	4641      	mov	r1, r8
 8001940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001944:	4641      	mov	r1, r8
 8001946:	008a      	lsls	r2, r1, #2
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	4603      	mov	r3, r0
 800194e:	4622      	mov	r2, r4
 8001950:	189b      	adds	r3, r3, r2
 8001952:	673b      	str	r3, [r7, #112]	; 0x70
 8001954:	462b      	mov	r3, r5
 8001956:	460a      	mov	r2, r1
 8001958:	eb42 0303 	adc.w	r3, r2, r3
 800195c:	677b      	str	r3, [r7, #116]	; 0x74
 800195e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001962:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001966:	f7ff f9af 	bl	8000cc8 <__aeabi_ldivmod>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001976:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800197a:	b21b      	sxth	r3, r3
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001980:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001982:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0b50      	lsrs	r0, r2, #13
 8001990:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001994:	1359      	asrs	r1, r3, #13
 8001996:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800199a:	462b      	mov	r3, r5
 800199c:	fb00 f203 	mul.w	r2, r0, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	fb03 f301 	mul.w	r3, r3, r1
 80019a6:	4413      	add	r3, r2
 80019a8:	4622      	mov	r2, r4
 80019aa:	fba2 1200 	umull	r1, r2, r2, r0
 80019ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019b2:	460a      	mov	r2, r1
 80019b4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019bc:	4413      	add	r3, r2
 80019be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019c6:	f04f 0000 	mov.w	r0, #0
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	0b50      	lsrs	r0, r2, #13
 80019d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019d4:	1359      	asrs	r1, r3, #13
 80019d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019da:	462b      	mov	r3, r5
 80019dc:	fb00 f203 	mul.w	r2, r0, r3
 80019e0:	4623      	mov	r3, r4
 80019e2:	fb03 f301 	mul.w	r3, r3, r1
 80019e6:	4413      	add	r3, r2
 80019e8:	4622      	mov	r2, r4
 80019ea:	fba2 1200 	umull	r1, r2, r2, r0
 80019ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019f2:	460a      	mov	r2, r1
 80019f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019fc:	4413      	add	r3, r2
 80019fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a0e:	4621      	mov	r1, r4
 8001a10:	0e4a      	lsrs	r2, r1, #25
 8001a12:	4629      	mov	r1, r5
 8001a14:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a18:	4629      	mov	r1, r5
 8001a1a:	164b      	asrs	r3, r1, #25
 8001a1c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	17da      	asrs	r2, r3, #31
 8001a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8001a2e:	667a      	str	r2, [r7, #100]	; 0x64
 8001a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a38:	462a      	mov	r2, r5
 8001a3a:	fb02 f203 	mul.w	r2, r2, r3
 8001a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a42:	4621      	mov	r1, r4
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a4e:	4621      	mov	r1, r4
 8001a50:	fba2 1201 	umull	r1, r2, r2, r1
 8001a54:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a58:	460a      	mov	r2, r1
 8001a5a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a5e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a62:	4413      	add	r3, r2
 8001a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a74:	4621      	mov	r1, r4
 8001a76:	0cca      	lsrs	r2, r1, #19
 8001a78:	4629      	mov	r1, r5
 8001a7a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a7e:	4629      	mov	r1, r5
 8001a80:	14cb      	asrs	r3, r1, #19
 8001a82:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a86:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001a8a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a8e:	1884      	adds	r4, r0, r2
 8001a90:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a92:	eb41 0303 	adc.w	r3, r1, r3
 8001a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a98:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a9c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	1889      	adds	r1, r1, r2
 8001aa4:	6539      	str	r1, [r7, #80]	; 0x50
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	eb43 0101 	adc.w	r1, r3, r1
 8001aac:	6579      	str	r1, [r7, #84]	; 0x54
 8001aae:	f04f 0000 	mov.w	r0, #0
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001aba:	4623      	mov	r3, r4
 8001abc:	0a18      	lsrs	r0, r3, #8
 8001abe:	462b      	mov	r3, r5
 8001ac0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ac4:	462b      	mov	r3, r5
 8001ac6:	1219      	asrs	r1, r3, #8
 8001ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001acc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	17da      	asrs	r2, r3, #31
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001ae4:	464c      	mov	r4, r9
 8001ae6:	0123      	lsls	r3, r4, #4
 8001ae8:	4644      	mov	r4, r8
 8001aea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001aee:	4644      	mov	r4, r8
 8001af0:	0122      	lsls	r2, r4, #4
 8001af2:	1884      	adds	r4, r0, r2
 8001af4:	603c      	str	r4, [r7, #0]
 8001af6:	eb41 0303 	adc.w	r3, r1, r3
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b00:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001b04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b14 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b26:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	039a      	lsls	r2, r3, #14
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b32:	051b      	lsls	r3, r3, #20
 8001b34:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b4a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001b52:	4611      	mov	r1, r2
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	fb01 f202 	mul.w	r2, r1, r2
 8001b5a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	7f09      	ldrb	r1, [r1, #28]
 8001b60:	4608      	mov	r0, r1
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	fb00 f101 	mul.w	r1, r0, r1
 8001b68:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b6a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b6e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b72:	1292      	asrs	r2, r2, #10
 8001b74:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b86:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	13db      	asrs	r3, r3, #15
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	13d2      	asrs	r2, r2, #15
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	7e12      	ldrb	r2, [r2, #24]
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bb2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bba:	bfa8      	it	ge
 8001bbc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bc0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	131b      	asrs	r3, r3, #12
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b08c      	sub	sp, #48	; 0x30
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001be6:	2b60      	cmp	r3, #96	; 0x60
 8001be8:	d007      	beq.n	8001bfa <bmp280_read_fixed+0x28>
		if (humidity)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <bmp280_read_fixed+0x32>
 8001c00:	2308      	movs	r3, #8
 8001c02:	e000      	b.n	8001c06 <bmp280_read_fixed+0x34>
 8001c04:	2306      	movs	r3, #6
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f107 0218 	add.w	r2, r7, #24
 8001c10:	21f7      	movs	r1, #247	; 0xf7
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff faab 	bl	800116e <read_data>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <bmp280_read_fixed+0x50>
		return false;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e038      	b.n	8001c94 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001c22:	7e3b      	ldrb	r3, [r7, #24]
 8001c24:	031a      	lsls	r2, r3, #12
 8001c26:	7e7b      	ldrb	r3, [r7, #25]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	7eba      	ldrb	r2, [r7, #26]
 8001c2e:	0912      	lsrs	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	4313      	orrs	r3, r2
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001c36:	7efb      	ldrb	r3, [r7, #27]
 8001c38:	031a      	lsls	r2, r3, #12
 8001c3a:	7f3b      	ldrb	r3, [r7, #28]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	7f7a      	ldrb	r2, [r7, #29]
 8001c42:	0912      	lsrs	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	4313      	orrs	r3, r2
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff fc67 	bl	8001526 <compensate_temperature>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	461a      	mov	r2, r3
 8001c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fc97 	bl	8001598 <compensate_pressure>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001c76:	7fbb      	ldrb	r3, [r7, #30]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	7ffa      	ldrb	r2, [r7, #31]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	461a      	mov	r2, r3
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff ff44 	bl	8001b14 <compensate_humidity>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3730      	adds	r7, #48	; 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <bmp280_read_float+0x1a>
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	e000      	b.n	8001cb8 <bmp280_read_float+0x1c>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f107 0218 	add.w	r2, r7, #24
 8001cbc:	f107 011c 	add.w	r1, r7, #28
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7ff ff86 	bl	8001bd2 <bmp280_read_fixed>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d028      	beq.n	8001d1e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d28 <bmp280_read_float+0x8c>
 8001cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cee:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001d2c <bmp280_read_float+0x90>
 8001cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d0c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001d30 <bmp280_read_float+0x94>
 8001d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <bmp280_read_float+0x84>
	}

	return false;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	42c80000 	.word	0x42c80000
 8001d2c:	43800000 	.word	0x43800000
 8001d30:	44800000 	.word	0x44800000

08001d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <MX_GPIO_Init+0x80>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <MX_GPIO_Init+0x80>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_GPIO_Init+0x80>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_GPIO_Init+0x80>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <MX_GPIO_Init+0x80>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_GPIO_Init+0x80>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <MX_GPIO_Init+0x84>)
 8001d8a:	f000 ff9f 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4619      	mov	r1, r3
 8001da6:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_GPIO_Init+0x84>)
 8001da8:	f000 fdfc 	bl	80029a4 <HAL_GPIO_Init>

}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <MX_I2C1_Init+0x54>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_I2C1_Init+0x58>)
 8001dca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dfa:	f000 ff81 	bl	8002d00 <HAL_I2C_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e04:	f000 f9aa 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200001fc 	.word	0x200001fc
 8001e10:	40005400 	.word	0x40005400
 8001e14:	000186a0 	.word	0x000186a0

08001e18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_I2C_MspInit+0x84>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12c      	bne.n	8001e94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_I2C_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <HAL_I2C_MspInit+0x88>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_I2C_MspInit+0x88>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <HAL_I2C_MspInit+0x8c>)
 8001e74:	f000 fd96 	bl	80029a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_I2C_MspInit+0x88>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_I2C_MspInit+0x88>)
 8001e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_I2C_MspInit+0x88>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001eb0:	1d39      	adds	r1, r7, #4
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <__io_putchar+0x20>)
 8001eba:	f003 fa98 	bl	80053ee <HAL_UART_Transmit>
  return ch;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200002ec 	.word	0x200002ec

08001ecc <HCSR04_Read>:

void HCSR04_Read(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <HCSR04_Read+0x38>)
 8001ed8:	f000 fef8 	bl	8002ccc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f000 fc2b 	bl	8002738 <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee8:	4806      	ldr	r0, [pc, #24]	; (8001f04 <HCSR04_Read+0x38>)
 8001eea:	f000 feef 	bl	8002ccc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HCSR04_Read+0x3c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HCSR04_Read+0x3c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0202 	orr.w	r2, r2, #2
 8001efc:	60da      	str	r2, [r3, #12]
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40020000 	.word	0x40020000
 8001f08:	200002a4 	.word	0x200002a4

08001f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f0c:	b598      	push	{r3, r4, r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f10:	f000 fba0 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f14:	f000 f846 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f18:	f7ff ff0c 	bl	8001d34 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001f1c:	f000 fa58 	bl	80023d0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001f20:	f000 fafc 	bl	800251c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f24:	f7ff ff4a 	bl	8001dbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4815      	ldr	r0, [pc, #84]	; (8001f80 <main+0x74>)
 8001f2c:	f002 fc5a 	bl	80047e4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  bmp280_init_default_params(&bmp280.params);
 8001f30:	4814      	ldr	r0, [pc, #80]	; (8001f84 <main+0x78>)
 8001f32:	f7ff f8d1 	bl	80010d8 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <main+0x7c>)
 8001f38:	2276      	movs	r2, #118	; 0x76
 8001f3a:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <main+0x7c>)
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <main+0x80>)
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28

  bmp280_init(&bmp280, &bmp280.params);
 8001f42:	4910      	ldr	r1, [pc, #64]	; (8001f84 <main+0x78>)
 8001f44:	4810      	ldr	r0, [pc, #64]	; (8001f88 <main+0x7c>)
 8001f46:	f7ff fa41 	bl	80013cc <bmp280_init>

  while (1)
  {
	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <main+0x84>)
 8001f4c:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <main+0x88>)
 8001f4e:	4912      	ldr	r1, [pc, #72]	; (8001f98 <main+0x8c>)
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <main+0x7c>)
 8001f52:	f7ff fea3 	bl	8001c9c <bmp280_read_float>
	  HCSR04_Read();
 8001f56:	f7ff ffb9 	bl	8001ecc <HCSR04_Read>
	  //Difference+=58;
	  printf("%lu; %.2f\r\n", Difference, temperature);
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <main+0x90>)
 8001f5c:	681c      	ldr	r4, [r3, #0]
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <main+0x8c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fb10 	bl	8000588 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <main+0x94>)
 8001f70:	f004 fc5e 	bl	8006830 <iprintf>
	  HAL_Delay(500);
 8001f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f78:	f000 fbde 	bl	8002738 <HAL_Delay>
	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8001f7c:	e7e5      	b.n	8001f4a <main+0x3e>
 8001f7e:	bf00      	nop
 8001f80:	200002a4 	.word	0x200002a4
 8001f84:	2000028c 	.word	0x2000028c
 8001f88:	20000260 	.word	0x20000260
 8001f8c:	200001fc 	.word	0x200001fc
 8001f90:	2000029c 	.word	0x2000029c
 8001f94:	20000294 	.word	0x20000294
 8001f98:	20000298 	.word	0x20000298
 8001f9c:	20000258 	.word	0x20000258
 8001fa0:	0800a468 	.word	0x0800a468

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b094      	sub	sp, #80	; 0x50
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	2234      	movs	r2, #52	; 0x34
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fdba 	bl	8005b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <SystemClock_Config+0xb8>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a22      	ldr	r2, [pc, #136]	; (800205c <SystemClock_Config+0xb8>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <SystemClock_Config+0xb8>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <SystemClock_Config+0xbc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <SystemClock_Config+0xbc>)
 8001ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <SystemClock_Config+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002004:	2302      	movs	r3, #2
 8002006:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002008:	2301      	movs	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800200c:	2310      	movs	r3, #16
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002010:	2300      	movs	r3, #0
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4618      	mov	r0, r3
 800201a:	f002 f8f5 	bl	8004208 <HAL_RCC_OscConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002024:	f000 f89a 	bl	800215c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fe1c 	bl	8003c80 <HAL_RCC_ClockConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800204e:	f000 f885 	bl	800215c <Error_Handler>
  }
}
 8002052:	bf00      	nop
 8002054:	3750      	adds	r7, #80	; 0x50
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000

08002064 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7f1b      	ldrb	r3, [r3, #28]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d164      	bne.n	800213e <HAL_TIM_IC_CaptureCallback+0xda>
		if (Is_First_Captured==0) {
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11a      	bne.n	80020b2 <HAL_TIM_IC_CaptureCallback+0x4e>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800207c:	2100      	movs	r1, #0
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f002 fe7c 	bl	8004d7c <HAL_TIM_ReadCapturedValue>
 8002084:	4603      	mov	r3, r0
 8002086:	4a31      	ldr	r2, [pc, #196]	; (800214c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8002088:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 020a 	bic.w	r2, r2, #10
 800209e:	621a      	str	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0202 	orr.w	r2, r2, #2
 80020ae:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 80020b0:	e045      	b.n	800213e <HAL_TIM_IC_CaptureCallback+0xda>
		else if (Is_First_Captured==1){
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d141      	bne.n	800213e <HAL_TIM_IC_CaptureCallback+0xda>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80020ba:	2100      	movs	r1, #0
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 fe5d 	bl	8004d7c <HAL_TIM_ReadCapturedValue>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_TIM_IC_CaptureCallback+0xec>)
 80020c6:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1){
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_TIM_IC_CaptureCallback+0xec>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d907      	bls.n	80020ec <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_TIM_IC_CaptureCallback+0xec>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00f      	b.n	800210c <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2){
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_TIM_IC_CaptureCallback+0xec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d909      	bls.n	800210c <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_TIM_IC_CaptureCallback+0xec>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002106:	33ff      	adds	r3, #255	; 0xff
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800210a:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 020a 	bic.w	r2, r2, #10
 8002120:	621a      	str	r2, [r3, #32]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a12      	ldr	r2, [r2, #32]
 800212c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0202 	bic.w	r2, r2, #2
 800213c:	60da      	str	r2, [r3, #12]
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000025c 	.word	0x2000025c
 800214c:	20000250 	.word	0x20000250
 8002150:	20000254 	.word	0x20000254
 8002154:	20000258 	.word	0x20000258
 8002158:	200002a4 	.word	0x200002a4

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002164:	e7fe      	b.n	8002164 <Error_Handler+0x8>
	...

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <HAL_MspInit+0x4c>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_MspInit+0x4c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_MspInit+0x4c>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_MspInit+0x4c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002204:	f000 fa78 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <TIM1_CC_IRQHandler+0x10>)
 8002212:	f002 fc0f 	bl	8004a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200002a4 	.word	0x200002a4

08002220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return 1;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_kill>:

int _kill(int pid, int sig)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800223a:	f003 fc4d 	bl	8005ad8 <__errno>
 800223e:	4603      	mov	r3, r0
 8002240:	2216      	movs	r2, #22
 8002242:	601a      	str	r2, [r3, #0]
  return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_exit>:

void _exit (int status)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ffe7 	bl	8002230 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002262:	e7fe      	b.n	8002262 <_exit+0x12>

08002264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e00a      	b.n	800228c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002276:	f3af 8000 	nop.w
 800227a:	4601      	mov	r1, r0
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf0      	blt.n	8002276 <_read+0x12>
  }

  return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e009      	b.n	80022c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fdf5 	bl	8001ea8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf1      	blt.n	80022b0 <_write+0x12>
  }
  return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_close>:

int _close(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_isatty>:

int _isatty(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f003 fbb2 	bl	8005ad8 <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20020000 	.word	0x20020000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	200002a0 	.word	0x200002a0
 80023a8:	20000348 	.word	0x20000348

080023ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <SystemInit+0x20>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <SystemInit+0x20>)
 80023b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023e0:	463b      	mov	r3, r7
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <MX_TIM1_Init+0xa4>)
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <MX_TIM1_Init+0xa8>)
 80023f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <MX_TIM1_Init+0xa4>)
 80023f4:	220f      	movs	r2, #15
 80023f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <MX_TIM1_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <MX_TIM1_Init+0xa4>)
 8002400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002404:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <MX_TIM1_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <MX_TIM1_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <MX_TIM1_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002418:	4816      	ldr	r0, [pc, #88]	; (8002474 <MX_TIM1_Init+0xa4>)
 800241a:	f002 f993 	bl	8004744 <HAL_TIM_IC_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002424:	f7ff fe9a 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	4619      	mov	r1, r3
 8002436:	480f      	ldr	r0, [pc, #60]	; (8002474 <MX_TIM1_Init+0xa4>)
 8002438:	f002 fefc 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002442:	f7ff fe8b 	bl	800215c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002446:	2300      	movs	r3, #0
 8002448:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800244a:	2301      	movs	r3, #1
 800244c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_TIM1_Init+0xa4>)
 800245e:	f002 fbf1 	bl	8004c44 <HAL_TIM_IC_ConfigChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002468:	f7ff fe78 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200002a4 	.word	0x200002a4
 8002478:	40010000 	.word	0x40010000

0800247c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_TIM_IC_MspInit+0x94>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d134      	bne.n	8002508 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_TIM_IC_MspInit+0x98>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_TIM_IC_MspInit+0x98>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_TIM_IC_MspInit+0x98>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_TIM_IC_MspInit+0x98>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a14      	ldr	r2, [pc, #80]	; (8002514 <HAL_TIM_IC_MspInit+0x98>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_TIM_IC_MspInit+0x98>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	4809      	ldr	r0, [pc, #36]	; (8002518 <HAL_TIM_IC_MspInit+0x9c>)
 80024f4:	f000 fa56 	bl	80029a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2103      	movs	r1, #3
 80024fc:	201b      	movs	r0, #27
 80024fe:	f000 fa1a 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002502:	201b      	movs	r0, #27
 8002504:	f000 fa33 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002508:	bf00      	nop
 800250a:	3728      	adds	r7, #40	; 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40010000 	.word	0x40010000
 8002514:	40023800 	.word	0x40023800
 8002518:	40020000 	.word	0x40020000

0800251c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800252c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002554:	f002 fefe 	bl	8005354 <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800255e:	f7ff fdfd 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200002ec 	.word	0x200002ec
 800256c:	40004400 	.word	0x40004400

08002570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <HAL_UART_MspInit+0x84>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d12b      	bne.n	80025ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_UART_MspInit+0x88>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <HAL_UART_MspInit+0x88>)
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_UART_MspInit+0x88>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_UART_MspInit+0x88>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_UART_MspInit+0x88>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_UART_MspInit+0x88>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025ca:	230c      	movs	r3, #12
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025da:	2307      	movs	r3, #7
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	; (80025fc <HAL_UART_MspInit+0x8c>)
 80025e6:	f000 f9dd 	bl	80029a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40004400 	.word	0x40004400
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000

08002600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800261c:	4c0b      	ldr	r4, [pc, #44]	; (800264c <LoopFillZerobss+0x26>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800262a:	f7ff febf 	bl	80023ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f003 fa59 	bl	8005ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002632:	f7ff fc6b 	bl	8001f0c <main>
  bx  lr    
 8002636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002644:	0800a94c 	.word	0x0800a94c
  ldr r2, =_sbss
 8002648:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800264c:	20000344 	.word	0x20000344

08002650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_Init+0x40>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_Init+0x40>)
 800266a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x40>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f94f 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	200f      	movs	r0, #15
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7ff fd6e 	bl	8002168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f967 	bl	800298a <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 f92f 	bl	8002936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000008 	.word	0x20000008
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000008 	.word	0x20000008
 800271c:	20000330 	.word	0x20000330

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000330 	.word	0x20000330

08002738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff ffee 	bl	8002720 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d005      	beq.n	800275e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_Delay+0x44>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800275e:	bf00      	nop
 8002760:	f7ff ffde 	bl	8002720 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d8f7      	bhi.n	8002760 <HAL_Delay+0x28>
  {
  }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000008 	.word	0x20000008

08002780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60d3      	str	r3, [r2, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0307 	and.w	r3, r3, #7
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db0b      	blt.n	800280e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4907      	ldr	r1, [pc, #28]	; (800281c <__NVIC_EnableIRQ+0x38>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	; (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	; (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	4313      	orrs	r3, r2
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ec:	d301      	bcc.n	80028f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00f      	b.n	8002912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <SysTick_Config+0x40>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fa:	210f      	movs	r1, #15
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f7ff ff8e 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <SysTick_Config+0x40>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <SysTick_Config+0x40>)
 800290c:	2207      	movs	r2, #7
 800290e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	e000e010 	.word	0xe000e010

08002920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff29 	bl	8002780 <__NVIC_SetPriorityGrouping>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002948:	f7ff ff3e 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 800294c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff8e 	bl	8002874 <NVIC_EncodePriority>
 8002958:	4602      	mov	r2, r0
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff5d 	bl	8002820 <__NVIC_SetPriority>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff31 	bl	80027e4 <__NVIC_EnableIRQ>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ffa2 	bl	80028dc <SysTick_Config>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e165      	b.n	8002c8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 8154 	bne.w	8002c86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d130      	bne.n	8002a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80ae 	beq.w	8002c86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_GPIO_Init+0x300>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_GPIO_Init+0x300>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <HAL_GPIO_Init+0x300>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b46:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x308>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d025      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <HAL_GPIO_Init+0x216>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x310>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x212>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_GPIO_Init+0x314>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_GPIO_Init+0x318>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x20a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_GPIO_Init+0x31c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x206>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a49      	ldr	r2, [pc, #292]	; (8002cc4 <HAL_GPIO_Init+0x320>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x202>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e00c      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e00a      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002baa:	2305      	movs	r3, #5
 8002bac:	e008      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e004      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_GPIO_Init+0x21c>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	f002 0203 	and.w	r2, r2, #3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd0:	4935      	ldr	r1, [pc, #212]	; (8002ca8 <HAL_GPIO_Init+0x304>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c02:	4a31      	ldr	r2, [pc, #196]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c08:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c2c:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	f67f ae96 	bls.w	80029c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40021400 	.word	0x40021400
 8002cc4:	40021800 	.word	0x40021800
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e12b      	b.n	8002f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff f876 	bl	8001e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	; 0x24
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d64:	f001 f87e 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 8002d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4a81      	ldr	r2, [pc, #516]	; (8002f74 <HAL_I2C_Init+0x274>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d807      	bhi.n	8002d84 <HAL_I2C_Init+0x84>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a80      	ldr	r2, [pc, #512]	; (8002f78 <HAL_I2C_Init+0x278>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e006      	b.n	8002d92 <HAL_I2C_Init+0x92>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a7d      	ldr	r2, [pc, #500]	; (8002f7c <HAL_I2C_Init+0x27c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0e7      	b.n	8002f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a78      	ldr	r2, [pc, #480]	; (8002f80 <HAL_I2C_Init+0x280>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0c9b      	lsrs	r3, r3, #18
 8002da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a6a      	ldr	r2, [pc, #424]	; (8002f74 <HAL_I2C_Init+0x274>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d802      	bhi.n	8002dd4 <HAL_I2C_Init+0xd4>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	e009      	b.n	8002de8 <HAL_I2C_Init+0xe8>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	4a69      	ldr	r2, [pc, #420]	; (8002f84 <HAL_I2C_Init+0x284>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	3301      	adds	r3, #1
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	495c      	ldr	r1, [pc, #368]	; (8002f74 <HAL_I2C_Init+0x274>)
 8002e04:	428b      	cmp	r3, r1
 8002e06:	d819      	bhi.n	8002e3c <HAL_I2C_Init+0x13c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e59      	subs	r1, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_I2C_Init+0x138>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e59      	subs	r1, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	e051      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e04f      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <HAL_I2C_Init+0x168>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e012      	b.n	8002e8e <HAL_I2C_Init+0x18e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	0099      	lsls	r1, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x196>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10e      	bne.n	8002ebc <HAL_I2C_Init+0x1bc>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1e58      	subs	r0, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	440b      	add	r3, r1
 8002eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eba:	e00f      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	0099      	lsls	r1, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	6809      	ldr	r1, [r1, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6911      	ldr	r1, [r2, #16]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68d2      	ldr	r2, [r2, #12]
 8002f16:	4311      	orrs	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	000186a0 	.word	0x000186a0
 8002f78:	001e847f 	.word	0x001e847f
 8002f7c:	003d08ff 	.word	0x003d08ff
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	10624dd3 	.word	0x10624dd3

08002f88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fa2:	f7ff fbbd 	bl	8002720 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	f040 80d9 	bne.w	8003168 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2319      	movs	r3, #25
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	496d      	ldr	r1, [pc, #436]	; (8003174 <HAL_I2C_Mem_Write+0x1ec>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fc7f 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e0cc      	b.n	800316a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Mem_Write+0x56>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0c5      	b.n	800316a <HAL_I2C_Mem_Write+0x1e2>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d007      	beq.n	8003004 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2221      	movs	r2, #33	; 0x21
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2240      	movs	r2, #64	; 0x40
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a3a      	ldr	r2, [r7, #32]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a4d      	ldr	r2, [pc, #308]	; (8003178 <HAL_I2C_Mem_Write+0x1f0>)
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003046:	88f8      	ldrh	r0, [r7, #6]
 8003048:	893a      	ldrh	r2, [r7, #8]
 800304a:	8979      	ldrh	r1, [r7, #10]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	4603      	mov	r3, r0
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fab6 	bl	80035c8 <I2C_RequestMemoryWrite>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d052      	beq.n	8003108 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e081      	b.n	800316a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fd00 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b04      	cmp	r3, #4
 800307c:	d107      	bne.n	800308e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06b      	b.n	800316a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d11b      	bne.n	8003108 <HAL_I2C_Mem_Write+0x180>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d017      	beq.n	8003108 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1aa      	bne.n	8003066 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fcec 	bl	8003af2 <I2C_WaitOnBTFFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b04      	cmp	r3, #4
 8003126:	d107      	bne.n	8003138 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003136:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e016      	b.n	800316a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e000      	b.n	800316a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003168:	2302      	movs	r3, #2
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	00100002 	.word	0x00100002
 8003178:	ffff0000 	.word	0xffff0000

0800317c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	460b      	mov	r3, r1
 8003190:	813b      	strh	r3, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003196:	f7ff fac3 	bl	8002720 <HAL_GetTick>
 800319a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	f040 8208 	bne.w	80035ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2319      	movs	r3, #25
 80031b0:	2201      	movs	r2, #1
 80031b2:	497b      	ldr	r1, [pc, #492]	; (80033a0 <HAL_I2C_Mem_Read+0x224>)
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fb85 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
 80031c2:	e1fb      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_I2C_Mem_Read+0x56>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e1f4      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d007      	beq.n	80031f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2222      	movs	r2, #34	; 0x22
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a5b      	ldr	r2, [pc, #364]	; (80033a4 <HAL_I2C_Mem_Read+0x228>)
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800323a:	88f8      	ldrh	r0, [r7, #6]
 800323c:	893a      	ldrh	r2, [r7, #8]
 800323e:	8979      	ldrh	r1, [r7, #10]
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	4603      	mov	r3, r0
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fa52 	bl	80036f4 <I2C_RequestMemoryRead>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1b0      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e184      	b.n	8003594 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	2b01      	cmp	r3, #1
 8003290:	d11b      	bne.n	80032ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e164      	b.n	8003594 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d11b      	bne.n	800330a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	e144      	b.n	8003594 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003320:	e138      	b.n	8003594 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b03      	cmp	r3, #3
 8003328:	f200 80f1 	bhi.w	800350e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	d123      	bne.n	800337c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fc1b 	bl	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e139      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800337a:	e10b      	b.n	8003594 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	2b02      	cmp	r3, #2
 8003382:	d14e      	bne.n	8003422 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2200      	movs	r2, #0
 800338c:	4906      	ldr	r1, [pc, #24]	; (80033a8 <HAL_I2C_Mem_Read+0x22c>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fa98 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e10e      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
 800339e:	bf00      	nop
 80033a0:	00100002 	.word	0x00100002
 80033a4:	ffff0000 	.word	0xffff0000
 80033a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003420:	e0b8      	b.n	8003594 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	2200      	movs	r2, #0
 800342a:	4966      	ldr	r1, [pc, #408]	; (80035c4 <HAL_I2C_Mem_Read+0x448>)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fa49 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0bf      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2200      	movs	r2, #0
 8003486:	494f      	ldr	r1, [pc, #316]	; (80035c4 <HAL_I2C_Mem_Read+0x448>)
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fa1b 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e091      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800350c:	e042      	b.n	8003594 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003510:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fb2e 	bl	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e04c      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d118      	bne.n	8003594 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f aec2 	bne.w	8003322 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	00010004 	.word	0x00010004

080035c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	4608      	mov	r0, r1
 80035d2:	4611      	mov	r1, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	817b      	strh	r3, [r7, #10]
 80035da:	460b      	mov	r3, r1
 80035dc:	813b      	strh	r3, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f960 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003618:	d103      	bne.n	8003622 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e05f      	b.n	80036e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	492d      	ldr	r1, [pc, #180]	; (80036f0 <I2C_RequestMemoryWrite+0x128>)
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f998 	bl	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e04c      	b.n	80036e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	6a39      	ldr	r1, [r7, #32]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fa02 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b04      	cmp	r3, #4
 8003678:	d107      	bne.n	800368a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e02b      	b.n	80036e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003694:	893b      	ldrh	r3, [r7, #8]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	e021      	b.n	80036e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9dc 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e005      	b.n	80036e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036da:	893b      	ldrh	r3, [r7, #8]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	00010002 	.word	0x00010002

080036f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4603      	mov	r3, r0
 8003704:	817b      	strh	r3, [r7, #10]
 8003706:	460b      	mov	r3, r1
 8003708:	813b      	strh	r3, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	2200      	movs	r2, #0
 8003736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f8c2 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003754:	d103      	bne.n	800375e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0aa      	b.n	80038b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	6a3a      	ldr	r2, [r7, #32]
 8003776:	4952      	ldr	r1, [pc, #328]	; (80038c0 <I2C_RequestMemoryRead+0x1cc>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f8fa 	bl	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e097      	b.n	80038b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6a39      	ldr	r1, [r7, #32]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f964 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d107      	bne.n	80037c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e076      	b.n	80038b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d0:	893b      	ldrh	r3, [r7, #8]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]
 80037da:	e021      	b.n	8003820 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037dc:	893b      	ldrh	r3, [r7, #8]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	6a39      	ldr	r1, [r7, #32]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f93e 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d107      	bne.n	8003812 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e050      	b.n	80038b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003816:	893b      	ldrh	r3, [r7, #8]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	6a39      	ldr	r1, [r7, #32]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f923 	bl	8003a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	2b04      	cmp	r3, #4
 8003836:	d107      	bne.n	8003848 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003846:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e035      	b.n	80038b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2200      	movs	r2, #0
 8003864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f82b 	bl	80038c4 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d103      	bne.n	800388c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e013      	b.n	80038b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003890:	897b      	ldrh	r3, [r7, #10]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	6a3a      	ldr	r2, [r7, #32]
 80038a4:	4906      	ldr	r1, [pc, #24]	; (80038c0 <I2C_RequestMemoryRead+0x1cc>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f863 	bl	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00010002 	.word	0x00010002

080038c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d4:	e025      	b.n	8003922 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d021      	beq.n	8003922 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe ff1f 	bl	8002720 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e023      	b.n	800396a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10d      	bne.n	8003948 <I2C_WaitOnFlagUntilTimeout+0x84>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4013      	ands	r3, r2
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	e00c      	b.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	429a      	cmp	r2, r3
 8003966:	d0b6      	beq.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003980:	e051      	b.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003990:	d123      	bne.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f043 0204 	orr.w	r2, r3, #4
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e046      	b.n	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d021      	beq.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fe fe9d 	bl	8002720 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e020      	b.n	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10c      	bne.n	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	e00b      	b.n	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d18d      	bne.n	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a7c:	e02d      	b.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f8ce 	bl	8003c20 <I2C_IsAcknowledgeFailed>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e02d      	b.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d021      	beq.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fe fe43 	bl	8002720 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d116      	bne.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e007      	b.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d1ca      	bne.n	8003a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003afe:	e02d      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f88d 	bl	8003c20 <I2C_IsAcknowledgeFailed>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e02d      	b.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d021      	beq.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7fe fe02 	bl	8002720 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d1ca      	bne.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b80:	e042      	b.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d119      	bne.n	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0210 	mvn.w	r2, #16
 8003b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e029      	b.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc4:	f7fe fdac 	bl	8002720 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d302      	bcc.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d116      	bne.n	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e007      	b.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d1b5      	bne.n	8003b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d11b      	bne.n	8003c70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f043 0204 	orr.w	r2, r3, #4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0cc      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d90c      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0b8      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	494d      	ldr	r1, [pc, #308]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d044      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d119      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e07f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e06f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e067      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4934      	ldr	r1, [pc, #208]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d70:	f7fe fcd6 	bl	8002720 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fe fcd2 	bl	8002720 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e04f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d20c      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e032      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4916      	ldr	r1, [pc, #88]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e06:	f000 f855 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	5ccb      	ldrb	r3, [r1, r3]
 8003e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fc36 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023c00 	.word	0x40023c00
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	0800a474 	.word	0x0800a474
 8003e44:	20000000 	.word	0x20000000
 8003e48:	20000004 	.word	0x20000004

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000000 	.word	0x20000000

08003e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e68:	f7ff fff0 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0a9b      	lsrs	r3, r3, #10
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	0800a484 	.word	0x0800a484

08003e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e90:	f7ff ffdc 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0b5b      	lsrs	r3, r3, #13
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	0800a484 	.word	0x0800a484

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b0a6      	sub	sp, #152	; 0x98
 8003eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eda:	4bc8      	ldr	r3, [pc, #800]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	f200 817e 	bhi.w	80041e4 <HAL_RCC_GetSysClockFreq+0x330>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	080041e5 	.word	0x080041e5
 8003ef8:	080041e5 	.word	0x080041e5
 8003efc:	080041e5 	.word	0x080041e5
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	080041e5 	.word	0x080041e5
 8003f08:	080041e5 	.word	0x080041e5
 8003f0c:	080041e5 	.word	0x080041e5
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	080041e5 	.word	0x080041e5
 8003f18:	080041e5 	.word	0x080041e5
 8003f1c:	080041e5 	.word	0x080041e5
 8003f20:	0800409f 	.word	0x0800409f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4bb6      	ldr	r3, [pc, #728]	; (8004200 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003f2a:	e15f      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2c:	4bb5      	ldr	r3, [pc, #724]	; (8004204 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003f32:	e15b      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4bb1      	ldr	r3, [pc, #708]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f40:	4bae      	ldr	r3, [pc, #696]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d031      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4c:	4bab      	ldr	r3, [pc, #684]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	2200      	movs	r2, #0
 8003f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f60:	2300      	movs	r3, #0
 8003f62:	667b      	str	r3, [r7, #100]	; 0x64
 8003f64:	4ba7      	ldr	r3, [pc, #668]	; (8004204 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f66:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f6a:	462a      	mov	r2, r5
 8003f6c:	fb03 f202 	mul.w	r2, r3, r2
 8003f70:	2300      	movs	r3, #0
 8003f72:	4621      	mov	r1, r4
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	4aa2      	ldr	r2, [pc, #648]	; (8004204 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	fba1 1202 	umull	r1, r2, r1, r2
 8003f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f84:	460a      	mov	r2, r1
 8003f86:	67ba      	str	r2, [r7, #120]	; 0x78
 8003f88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003f8a:	4413      	add	r3, r2
 8003f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f92:	2200      	movs	r2, #0
 8003f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003fa0:	f7fc fee2 	bl	8000d68 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fae:	e064      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb0:	4b92      	ldr	r3, [pc, #584]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	099b      	lsrs	r3, r3, #6
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8003fba:	657a      	str	r2, [r7, #84]	; 0x54
 8003fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003fcc:	4622      	mov	r2, r4
 8003fce:	462b      	mov	r3, r5
 8003fd0:	f04f 0000 	mov.w	r0, #0
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	0159      	lsls	r1, r3, #5
 8003fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fde:	0150      	lsls	r0, r2, #5
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	1a51      	subs	r1, r2, r1
 8003fe8:	6139      	str	r1, [r7, #16]
 8003fea:	4629      	mov	r1, r5
 8003fec:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ffe:	4659      	mov	r1, fp
 8004000:	018b      	lsls	r3, r1, #6
 8004002:	4651      	mov	r1, sl
 8004004:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004008:	4651      	mov	r1, sl
 800400a:	018a      	lsls	r2, r1, #6
 800400c:	4651      	mov	r1, sl
 800400e:	ebb2 0801 	subs.w	r8, r2, r1
 8004012:	4659      	mov	r1, fp
 8004014:	eb63 0901 	sbc.w	r9, r3, r1
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004024:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004028:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800402c:	4690      	mov	r8, r2
 800402e:	4699      	mov	r9, r3
 8004030:	4623      	mov	r3, r4
 8004032:	eb18 0303 	adds.w	r3, r8, r3
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	462b      	mov	r3, r5
 800403a:	eb49 0303 	adc.w	r3, r9, r3
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800404c:	4629      	mov	r1, r5
 800404e:	028b      	lsls	r3, r1, #10
 8004050:	4621      	mov	r1, r4
 8004052:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004056:	4621      	mov	r1, r4
 8004058:	028a      	lsls	r2, r1, #10
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004062:	2200      	movs	r2, #0
 8004064:	643b      	str	r3, [r7, #64]	; 0x40
 8004066:	647a      	str	r2, [r7, #68]	; 0x44
 8004068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800406c:	f7fc fe7c 	bl	8000d68 <__aeabi_uldivmod>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4613      	mov	r3, r2
 8004076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407a:	4b60      	ldr	r3, [pc, #384]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	3301      	adds	r3, #1
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800408c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800409c:	e0a6      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409e:	4b57      	ldr	r3, [pc, #348]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040aa:	4b54      	ldr	r3, [pc, #336]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02a      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b51      	ldr	r3, [pc, #324]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	2200      	movs	r2, #0
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040c8:	2100      	movs	r1, #0
 80040ca:	4b4e      	ldr	r3, [pc, #312]	; (8004204 <HAL_RCC_GetSysClockFreq+0x350>)
 80040cc:	fb03 f201 	mul.w	r2, r3, r1
 80040d0:	2300      	movs	r3, #0
 80040d2:	fb00 f303 	mul.w	r3, r0, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	4a4a      	ldr	r2, [pc, #296]	; (8004204 <HAL_RCC_GetSysClockFreq+0x350>)
 80040da:	fba0 1202 	umull	r1, r2, r0, r2
 80040de:	677a      	str	r2, [r7, #116]	; 0x74
 80040e0:	460a      	mov	r2, r1
 80040e2:	673a      	str	r2, [r7, #112]	; 0x70
 80040e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040e6:	4413      	add	r3, r2
 80040e8:	677b      	str	r3, [r7, #116]	; 0x74
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ee:	2200      	movs	r2, #0
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
 80040f2:	637a      	str	r2, [r7, #52]	; 0x34
 80040f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80040fc:	f7fc fe34 	bl	8000d68 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800410a:	e05b      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410c:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	2200      	movs	r2, #0
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
 8004116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	2300      	movs	r3, #0
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
 8004124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	f04f 0000 	mov.w	r0, #0
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	0159      	lsls	r1, r3, #5
 8004136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800413a:	0150      	lsls	r0, r2, #5
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4641      	mov	r1, r8
 8004142:	ebb2 0a01 	subs.w	sl, r2, r1
 8004146:	4649      	mov	r1, r9
 8004148:	eb63 0b01 	sbc.w	fp, r3, r1
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800415c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004160:	ebb2 040a 	subs.w	r4, r2, sl
 8004164:	eb63 050b 	sbc.w	r5, r3, fp
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	00eb      	lsls	r3, r5, #3
 8004172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004176:	00e2      	lsls	r2, r4, #3
 8004178:	4614      	mov	r4, r2
 800417a:	461d      	mov	r5, r3
 800417c:	4643      	mov	r3, r8
 800417e:	18e3      	adds	r3, r4, r3
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	464b      	mov	r3, r9
 8004184:	eb45 0303 	adc.w	r3, r5, r3
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004196:	4629      	mov	r1, r5
 8004198:	028b      	lsls	r3, r1, #10
 800419a:	4621      	mov	r1, r4
 800419c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a0:	4621      	mov	r1, r4
 80041a2:	028a      	lsls	r2, r1, #10
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ac:	2200      	movs	r2, #0
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	61fa      	str	r2, [r7, #28]
 80041b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b6:	f7fc fdd7 	bl	8000d68 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4613      	mov	r3, r2
 80041c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_GetSysClockFreq+0x348>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0f1b      	lsrs	r3, r3, #28
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80041d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80041e2:	e003      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_RCC_GetSysClockFreq+0x34c>)
 80041e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80041ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3798      	adds	r7, #152	; 0x98
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	00f42400 	.word	0x00f42400
 8004204:	017d7840 	.word	0x017d7840

08004208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e28d      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8083 	beq.w	800432e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004228:	4b94      	ldr	r3, [pc, #592]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b04      	cmp	r3, #4
 8004232:	d019      	beq.n	8004268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004234:	4b91      	ldr	r3, [pc, #580]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800423c:	2b08      	cmp	r3, #8
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004240:	4b8e      	ldr	r3, [pc, #568]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424c:	d00c      	beq.n	8004268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b8b      	ldr	r3, [pc, #556]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d112      	bne.n	8004280 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004266:	d10b      	bne.n	8004280 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	4b84      	ldr	r3, [pc, #528]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d05b      	beq.n	800432c <HAL_RCC_OscConfig+0x124>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d157      	bne.n	800432c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e25a      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x90>
 800428a:	4b7c      	ldr	r3, [pc, #496]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7b      	ldr	r2, [pc, #492]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e01d      	b.n	80042d4 <HAL_RCC_OscConfig+0xcc>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0xb4>
 80042a2:	4b76      	ldr	r3, [pc, #472]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a75      	ldr	r2, [pc, #468]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a72      	ldr	r2, [pc, #456]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0xcc>
 80042bc:	4b6f      	ldr	r3, [pc, #444]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6e      	ldr	r2, [pc, #440]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b6c      	ldr	r3, [pc, #432]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6b      	ldr	r2, [pc, #428]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe fa20 	bl	8002720 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe fa1c 	bl	8002720 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e21f      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0xdc>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fe fa0c 	bl	8002720 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430c:	f7fe fa08 	bl	8002720 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e20b      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x104>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d06f      	beq.n	800441a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800433a:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b00      	cmp	r3, #0
 8004344:	d017      	beq.n	8004376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004346:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800434e:	2b08      	cmp	r3, #8
 8004350:	d105      	bne.n	800435e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d11c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436a:	4b44      	ldr	r3, [pc, #272]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d116      	bne.n	80043a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_RCC_OscConfig+0x186>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d001      	beq.n	800438e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e1d3      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438e:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4937      	ldr	r1, [pc, #220]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a2:	e03a      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ac:	4b34      	ldr	r3, [pc, #208]	; (8004480 <HAL_RCC_OscConfig+0x278>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b2:	f7fe f9b5 	bl	8002720 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ba:	f7fe f9b1 	bl	8002720 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e1b4      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4925      	ldr	r1, [pc, #148]	; (800447c <HAL_RCC_OscConfig+0x274>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
 80043ec:	e015      	b.n	800441a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_OscConfig+0x278>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe f994 	bl	8002720 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fc:	f7fe f990 	bl	8002720 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e193      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d036      	beq.n	8004494 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_RCC_OscConfig+0x27c>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fe f974 	bl	8002720 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443c:	f7fe f970 	bl	8002720 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e173      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_OscConfig+0x274>)
 8004450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x234>
 800445a:	e01b      	b.n	8004494 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <HAL_RCC_OscConfig+0x27c>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004462:	f7fe f95d 	bl	8002720 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	e00e      	b.n	8004488 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800446a:	f7fe f959 	bl	8002720 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d907      	bls.n	8004488 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e15c      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
 800447c:	40023800 	.word	0x40023800
 8004480:	42470000 	.word	0x42470000
 8004484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004488:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ea      	bne.n	800446a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8097 	beq.w	80045d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a6:	4b83      	ldr	r3, [pc, #524]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fe f919 	bl	8002720 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fe f915 	bl	8002720 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e118      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <HAL_RCC_OscConfig+0x4b0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x31e>
 8004518:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	e01c      	b.n	8004560 <HAL_RCC_OscConfig+0x358>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x340>
 800452e:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a60      	ldr	r2, [pc, #384]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	4b5e      	ldr	r3, [pc, #376]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a5d      	ldr	r2, [pc, #372]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0x358>
 8004548:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a59      	ldr	r2, [pc, #356]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
 8004554:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	4a56      	ldr	r2, [pc, #344]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800455a:	f023 0304 	bic.w	r3, r3, #4
 800455e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fe f8da 	bl	8002720 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fe f8d6 	bl	8002720 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0d7      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ee      	beq.n	8004570 <HAL_RCC_OscConfig+0x368>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe f8c4 	bl	8002720 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fe f8c0 	bl	8002720 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0c1      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b2:	4b40      	ldr	r3, [pc, #256]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ee      	bne.n	800459c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c4:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80ad 	beq.w	8004734 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045da:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d060      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d145      	bne.n	800467a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ee:	4b33      	ldr	r3, [pc, #204]	; (80046bc <HAL_RCC_OscConfig+0x4b4>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fe f894 	bl	8002720 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fe f890 	bl	8002720 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e093      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	3b01      	subs	r3, #1
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	061b      	lsls	r3, r3, #24
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	071b      	lsls	r3, r3, #28
 8004646:	491b      	ldr	r1, [pc, #108]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_RCC_OscConfig+0x4b4>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fe f865 	bl	8002720 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465a:	f7fe f861 	bl	8002720 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e064      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x452>
 8004678:	e05c      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_RCC_OscConfig+0x4b4>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fe f84e 	bl	8002720 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004688:	f7fe f84a 	bl	8002720 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e04d      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x480>
 80046a6:	e045      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e040      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40007000 	.word	0x40007000
 80046bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c0:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_RCC_OscConfig+0x538>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d030      	beq.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d129      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d122      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d119      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	3b01      	subs	r3, #1
 800470a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d10f      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d107      	bne.n	8004730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800

08004744 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e041      	b.n	80047da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd fe86 	bl	800247c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 fb66 	bl	8004e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_IC_Start_IT+0x1e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e013      	b.n	800482a <HAL_TIM_IC_Start_IT+0x46>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_IC_Start_IT+0x2e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e00b      	b.n	800482a <HAL_TIM_IC_Start_IT+0x46>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_IC_Start_IT+0x3e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e003      	b.n	800482a <HAL_TIM_IC_Start_IT+0x46>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <HAL_TIM_IC_Start_IT+0x58>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e013      	b.n	8004864 <HAL_TIM_IC_Start_IT+0x80>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b04      	cmp	r3, #4
 8004840:	d104      	bne.n	800484c <HAL_TIM_IC_Start_IT+0x68>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e00b      	b.n	8004864 <HAL_TIM_IC_Start_IT+0x80>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b08      	cmp	r3, #8
 8004850:	d104      	bne.n	800485c <HAL_TIM_IC_Start_IT+0x78>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e003      	b.n	8004864 <HAL_TIM_IC_Start_IT+0x80>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004862:	b2db      	uxtb	r3, r3
 8004864:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004866:	7bbb      	ldrb	r3, [r7, #14]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d102      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800486c:	7b7b      	ldrb	r3, [r7, #13]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d001      	beq.n	8004876 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0cc      	b.n	8004a10 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <HAL_TIM_IC_Start_IT+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004884:	e013      	b.n	80048ae <HAL_TIM_IC_Start_IT+0xca>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d104      	bne.n	8004896 <HAL_TIM_IC_Start_IT+0xb2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004894:	e00b      	b.n	80048ae <HAL_TIM_IC_Start_IT+0xca>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_IC_Start_IT+0xc2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a4:	e003      	b.n	80048ae <HAL_TIM_IC_Start_IT+0xca>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Start_IT+0xda>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x102>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_IC_Start_IT+0xea>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x102>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d104      	bne.n	80048de <HAL_TIM_IC_Start_IT+0xfa>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x102>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d841      	bhi.n	8004970 <HAL_TIM_IC_Start_IT+0x18c>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_TIM_IC_Start_IT+0x110>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004971 	.word	0x08004971
 80048fc:	08004971 	.word	0x08004971
 8004900:	08004971 	.word	0x08004971
 8004904:	0800493b 	.word	0x0800493b
 8004908:	08004971 	.word	0x08004971
 800490c:	08004971 	.word	0x08004971
 8004910:	08004971 	.word	0x08004971
 8004914:	0800494d 	.word	0x0800494d
 8004918:	08004971 	.word	0x08004971
 800491c:	08004971 	.word	0x08004971
 8004920:	08004971 	.word	0x08004971
 8004924:	0800495f 	.word	0x0800495f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0202 	orr.w	r2, r2, #2
 8004936:	60da      	str	r2, [r3, #12]
      break;
 8004938:	e01d      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0204 	orr.w	r2, r2, #4
 8004948:	60da      	str	r2, [r3, #12]
      break;
 800494a:	e014      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	60da      	str	r2, [r3, #12]
      break;
 800495c:	e00b      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0210 	orr.w	r2, r2, #16
 800496c:	60da      	str	r2, [r3, #12]
      break;
 800496e:	e002      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	bf00      	nop
  }

  if (status == HAL_OK)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d148      	bne.n	8004a0e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2201      	movs	r2, #1
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fc2f 	bl	80051e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <HAL_TIM_IC_Start_IT+0x234>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <HAL_TIM_IC_Start_IT+0x1f6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d01d      	beq.n	80049da <HAL_TIM_IC_Start_IT+0x1f6>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_TIM_IC_Start_IT+0x238>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_TIM_IC_Start_IT+0x1f6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_TIM_IC_Start_IT+0x23c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_TIM_IC_Start_IT+0x1f6>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_TIM_IC_Start_IT+0x240>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_TIM_IC_Start_IT+0x1f6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_TIM_IC_Start_IT+0x244>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIM_IC_Start_IT+0x1f6>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_TIM_IC_Start_IT+0x248>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIM_IC_Start_IT+0x1f6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <HAL_TIM_IC_Start_IT+0x24c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d111      	bne.n	80049fe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b06      	cmp	r3, #6
 80049ea:	d010      	beq.n	8004a0e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	e007      	b.n	8004a0e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40001800 	.word	0x40001800

08004a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0202 	mvn.w	r2, #2
 8004a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd faf4 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f9ca 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f9d1 	bl	8004e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d122      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0204 	mvn.w	r2, #4
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd faca 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9a0 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f9a7 	bl	8004e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d122      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0208 	mvn.w	r2, #8
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd faa0 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f976 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f97d 	bl	8004e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0210 	mvn.w	r2, #16
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2208      	movs	r2, #8
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fa76 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f94c 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f953 	bl	8004e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d10e      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0201 	mvn.w	r2, #1
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f926 	bl	8004e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d10e      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fbae 	bl	8005340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d10e      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d107      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f918 	bl	8004e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d10e      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d107      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0220 	mvn.w	r2, #32
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fb78 	bl	800532c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e088      	b.n	8004d74 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6819      	ldr	r1, [r3, #0]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f000 f988 	bl	8004f94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 020c 	bic.w	r2, r2, #12
 8004c92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	619a      	str	r2, [r3, #24]
 8004ca6:	e060      	b.n	8004d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d11c      	bne.n	8004ce8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6819      	ldr	r1, [r3, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f000 f9dd 	bl	800507c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6999      	ldr	r1, [r3, #24]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
 8004ce6:	e040      	b.n	8004d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d11b      	bne.n	8004d26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f000 f9fa 	bl	80050f6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 020c 	bic.w	r2, r2, #12
 8004d10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
 8004d24:	e021      	b.n	8004d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	d11c      	bne.n	8004d66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f000 fa17 	bl	800516e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69d9      	ldr	r1, [r3, #28]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	021a      	lsls	r2, r3, #8
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
 8004d64:	e001      	b.n	8004d6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d831      	bhi.n	8004df4 <HAL_TIM_ReadCapturedValue+0x78>
 8004d90:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004dcd 	.word	0x08004dcd
 8004d9c:	08004df5 	.word	0x08004df5
 8004da0:	08004df5 	.word	0x08004df5
 8004da4:	08004df5 	.word	0x08004df5
 8004da8:	08004dd7 	.word	0x08004dd7
 8004dac:	08004df5 	.word	0x08004df5
 8004db0:	08004df5 	.word	0x08004df5
 8004db4:	08004df5 	.word	0x08004df5
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004df5 	.word	0x08004df5
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004deb 	.word	0x08004deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	60fb      	str	r3, [r7, #12]

      break;
 8004dd4:	e00f      	b.n	8004df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	60fb      	str	r3, [r7, #12]

      break;
 8004dde:	e00a      	b.n	8004df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	60fb      	str	r3, [r7, #12]

      break;
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	60fb      	str	r3, [r7, #12]

      break;
 8004df2:	e000      	b.n	8004df6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004df4:	bf00      	nop
  }

  return tmpreg;
 8004df6:	68fb      	ldr	r3, [r7, #12]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <TIM_Base_SetConfig+0x114>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d00f      	beq.n	8004e94 <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3d      	ldr	r2, [pc, #244]	; (8004f6c <TIM_Base_SetConfig+0x118>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3c      	ldr	r2, [pc, #240]	; (8004f70 <TIM_Base_SetConfig+0x11c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3b      	ldr	r2, [pc, #236]	; (8004f74 <TIM_Base_SetConfig+0x120>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3a      	ldr	r2, [pc, #232]	; (8004f78 <TIM_Base_SetConfig+0x124>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2f      	ldr	r2, [pc, #188]	; (8004f68 <TIM_Base_SetConfig+0x114>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d02b      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d027      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2c      	ldr	r2, [pc, #176]	; (8004f6c <TIM_Base_SetConfig+0x118>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d023      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2b      	ldr	r2, [pc, #172]	; (8004f70 <TIM_Base_SetConfig+0x11c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01f      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2a      	ldr	r2, [pc, #168]	; (8004f74 <TIM_Base_SetConfig+0x120>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01b      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <TIM_Base_SetConfig+0x124>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d017      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a28      	ldr	r2, [pc, #160]	; (8004f7c <TIM_Base_SetConfig+0x128>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <TIM_Base_SetConfig+0x12c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00f      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <TIM_Base_SetConfig+0x130>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a25      	ldr	r2, [pc, #148]	; (8004f88 <TIM_Base_SetConfig+0x134>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a24      	ldr	r2, [pc, #144]	; (8004f8c <TIM_Base_SetConfig+0x138>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <TIM_Base_SetConfig+0x13c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d108      	bne.n	8004f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <TIM_Base_SetConfig+0x114>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0xf8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <TIM_Base_SetConfig+0x124>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d103      	bne.n	8004f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	615a      	str	r2, [r3, #20]
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40010400 	.word	0x40010400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800
 8004f88:	40001800 	.word	0x40001800
 8004f8c:	40001c00 	.word	0x40001c00
 8004f90:	40002000 	.word	0x40002000

08004f94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <TIM_TI1_SetConfig+0xcc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01b      	beq.n	8004ffa <TIM_TI1_SetConfig+0x66>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d017      	beq.n	8004ffa <TIM_TI1_SetConfig+0x66>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a25      	ldr	r2, [pc, #148]	; (8005064 <TIM_TI1_SetConfig+0xd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <TIM_TI1_SetConfig+0x66>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a24      	ldr	r2, [pc, #144]	; (8005068 <TIM_TI1_SetConfig+0xd4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00f      	beq.n	8004ffa <TIM_TI1_SetConfig+0x66>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a23      	ldr	r2, [pc, #140]	; (800506c <TIM_TI1_SetConfig+0xd8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_TI1_SetConfig+0x66>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a22      	ldr	r2, [pc, #136]	; (8005070 <TIM_TI1_SetConfig+0xdc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_TI1_SetConfig+0x66>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a21      	ldr	r2, [pc, #132]	; (8005074 <TIM_TI1_SetConfig+0xe0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_TI1_SetConfig+0x66>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a20      	ldr	r2, [pc, #128]	; (8005078 <TIM_TI1_SetConfig+0xe4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <TIM_TI1_SetConfig+0x6a>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <TIM_TI1_SetConfig+0x6c>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	e003      	b.n	800501e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	b2db      	uxtb	r3, r3
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f023 030a 	bic.w	r3, r3, #10
 8005038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f003 030a 	and.w	r3, r3, #10
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40010400 	.word	0x40010400
 8005074:	40014000 	.word	0x40014000
 8005078:	40001800 	.word	0x40001800

0800507c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0210 	bic.w	r2, r3, #16
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	031b      	lsls	r3, r3, #12
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b087      	sub	sp, #28
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005132:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	b2db      	uxtb	r3, r3
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005146:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800516e:	b480      	push	{r7}
 8005170:	b087      	sub	sp, #28
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	031b      	lsls	r3, r3, #12
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80051c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2201      	movs	r2, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	43db      	mvns	r3, r3
 800520a:	401a      	ands	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	431a      	orrs	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005248:	2302      	movs	r3, #2
 800524a:	e05a      	b.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005298:	d01d      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1a      	ldr	r2, [pc, #104]	; (800531c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a17      	ldr	r2, [pc, #92]	; (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a15      	ldr	r2, [pc, #84]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10c      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40010400 	.word	0x40010400
 8005324:	40014000 	.word	0x40014000
 8005328:	40001800 	.word	0x40001800

0800532c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e03f      	b.n	80053e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fd f8f8 	bl	8002570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f929 	bl	80055f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08a      	sub	sp, #40	; 0x28
 80053f2:	af02      	add	r7, sp, #8
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b20      	cmp	r3, #32
 800540c:	d17c      	bne.n	8005508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_UART_Transmit+0x2c>
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e075      	b.n	800550a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_UART_Transmit+0x3e>
 8005428:	2302      	movs	r3, #2
 800542a:	e06e      	b.n	800550a <HAL_UART_Transmit+0x11c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2221      	movs	r2, #33	; 0x21
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005442:	f7fd f96d 	bl	8002720 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88fa      	ldrh	r2, [r7, #6]
 8005452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d108      	bne.n	8005470 <HAL_UART_Transmit+0x82>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e003      	b.n	8005478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005480:	e02a      	b.n	80054d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2200      	movs	r2, #0
 800548a:	2180      	movs	r1, #128	; 0x80
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f840 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e036      	b.n	800550a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	3302      	adds	r3, #2
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	e007      	b.n	80054ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	781a      	ldrb	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3301      	adds	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1cf      	bne.n	8005482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2140      	movs	r1, #64	; 0x40
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f810 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e006      	b.n	800550a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b090      	sub	sp, #64	; 0x40
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005522:	e050      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d04c      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800552c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <UART_WaitOnFlagUntilTimeout+0x30>
 8005532:	f7fd f8f5 	bl	8002720 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553e:	429a      	cmp	r2, r3
 8005540:	d241      	bcs.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005562:	637a      	str	r2, [r7, #52]	; 0x34
 8005564:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	613b      	str	r3, [r7, #16]
   return(result);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	63bb      	str	r3, [r7, #56]	; 0x38
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005596:	623a      	str	r2, [r7, #32]
 8005598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	69f9      	ldr	r1, [r7, #28]
 800559c:	6a3a      	ldr	r2, [r7, #32]
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e00f      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	bf0c      	ite	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	2300      	movne	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d09f      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3740      	adds	r7, #64	; 0x40
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f4:	b0c0      	sub	sp, #256	; 0x100
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	68d9      	ldr	r1, [r3, #12]
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	ea40 0301 	orr.w	r3, r0, r1
 8005618:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	431a      	orrs	r2, r3
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005648:	f021 010c 	bic.w	r1, r1, #12
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005656:	430b      	orrs	r3, r1
 8005658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566a:	6999      	ldr	r1, [r3, #24]
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	ea40 0301 	orr.w	r3, r0, r1
 8005676:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b8f      	ldr	r3, [pc, #572]	; (80058bc <UART_SetConfig+0x2cc>)
 8005680:	429a      	cmp	r2, r3
 8005682:	d005      	beq.n	8005690 <UART_SetConfig+0xa0>
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b8d      	ldr	r3, [pc, #564]	; (80058c0 <UART_SetConfig+0x2d0>)
 800568c:	429a      	cmp	r2, r3
 800568e:	d104      	bne.n	800569a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005690:	f7fe fbfc 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8005694:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005698:	e003      	b.n	80056a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800569a:	f7fe fbe3 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 800569e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ac:	f040 810c 	bne.w	80058c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056c2:	4622      	mov	r2, r4
 80056c4:	462b      	mov	r3, r5
 80056c6:	1891      	adds	r1, r2, r2
 80056c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80056ca:	415b      	adcs	r3, r3
 80056cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056d2:	4621      	mov	r1, r4
 80056d4:	eb12 0801 	adds.w	r8, r2, r1
 80056d8:	4629      	mov	r1, r5
 80056da:	eb43 0901 	adc.w	r9, r3, r1
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056f2:	4690      	mov	r8, r2
 80056f4:	4699      	mov	r9, r3
 80056f6:	4623      	mov	r3, r4
 80056f8:	eb18 0303 	adds.w	r3, r8, r3
 80056fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005700:	462b      	mov	r3, r5
 8005702:	eb49 0303 	adc.w	r3, r9, r3
 8005706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005716:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800571a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800571e:	460b      	mov	r3, r1
 8005720:	18db      	adds	r3, r3, r3
 8005722:	653b      	str	r3, [r7, #80]	; 0x50
 8005724:	4613      	mov	r3, r2
 8005726:	eb42 0303 	adc.w	r3, r2, r3
 800572a:	657b      	str	r3, [r7, #84]	; 0x54
 800572c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005730:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005734:	f7fb fb18 	bl	8000d68 <__aeabi_uldivmod>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <UART_SetConfig+0x2d4>)
 800573e:	fba3 2302 	umull	r2, r3, r3, r2
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	011c      	lsls	r4, r3, #4
 8005746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800574a:	2200      	movs	r2, #0
 800574c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005750:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005754:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005758:	4642      	mov	r2, r8
 800575a:	464b      	mov	r3, r9
 800575c:	1891      	adds	r1, r2, r2
 800575e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005760:	415b      	adcs	r3, r3
 8005762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005764:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005768:	4641      	mov	r1, r8
 800576a:	eb12 0a01 	adds.w	sl, r2, r1
 800576e:	4649      	mov	r1, r9
 8005770:	eb43 0b01 	adc.w	fp, r3, r1
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005780:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005788:	4692      	mov	sl, r2
 800578a:	469b      	mov	fp, r3
 800578c:	4643      	mov	r3, r8
 800578e:	eb1a 0303 	adds.w	r3, sl, r3
 8005792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005796:	464b      	mov	r3, r9
 8005798:	eb4b 0303 	adc.w	r3, fp, r3
 800579c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057b4:	460b      	mov	r3, r1
 80057b6:	18db      	adds	r3, r3, r3
 80057b8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ba:	4613      	mov	r3, r2
 80057bc:	eb42 0303 	adc.w	r3, r2, r3
 80057c0:	647b      	str	r3, [r7, #68]	; 0x44
 80057c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057ca:	f7fb facd 	bl	8000d68 <__aeabi_uldivmod>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4611      	mov	r1, r2
 80057d4:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <UART_SetConfig+0x2d4>)
 80057d6:	fba3 2301 	umull	r2, r3, r3, r1
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2264      	movs	r2, #100	; 0x64
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	1acb      	subs	r3, r1, r3
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <UART_SetConfig+0x2d4>)
 80057ec:	fba3 2302 	umull	r2, r3, r3, r2
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f8:	441c      	add	r4, r3
 80057fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005804:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005808:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	1891      	adds	r1, r2, r2
 8005812:	63b9      	str	r1, [r7, #56]	; 0x38
 8005814:	415b      	adcs	r3, r3
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800581c:	4641      	mov	r1, r8
 800581e:	1851      	adds	r1, r2, r1
 8005820:	6339      	str	r1, [r7, #48]	; 0x30
 8005822:	4649      	mov	r1, r9
 8005824:	414b      	adcs	r3, r1
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005834:	4659      	mov	r1, fp
 8005836:	00cb      	lsls	r3, r1, #3
 8005838:	4651      	mov	r1, sl
 800583a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800583e:	4651      	mov	r1, sl
 8005840:	00ca      	lsls	r2, r1, #3
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	4603      	mov	r3, r0
 8005848:	4642      	mov	r2, r8
 800584a:	189b      	adds	r3, r3, r2
 800584c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005850:	464b      	mov	r3, r9
 8005852:	460a      	mov	r2, r1
 8005854:	eb42 0303 	adc.w	r3, r2, r3
 8005858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005868:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800586c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005870:	460b      	mov	r3, r1
 8005872:	18db      	adds	r3, r3, r3
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
 8005876:	4613      	mov	r3, r2
 8005878:	eb42 0303 	adc.w	r3, r2, r3
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005882:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005886:	f7fb fa6f 	bl	8000d68 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <UART_SetConfig+0x2d4>)
 8005890:	fba3 1302 	umull	r1, r3, r3, r2
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	2164      	movs	r1, #100	; 0x64
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	3332      	adds	r3, #50	; 0x32
 80058a2:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <UART_SetConfig+0x2d4>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	f003 0207 	and.w	r2, r3, #7
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4422      	add	r2, r4
 80058b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058b8:	e105      	b.n	8005ac6 <UART_SetConfig+0x4d6>
 80058ba:	bf00      	nop
 80058bc:	40011000 	.word	0x40011000
 80058c0:	40011400 	.word	0x40011400
 80058c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058da:	4642      	mov	r2, r8
 80058dc:	464b      	mov	r3, r9
 80058de:	1891      	adds	r1, r2, r2
 80058e0:	6239      	str	r1, [r7, #32]
 80058e2:	415b      	adcs	r3, r3
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
 80058e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ea:	4641      	mov	r1, r8
 80058ec:	1854      	adds	r4, r2, r1
 80058ee:	4649      	mov	r1, r9
 80058f0:	eb43 0501 	adc.w	r5, r3, r1
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	00eb      	lsls	r3, r5, #3
 80058fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005902:	00e2      	lsls	r2, r4, #3
 8005904:	4614      	mov	r4, r2
 8005906:	461d      	mov	r5, r3
 8005908:	4643      	mov	r3, r8
 800590a:	18e3      	adds	r3, r4, r3
 800590c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005910:	464b      	mov	r3, r9
 8005912:	eb45 0303 	adc.w	r3, r5, r3
 8005916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005936:	4629      	mov	r1, r5
 8005938:	008b      	lsls	r3, r1, #2
 800593a:	4621      	mov	r1, r4
 800593c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005940:	4621      	mov	r1, r4
 8005942:	008a      	lsls	r2, r1, #2
 8005944:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005948:	f7fb fa0e 	bl	8000d68 <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4b60      	ldr	r3, [pc, #384]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005952:	fba3 2302 	umull	r2, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	011c      	lsls	r4, r3, #4
 800595a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800595e:	2200      	movs	r2, #0
 8005960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005964:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005968:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	1891      	adds	r1, r2, r2
 8005972:	61b9      	str	r1, [r7, #24]
 8005974:	415b      	adcs	r3, r3
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800597c:	4641      	mov	r1, r8
 800597e:	1851      	adds	r1, r2, r1
 8005980:	6139      	str	r1, [r7, #16]
 8005982:	4649      	mov	r1, r9
 8005984:	414b      	adcs	r3, r1
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005994:	4659      	mov	r1, fp
 8005996:	00cb      	lsls	r3, r1, #3
 8005998:	4651      	mov	r1, sl
 800599a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800599e:	4651      	mov	r1, sl
 80059a0:	00ca      	lsls	r2, r1, #3
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	4642      	mov	r2, r8
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059b0:	464b      	mov	r3, r9
 80059b2:	460a      	mov	r2, r1
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059d4:	4649      	mov	r1, r9
 80059d6:	008b      	lsls	r3, r1, #2
 80059d8:	4641      	mov	r1, r8
 80059da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059de:	4641      	mov	r1, r8
 80059e0:	008a      	lsls	r2, r1, #2
 80059e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059e6:	f7fb f9bf 	bl	8000d68 <__aeabi_uldivmod>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <UART_SetConfig+0x4e4>)
 80059f0:	fba3 1302 	umull	r1, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	2164      	movs	r1, #100	; 0x64
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	3332      	adds	r3, #50	; 0x32
 8005a02:	4a34      	ldr	r2, [pc, #208]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0e:	441c      	add	r4, r3
 8005a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a14:	2200      	movs	r2, #0
 8005a16:	673b      	str	r3, [r7, #112]	; 0x70
 8005a18:	677a      	str	r2, [r7, #116]	; 0x74
 8005a1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	1891      	adds	r1, r2, r2
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	415b      	adcs	r3, r3
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a2e:	4641      	mov	r1, r8
 8005a30:	1851      	adds	r1, r2, r1
 8005a32:	6039      	str	r1, [r7, #0]
 8005a34:	4649      	mov	r1, r9
 8005a36:	414b      	adcs	r3, r1
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a46:	4659      	mov	r1, fp
 8005a48:	00cb      	lsls	r3, r1, #3
 8005a4a:	4651      	mov	r1, sl
 8005a4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a50:	4651      	mov	r1, sl
 8005a52:	00ca      	lsls	r2, r1, #3
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	189b      	adds	r3, r3, r2
 8005a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a60:	464b      	mov	r3, r9
 8005a62:	460a      	mov	r2, r1
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	663b      	str	r3, [r7, #96]	; 0x60
 8005a74:	667a      	str	r2, [r7, #100]	; 0x64
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a82:	4649      	mov	r1, r9
 8005a84:	008b      	lsls	r3, r1, #2
 8005a86:	4641      	mov	r1, r8
 8005a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	008a      	lsls	r2, r1, #2
 8005a90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a94:	f7fb f968 	bl	8000d68 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2164      	movs	r1, #100	; 0x64
 8005aa6:	fb01 f303 	mul.w	r3, r1, r3
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	3332      	adds	r3, #50	; 0x32
 8005ab0:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	f003 020f 	and.w	r2, r3, #15
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4422      	add	r2, r4
 8005ac4:	609a      	str	r2, [r3, #8]
}
 8005ac6:	bf00      	nop
 8005ac8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	51eb851f 	.word	0x51eb851f

08005ad8 <__errno>:
 8005ad8:	4b01      	ldr	r3, [pc, #4]	; (8005ae0 <__errno+0x8>)
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	2000000c 	.word	0x2000000c

08005ae4 <__libc_init_array>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4d0d      	ldr	r5, [pc, #52]	; (8005b1c <__libc_init_array+0x38>)
 8005ae8:	4c0d      	ldr	r4, [pc, #52]	; (8005b20 <__libc_init_array+0x3c>)
 8005aea:	1b64      	subs	r4, r4, r5
 8005aec:	10a4      	asrs	r4, r4, #2
 8005aee:	2600      	movs	r6, #0
 8005af0:	42a6      	cmp	r6, r4
 8005af2:	d109      	bne.n	8005b08 <__libc_init_array+0x24>
 8005af4:	4d0b      	ldr	r5, [pc, #44]	; (8005b24 <__libc_init_array+0x40>)
 8005af6:	4c0c      	ldr	r4, [pc, #48]	; (8005b28 <__libc_init_array+0x44>)
 8005af8:	f004 fcaa 	bl	800a450 <_init>
 8005afc:	1b64      	subs	r4, r4, r5
 8005afe:	10a4      	asrs	r4, r4, #2
 8005b00:	2600      	movs	r6, #0
 8005b02:	42a6      	cmp	r6, r4
 8005b04:	d105      	bne.n	8005b12 <__libc_init_array+0x2e>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0c:	4798      	blx	r3
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7ee      	b.n	8005af0 <__libc_init_array+0xc>
 8005b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b16:	4798      	blx	r3
 8005b18:	3601      	adds	r6, #1
 8005b1a:	e7f2      	b.n	8005b02 <__libc_init_array+0x1e>
 8005b1c:	0800a944 	.word	0x0800a944
 8005b20:	0800a944 	.word	0x0800a944
 8005b24:	0800a944 	.word	0x0800a944
 8005b28:	0800a948 	.word	0x0800a948

08005b2c <memset>:
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d100      	bne.n	8005b36 <memset+0xa>
 8005b34:	4770      	bx	lr
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	e7f9      	b.n	8005b30 <memset+0x4>

08005b3c <__cvt>:
 8005b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	ec55 4b10 	vmov	r4, r5, d0
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	460e      	mov	r6, r1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	462b      	mov	r3, r5
 8005b4c:	bfbb      	ittet	lt
 8005b4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b52:	461d      	movlt	r5, r3
 8005b54:	2300      	movge	r3, #0
 8005b56:	232d      	movlt	r3, #45	; 0x2d
 8005b58:	700b      	strb	r3, [r1, #0]
 8005b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b60:	4691      	mov	r9, r2
 8005b62:	f023 0820 	bic.w	r8, r3, #32
 8005b66:	bfbc      	itt	lt
 8005b68:	4622      	movlt	r2, r4
 8005b6a:	4614      	movlt	r4, r2
 8005b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b70:	d005      	beq.n	8005b7e <__cvt+0x42>
 8005b72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b76:	d100      	bne.n	8005b7a <__cvt+0x3e>
 8005b78:	3601      	adds	r6, #1
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	e000      	b.n	8005b80 <__cvt+0x44>
 8005b7e:	2103      	movs	r1, #3
 8005b80:	ab03      	add	r3, sp, #12
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	ab02      	add	r3, sp, #8
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	ec45 4b10 	vmov	d0, r4, r5
 8005b8c:	4653      	mov	r3, sl
 8005b8e:	4632      	mov	r2, r6
 8005b90:	f001 fdc6 	bl	8007720 <_dtoa_r>
 8005b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b98:	4607      	mov	r7, r0
 8005b9a:	d102      	bne.n	8005ba2 <__cvt+0x66>
 8005b9c:	f019 0f01 	tst.w	r9, #1
 8005ba0:	d022      	beq.n	8005be8 <__cvt+0xac>
 8005ba2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ba6:	eb07 0906 	add.w	r9, r7, r6
 8005baa:	d110      	bne.n	8005bce <__cvt+0x92>
 8005bac:	783b      	ldrb	r3, [r7, #0]
 8005bae:	2b30      	cmp	r3, #48	; 0x30
 8005bb0:	d10a      	bne.n	8005bc8 <__cvt+0x8c>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f7fa ffa5 	bl	8000b08 <__aeabi_dcmpeq>
 8005bbe:	b918      	cbnz	r0, 8005bc8 <__cvt+0x8c>
 8005bc0:	f1c6 0601 	rsb	r6, r6, #1
 8005bc4:	f8ca 6000 	str.w	r6, [sl]
 8005bc8:	f8da 3000 	ldr.w	r3, [sl]
 8005bcc:	4499      	add	r9, r3
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7fa ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8005bda:	b108      	cbz	r0, 8005be0 <__cvt+0xa4>
 8005bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005be0:	2230      	movs	r2, #48	; 0x30
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	454b      	cmp	r3, r9
 8005be6:	d307      	bcc.n	8005bf8 <__cvt+0xbc>
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bec:	1bdb      	subs	r3, r3, r7
 8005bee:	4638      	mov	r0, r7
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	b004      	add	sp, #16
 8005bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf8:	1c59      	adds	r1, r3, #1
 8005bfa:	9103      	str	r1, [sp, #12]
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e7f0      	b.n	8005be2 <__cvt+0xa6>

08005c00 <__exponent>:
 8005c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c02:	4603      	mov	r3, r0
 8005c04:	2900      	cmp	r1, #0
 8005c06:	bfb8      	it	lt
 8005c08:	4249      	neglt	r1, r1
 8005c0a:	f803 2b02 	strb.w	r2, [r3], #2
 8005c0e:	bfb4      	ite	lt
 8005c10:	222d      	movlt	r2, #45	; 0x2d
 8005c12:	222b      	movge	r2, #43	; 0x2b
 8005c14:	2909      	cmp	r1, #9
 8005c16:	7042      	strb	r2, [r0, #1]
 8005c18:	dd2a      	ble.n	8005c70 <__exponent+0x70>
 8005c1a:	f10d 0407 	add.w	r4, sp, #7
 8005c1e:	46a4      	mov	ip, r4
 8005c20:	270a      	movs	r7, #10
 8005c22:	46a6      	mov	lr, r4
 8005c24:	460a      	mov	r2, r1
 8005c26:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c2a:	fb07 1516 	mls	r5, r7, r6, r1
 8005c2e:	3530      	adds	r5, #48	; 0x30
 8005c30:	2a63      	cmp	r2, #99	; 0x63
 8005c32:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	dcf1      	bgt.n	8005c22 <__exponent+0x22>
 8005c3e:	3130      	adds	r1, #48	; 0x30
 8005c40:	f1ae 0502 	sub.w	r5, lr, #2
 8005c44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c48:	1c44      	adds	r4, r0, #1
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4561      	cmp	r1, ip
 8005c4e:	d30a      	bcc.n	8005c66 <__exponent+0x66>
 8005c50:	f10d 0209 	add.w	r2, sp, #9
 8005c54:	eba2 020e 	sub.w	r2, r2, lr
 8005c58:	4565      	cmp	r5, ip
 8005c5a:	bf88      	it	hi
 8005c5c:	2200      	movhi	r2, #0
 8005c5e:	4413      	add	r3, r2
 8005c60:	1a18      	subs	r0, r3, r0
 8005c62:	b003      	add	sp, #12
 8005c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c6e:	e7ed      	b.n	8005c4c <__exponent+0x4c>
 8005c70:	2330      	movs	r3, #48	; 0x30
 8005c72:	3130      	adds	r1, #48	; 0x30
 8005c74:	7083      	strb	r3, [r0, #2]
 8005c76:	70c1      	strb	r1, [r0, #3]
 8005c78:	1d03      	adds	r3, r0, #4
 8005c7a:	e7f1      	b.n	8005c60 <__exponent+0x60>

08005c7c <_printf_float>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	ed2d 8b02 	vpush	{d8}
 8005c84:	b08d      	sub	sp, #52	; 0x34
 8005c86:	460c      	mov	r4, r1
 8005c88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	461f      	mov	r7, r3
 8005c90:	4605      	mov	r5, r0
 8005c92:	f002 ff97 	bl	8008bc4 <_localeconv_r>
 8005c96:	f8d0 a000 	ldr.w	sl, [r0]
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	f7fa fab8 	bl	8000210 <strlen>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	9305      	str	r3, [sp, #20]
 8005ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005cb0:	3307      	adds	r3, #7
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	f103 0208 	add.w	r2, r3, #8
 8005cba:	f8c8 2000 	str.w	r2, [r8]
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cd4:	ee08 0a10 	vmov	s16, r0
 8005cd8:	4b9f      	ldr	r3, [pc, #636]	; (8005f58 <_printf_float+0x2dc>)
 8005cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	f7fa ff43 	bl	8000b6c <__aeabi_dcmpun>
 8005ce6:	bb88      	cbnz	r0, 8005d4c <_printf_float+0xd0>
 8005ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cec:	4b9a      	ldr	r3, [pc, #616]	; (8005f58 <_printf_float+0x2dc>)
 8005cee:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf2:	f7fa ff1d 	bl	8000b30 <__aeabi_dcmple>
 8005cf6:	bb48      	cbnz	r0, 8005d4c <_printf_float+0xd0>
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	4649      	mov	r1, r9
 8005d00:	f7fa ff0c 	bl	8000b1c <__aeabi_dcmplt>
 8005d04:	b110      	cbz	r0, 8005d0c <_printf_float+0x90>
 8005d06:	232d      	movs	r3, #45	; 0x2d
 8005d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0c:	4b93      	ldr	r3, [pc, #588]	; (8005f5c <_printf_float+0x2e0>)
 8005d0e:	4894      	ldr	r0, [pc, #592]	; (8005f60 <_printf_float+0x2e4>)
 8005d10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d14:	bf94      	ite	ls
 8005d16:	4698      	movls	r8, r3
 8005d18:	4680      	movhi	r8, r0
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	9b05      	ldr	r3, [sp, #20]
 8005d20:	f023 0204 	bic.w	r2, r3, #4
 8005d24:	6022      	str	r2, [r4, #0]
 8005d26:	f04f 0900 	mov.w	r9, #0
 8005d2a:	9700      	str	r7, [sp, #0]
 8005d2c:	4633      	mov	r3, r6
 8005d2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d30:	4621      	mov	r1, r4
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 f9d8 	bl	80060e8 <_printf_common>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	f040 8090 	bne.w	8005e5e <_printf_float+0x1e2>
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	b00d      	add	sp, #52	; 0x34
 8005d44:	ecbd 8b02 	vpop	{d8}
 8005d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	464b      	mov	r3, r9
 8005d50:	4640      	mov	r0, r8
 8005d52:	4649      	mov	r1, r9
 8005d54:	f7fa ff0a 	bl	8000b6c <__aeabi_dcmpun>
 8005d58:	b140      	cbz	r0, 8005d6c <_printf_float+0xf0>
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bfbc      	itt	lt
 8005d60:	232d      	movlt	r3, #45	; 0x2d
 8005d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d66:	487f      	ldr	r0, [pc, #508]	; (8005f64 <_printf_float+0x2e8>)
 8005d68:	4b7f      	ldr	r3, [pc, #508]	; (8005f68 <_printf_float+0x2ec>)
 8005d6a:	e7d1      	b.n	8005d10 <_printf_float+0x94>
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d72:	9206      	str	r2, [sp, #24]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	d13f      	bne.n	8005df8 <_printf_float+0x17c>
 8005d78:	2306      	movs	r3, #6
 8005d7a:	6063      	str	r3, [r4, #4]
 8005d7c:	9b05      	ldr	r3, [sp, #20]
 8005d7e:	6861      	ldr	r1, [r4, #4]
 8005d80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d84:	2300      	movs	r3, #0
 8005d86:	9303      	str	r3, [sp, #12]
 8005d88:	ab0a      	add	r3, sp, #40	; 0x28
 8005d8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d8e:	ab09      	add	r3, sp, #36	; 0x24
 8005d90:	ec49 8b10 	vmov	d0, r8, r9
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	6022      	str	r2, [r4, #0]
 8005d98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f7ff fecd 	bl	8005b3c <__cvt>
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005da6:	2b47      	cmp	r3, #71	; 0x47
 8005da8:	4680      	mov	r8, r0
 8005daa:	d108      	bne.n	8005dbe <_printf_float+0x142>
 8005dac:	1cc8      	adds	r0, r1, #3
 8005dae:	db02      	blt.n	8005db6 <_printf_float+0x13a>
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	4299      	cmp	r1, r3
 8005db4:	dd41      	ble.n	8005e3a <_printf_float+0x1be>
 8005db6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005dba:	fa5f fb8b 	uxtb.w	fp, fp
 8005dbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dc2:	d820      	bhi.n	8005e06 <_printf_float+0x18a>
 8005dc4:	3901      	subs	r1, #1
 8005dc6:	465a      	mov	r2, fp
 8005dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8005dce:	f7ff ff17 	bl	8005c00 <__exponent>
 8005dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd4:	1813      	adds	r3, r2, r0
 8005dd6:	2a01      	cmp	r2, #1
 8005dd8:	4681      	mov	r9, r0
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	dc02      	bgt.n	8005de4 <_printf_float+0x168>
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	07d2      	lsls	r2, r2, #31
 8005de2:	d501      	bpl.n	8005de8 <_printf_float+0x16c>
 8005de4:	3301      	adds	r3, #1
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d09c      	beq.n	8005d2a <_printf_float+0xae>
 8005df0:	232d      	movs	r3, #45	; 0x2d
 8005df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df6:	e798      	b.n	8005d2a <_printf_float+0xae>
 8005df8:	9a06      	ldr	r2, [sp, #24]
 8005dfa:	2a47      	cmp	r2, #71	; 0x47
 8005dfc:	d1be      	bne.n	8005d7c <_printf_float+0x100>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1bc      	bne.n	8005d7c <_printf_float+0x100>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e7b9      	b.n	8005d7a <_printf_float+0xfe>
 8005e06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e0a:	d118      	bne.n	8005e3e <_printf_float+0x1c2>
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	6863      	ldr	r3, [r4, #4]
 8005e10:	dd0b      	ble.n	8005e2a <_printf_float+0x1ae>
 8005e12:	6121      	str	r1, [r4, #16]
 8005e14:	b913      	cbnz	r3, 8005e1c <_printf_float+0x1a0>
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	07d0      	lsls	r0, r2, #31
 8005e1a:	d502      	bpl.n	8005e22 <_printf_float+0x1a6>
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	440b      	add	r3, r1
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e24:	f04f 0900 	mov.w	r9, #0
 8005e28:	e7de      	b.n	8005de8 <_printf_float+0x16c>
 8005e2a:	b913      	cbnz	r3, 8005e32 <_printf_float+0x1b6>
 8005e2c:	6822      	ldr	r2, [r4, #0]
 8005e2e:	07d2      	lsls	r2, r2, #31
 8005e30:	d501      	bpl.n	8005e36 <_printf_float+0x1ba>
 8005e32:	3302      	adds	r3, #2
 8005e34:	e7f4      	b.n	8005e20 <_printf_float+0x1a4>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e7f2      	b.n	8005e20 <_printf_float+0x1a4>
 8005e3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e40:	4299      	cmp	r1, r3
 8005e42:	db05      	blt.n	8005e50 <_printf_float+0x1d4>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	6121      	str	r1, [r4, #16]
 8005e48:	07d8      	lsls	r0, r3, #31
 8005e4a:	d5ea      	bpl.n	8005e22 <_printf_float+0x1a6>
 8005e4c:	1c4b      	adds	r3, r1, #1
 8005e4e:	e7e7      	b.n	8005e20 <_printf_float+0x1a4>
 8005e50:	2900      	cmp	r1, #0
 8005e52:	bfd4      	ite	le
 8005e54:	f1c1 0202 	rsble	r2, r1, #2
 8005e58:	2201      	movgt	r2, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	e7e0      	b.n	8005e20 <_printf_float+0x1a4>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	055a      	lsls	r2, r3, #21
 8005e62:	d407      	bmi.n	8005e74 <_printf_float+0x1f8>
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	4642      	mov	r2, r8
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d12c      	bne.n	8005ecc <_printf_float+0x250>
 8005e72:	e764      	b.n	8005d3e <_printf_float+0xc2>
 8005e74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e78:	f240 80e0 	bls.w	800603c <_printf_float+0x3c0>
 8005e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e80:	2200      	movs	r2, #0
 8005e82:	2300      	movs	r3, #0
 8005e84:	f7fa fe40 	bl	8000b08 <__aeabi_dcmpeq>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d034      	beq.n	8005ef6 <_printf_float+0x27a>
 8005e8c:	4a37      	ldr	r2, [pc, #220]	; (8005f6c <_printf_float+0x2f0>)
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	f43f af51 	beq.w	8005d3e <_printf_float+0xc2>
 8005e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	db02      	blt.n	8005eaa <_printf_float+0x22e>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	07d8      	lsls	r0, r3, #31
 8005ea8:	d510      	bpl.n	8005ecc <_printf_float+0x250>
 8005eaa:	ee18 3a10 	vmov	r3, s16
 8005eae:	4652      	mov	r2, sl
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f af41 	beq.w	8005d3e <_printf_float+0xc2>
 8005ebc:	f04f 0800 	mov.w	r8, #0
 8005ec0:	f104 091a 	add.w	r9, r4, #26
 8005ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	4543      	cmp	r3, r8
 8005eca:	dc09      	bgt.n	8005ee0 <_printf_float+0x264>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	079b      	lsls	r3, r3, #30
 8005ed0:	f100 8105 	bmi.w	80060de <_printf_float+0x462>
 8005ed4:	68e0      	ldr	r0, [r4, #12]
 8005ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed8:	4298      	cmp	r0, r3
 8005eda:	bfb8      	it	lt
 8005edc:	4618      	movlt	r0, r3
 8005ede:	e730      	b.n	8005d42 <_printf_float+0xc6>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	464a      	mov	r2, r9
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	f43f af27 	beq.w	8005d3e <_printf_float+0xc2>
 8005ef0:	f108 0801 	add.w	r8, r8, #1
 8005ef4:	e7e6      	b.n	8005ec4 <_printf_float+0x248>
 8005ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc39      	bgt.n	8005f70 <_printf_float+0x2f4>
 8005efc:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <_printf_float+0x2f0>)
 8005efe:	2301      	movs	r3, #1
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	f43f af19 	beq.w	8005d3e <_printf_float+0xc2>
 8005f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f10:	4313      	orrs	r3, r2
 8005f12:	d102      	bne.n	8005f1a <_printf_float+0x29e>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	07d9      	lsls	r1, r3, #31
 8005f18:	d5d8      	bpl.n	8005ecc <_printf_float+0x250>
 8005f1a:	ee18 3a10 	vmov	r3, s16
 8005f1e:	4652      	mov	r2, sl
 8005f20:	4631      	mov	r1, r6
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b8      	blx	r7
 8005f26:	3001      	adds	r0, #1
 8005f28:	f43f af09 	beq.w	8005d3e <_printf_float+0xc2>
 8005f2c:	f04f 0900 	mov.w	r9, #0
 8005f30:	f104 0a1a 	add.w	sl, r4, #26
 8005f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f36:	425b      	negs	r3, r3
 8005f38:	454b      	cmp	r3, r9
 8005f3a:	dc01      	bgt.n	8005f40 <_printf_float+0x2c4>
 8005f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3e:	e792      	b.n	8005e66 <_printf_float+0x1ea>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4652      	mov	r2, sl
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f aef7 	beq.w	8005d3e <_printf_float+0xc2>
 8005f50:	f109 0901 	add.w	r9, r9, #1
 8005f54:	e7ee      	b.n	8005f34 <_printf_float+0x2b8>
 8005f56:	bf00      	nop
 8005f58:	7fefffff 	.word	0x7fefffff
 8005f5c:	0800a490 	.word	0x0800a490
 8005f60:	0800a494 	.word	0x0800a494
 8005f64:	0800a49c 	.word	0x0800a49c
 8005f68:	0800a498 	.word	0x0800a498
 8005f6c:	0800a4a0 	.word	0x0800a4a0
 8005f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f74:	429a      	cmp	r2, r3
 8005f76:	bfa8      	it	ge
 8005f78:	461a      	movge	r2, r3
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	4691      	mov	r9, r2
 8005f7e:	dc37      	bgt.n	8005ff0 <_printf_float+0x374>
 8005f80:	f04f 0b00 	mov.w	fp, #0
 8005f84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f88:	f104 021a 	add.w	r2, r4, #26
 8005f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f8e:	9305      	str	r3, [sp, #20]
 8005f90:	eba3 0309 	sub.w	r3, r3, r9
 8005f94:	455b      	cmp	r3, fp
 8005f96:	dc33      	bgt.n	8006000 <_printf_float+0x384>
 8005f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	db3b      	blt.n	8006018 <_printf_float+0x39c>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	07da      	lsls	r2, r3, #31
 8005fa4:	d438      	bmi.n	8006018 <_printf_float+0x39c>
 8005fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa8:	9a05      	ldr	r2, [sp, #20]
 8005faa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fac:	1a9a      	subs	r2, r3, r2
 8005fae:	eba3 0901 	sub.w	r9, r3, r1
 8005fb2:	4591      	cmp	r9, r2
 8005fb4:	bfa8      	it	ge
 8005fb6:	4691      	movge	r9, r2
 8005fb8:	f1b9 0f00 	cmp.w	r9, #0
 8005fbc:	dc35      	bgt.n	800602a <_printf_float+0x3ae>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fc6:	f104 0a1a 	add.w	sl, r4, #26
 8005fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	eba3 0309 	sub.w	r3, r3, r9
 8005fd4:	4543      	cmp	r3, r8
 8005fd6:	f77f af79 	ble.w	8005ecc <_printf_float+0x250>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4652      	mov	r2, sl
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f43f aeaa 	beq.w	8005d3e <_printf_float+0xc2>
 8005fea:	f108 0801 	add.w	r8, r8, #1
 8005fee:	e7ec      	b.n	8005fca <_printf_float+0x34e>
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d1c0      	bne.n	8005f80 <_printf_float+0x304>
 8005ffe:	e69e      	b.n	8005d3e <_printf_float+0xc2>
 8006000:	2301      	movs	r3, #1
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	9205      	str	r2, [sp, #20]
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	f43f ae97 	beq.w	8005d3e <_printf_float+0xc2>
 8006010:	9a05      	ldr	r2, [sp, #20]
 8006012:	f10b 0b01 	add.w	fp, fp, #1
 8006016:	e7b9      	b.n	8005f8c <_printf_float+0x310>
 8006018:	ee18 3a10 	vmov	r3, s16
 800601c:	4652      	mov	r2, sl
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	d1be      	bne.n	8005fa6 <_printf_float+0x32a>
 8006028:	e689      	b.n	8005d3e <_printf_float+0xc2>
 800602a:	9a05      	ldr	r2, [sp, #20]
 800602c:	464b      	mov	r3, r9
 800602e:	4442      	add	r2, r8
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	d1c1      	bne.n	8005fbe <_printf_float+0x342>
 800603a:	e680      	b.n	8005d3e <_printf_float+0xc2>
 800603c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603e:	2a01      	cmp	r2, #1
 8006040:	dc01      	bgt.n	8006046 <_printf_float+0x3ca>
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	d538      	bpl.n	80060b8 <_printf_float+0x43c>
 8006046:	2301      	movs	r3, #1
 8006048:	4642      	mov	r2, r8
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f ae74 	beq.w	8005d3e <_printf_float+0xc2>
 8006056:	ee18 3a10 	vmov	r3, s16
 800605a:	4652      	mov	r2, sl
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f ae6b 	beq.w	8005d3e <_printf_float+0xc2>
 8006068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800606c:	2200      	movs	r2, #0
 800606e:	2300      	movs	r3, #0
 8006070:	f7fa fd4a 	bl	8000b08 <__aeabi_dcmpeq>
 8006074:	b9d8      	cbnz	r0, 80060ae <_printf_float+0x432>
 8006076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006078:	f108 0201 	add.w	r2, r8, #1
 800607c:	3b01      	subs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	d10e      	bne.n	80060a6 <_printf_float+0x42a>
 8006088:	e659      	b.n	8005d3e <_printf_float+0xc2>
 800608a:	2301      	movs	r3, #1
 800608c:	4652      	mov	r2, sl
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	f43f ae52 	beq.w	8005d3e <_printf_float+0xc2>
 800609a:	f108 0801 	add.w	r8, r8, #1
 800609e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	4543      	cmp	r3, r8
 80060a4:	dcf1      	bgt.n	800608a <_printf_float+0x40e>
 80060a6:	464b      	mov	r3, r9
 80060a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060ac:	e6dc      	b.n	8005e68 <_printf_float+0x1ec>
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	f104 0a1a 	add.w	sl, r4, #26
 80060b6:	e7f2      	b.n	800609e <_printf_float+0x422>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4642      	mov	r2, r8
 80060bc:	e7df      	b.n	800607e <_printf_float+0x402>
 80060be:	2301      	movs	r3, #1
 80060c0:	464a      	mov	r2, r9
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f ae38 	beq.w	8005d3e <_printf_float+0xc2>
 80060ce:	f108 0801 	add.w	r8, r8, #1
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060d6:	1a5b      	subs	r3, r3, r1
 80060d8:	4543      	cmp	r3, r8
 80060da:	dcf0      	bgt.n	80060be <_printf_float+0x442>
 80060dc:	e6fa      	b.n	8005ed4 <_printf_float+0x258>
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	f104 0919 	add.w	r9, r4, #25
 80060e6:	e7f4      	b.n	80060d2 <_printf_float+0x456>

080060e8 <_printf_common>:
 80060e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ec:	4616      	mov	r6, r2
 80060ee:	4699      	mov	r9, r3
 80060f0:	688a      	ldr	r2, [r1, #8]
 80060f2:	690b      	ldr	r3, [r1, #16]
 80060f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	bfb8      	it	lt
 80060fc:	4613      	movlt	r3, r2
 80060fe:	6033      	str	r3, [r6, #0]
 8006100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006104:	4607      	mov	r7, r0
 8006106:	460c      	mov	r4, r1
 8006108:	b10a      	cbz	r2, 800610e <_printf_common+0x26>
 800610a:	3301      	adds	r3, #1
 800610c:	6033      	str	r3, [r6, #0]
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	0699      	lsls	r1, r3, #26
 8006112:	bf42      	ittt	mi
 8006114:	6833      	ldrmi	r3, [r6, #0]
 8006116:	3302      	addmi	r3, #2
 8006118:	6033      	strmi	r3, [r6, #0]
 800611a:	6825      	ldr	r5, [r4, #0]
 800611c:	f015 0506 	ands.w	r5, r5, #6
 8006120:	d106      	bne.n	8006130 <_printf_common+0x48>
 8006122:	f104 0a19 	add.w	sl, r4, #25
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	6832      	ldr	r2, [r6, #0]
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	42ab      	cmp	r3, r5
 800612e:	dc26      	bgt.n	800617e <_printf_common+0x96>
 8006130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006134:	1e13      	subs	r3, r2, #0
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	bf18      	it	ne
 800613a:	2301      	movne	r3, #1
 800613c:	0692      	lsls	r2, r2, #26
 800613e:	d42b      	bmi.n	8006198 <_printf_common+0xb0>
 8006140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006144:	4649      	mov	r1, r9
 8006146:	4638      	mov	r0, r7
 8006148:	47c0      	blx	r8
 800614a:	3001      	adds	r0, #1
 800614c:	d01e      	beq.n	800618c <_printf_common+0xa4>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	68e5      	ldr	r5, [r4, #12]
 8006152:	6832      	ldr	r2, [r6, #0]
 8006154:	f003 0306 	and.w	r3, r3, #6
 8006158:	2b04      	cmp	r3, #4
 800615a:	bf08      	it	eq
 800615c:	1aad      	subeq	r5, r5, r2
 800615e:	68a3      	ldr	r3, [r4, #8]
 8006160:	6922      	ldr	r2, [r4, #16]
 8006162:	bf0c      	ite	eq
 8006164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006168:	2500      	movne	r5, #0
 800616a:	4293      	cmp	r3, r2
 800616c:	bfc4      	itt	gt
 800616e:	1a9b      	subgt	r3, r3, r2
 8006170:	18ed      	addgt	r5, r5, r3
 8006172:	2600      	movs	r6, #0
 8006174:	341a      	adds	r4, #26
 8006176:	42b5      	cmp	r5, r6
 8006178:	d11a      	bne.n	80061b0 <_printf_common+0xc8>
 800617a:	2000      	movs	r0, #0
 800617c:	e008      	b.n	8006190 <_printf_common+0xa8>
 800617e:	2301      	movs	r3, #1
 8006180:	4652      	mov	r2, sl
 8006182:	4649      	mov	r1, r9
 8006184:	4638      	mov	r0, r7
 8006186:	47c0      	blx	r8
 8006188:	3001      	adds	r0, #1
 800618a:	d103      	bne.n	8006194 <_printf_common+0xac>
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	3501      	adds	r5, #1
 8006196:	e7c6      	b.n	8006126 <_printf_common+0x3e>
 8006198:	18e1      	adds	r1, r4, r3
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	2030      	movs	r0, #48	; 0x30
 800619e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061a2:	4422      	add	r2, r4
 80061a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ac:	3302      	adds	r3, #2
 80061ae:	e7c7      	b.n	8006140 <_printf_common+0x58>
 80061b0:	2301      	movs	r3, #1
 80061b2:	4622      	mov	r2, r4
 80061b4:	4649      	mov	r1, r9
 80061b6:	4638      	mov	r0, r7
 80061b8:	47c0      	blx	r8
 80061ba:	3001      	adds	r0, #1
 80061bc:	d0e6      	beq.n	800618c <_printf_common+0xa4>
 80061be:	3601      	adds	r6, #1
 80061c0:	e7d9      	b.n	8006176 <_printf_common+0x8e>
	...

080061c4 <_printf_i>:
 80061c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	7e0f      	ldrb	r7, [r1, #24]
 80061ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061cc:	2f78      	cmp	r7, #120	; 0x78
 80061ce:	4691      	mov	r9, r2
 80061d0:	4680      	mov	r8, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	469a      	mov	sl, r3
 80061d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061da:	d807      	bhi.n	80061ec <_printf_i+0x28>
 80061dc:	2f62      	cmp	r7, #98	; 0x62
 80061de:	d80a      	bhi.n	80061f6 <_printf_i+0x32>
 80061e0:	2f00      	cmp	r7, #0
 80061e2:	f000 80d8 	beq.w	8006396 <_printf_i+0x1d2>
 80061e6:	2f58      	cmp	r7, #88	; 0x58
 80061e8:	f000 80a3 	beq.w	8006332 <_printf_i+0x16e>
 80061ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061f4:	e03a      	b.n	800626c <_printf_i+0xa8>
 80061f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061fa:	2b15      	cmp	r3, #21
 80061fc:	d8f6      	bhi.n	80061ec <_printf_i+0x28>
 80061fe:	a101      	add	r1, pc, #4	; (adr r1, 8006204 <_printf_i+0x40>)
 8006200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006204:	0800625d 	.word	0x0800625d
 8006208:	08006271 	.word	0x08006271
 800620c:	080061ed 	.word	0x080061ed
 8006210:	080061ed 	.word	0x080061ed
 8006214:	080061ed 	.word	0x080061ed
 8006218:	080061ed 	.word	0x080061ed
 800621c:	08006271 	.word	0x08006271
 8006220:	080061ed 	.word	0x080061ed
 8006224:	080061ed 	.word	0x080061ed
 8006228:	080061ed 	.word	0x080061ed
 800622c:	080061ed 	.word	0x080061ed
 8006230:	0800637d 	.word	0x0800637d
 8006234:	080062a1 	.word	0x080062a1
 8006238:	0800635f 	.word	0x0800635f
 800623c:	080061ed 	.word	0x080061ed
 8006240:	080061ed 	.word	0x080061ed
 8006244:	0800639f 	.word	0x0800639f
 8006248:	080061ed 	.word	0x080061ed
 800624c:	080062a1 	.word	0x080062a1
 8006250:	080061ed 	.word	0x080061ed
 8006254:	080061ed 	.word	0x080061ed
 8006258:	08006367 	.word	0x08006367
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	602a      	str	r2, [r5, #0]
 8006264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800626c:	2301      	movs	r3, #1
 800626e:	e0a3      	b.n	80063b8 <_printf_i+0x1f4>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	6829      	ldr	r1, [r5, #0]
 8006274:	0606      	lsls	r6, r0, #24
 8006276:	f101 0304 	add.w	r3, r1, #4
 800627a:	d50a      	bpl.n	8006292 <_printf_i+0xce>
 800627c:	680e      	ldr	r6, [r1, #0]
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	2e00      	cmp	r6, #0
 8006282:	da03      	bge.n	800628c <_printf_i+0xc8>
 8006284:	232d      	movs	r3, #45	; 0x2d
 8006286:	4276      	negs	r6, r6
 8006288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800628c:	485e      	ldr	r0, [pc, #376]	; (8006408 <_printf_i+0x244>)
 800628e:	230a      	movs	r3, #10
 8006290:	e019      	b.n	80062c6 <_printf_i+0x102>
 8006292:	680e      	ldr	r6, [r1, #0]
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800629a:	bf18      	it	ne
 800629c:	b236      	sxthne	r6, r6
 800629e:	e7ef      	b.n	8006280 <_printf_i+0xbc>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	1d19      	adds	r1, r3, #4
 80062a6:	6029      	str	r1, [r5, #0]
 80062a8:	0601      	lsls	r1, r0, #24
 80062aa:	d501      	bpl.n	80062b0 <_printf_i+0xec>
 80062ac:	681e      	ldr	r6, [r3, #0]
 80062ae:	e002      	b.n	80062b6 <_printf_i+0xf2>
 80062b0:	0646      	lsls	r6, r0, #25
 80062b2:	d5fb      	bpl.n	80062ac <_printf_i+0xe8>
 80062b4:	881e      	ldrh	r6, [r3, #0]
 80062b6:	4854      	ldr	r0, [pc, #336]	; (8006408 <_printf_i+0x244>)
 80062b8:	2f6f      	cmp	r7, #111	; 0x6f
 80062ba:	bf0c      	ite	eq
 80062bc:	2308      	moveq	r3, #8
 80062be:	230a      	movne	r3, #10
 80062c0:	2100      	movs	r1, #0
 80062c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062c6:	6865      	ldr	r5, [r4, #4]
 80062c8:	60a5      	str	r5, [r4, #8]
 80062ca:	2d00      	cmp	r5, #0
 80062cc:	bfa2      	ittt	ge
 80062ce:	6821      	ldrge	r1, [r4, #0]
 80062d0:	f021 0104 	bicge.w	r1, r1, #4
 80062d4:	6021      	strge	r1, [r4, #0]
 80062d6:	b90e      	cbnz	r6, 80062dc <_printf_i+0x118>
 80062d8:	2d00      	cmp	r5, #0
 80062da:	d04d      	beq.n	8006378 <_printf_i+0x1b4>
 80062dc:	4615      	mov	r5, r2
 80062de:	fbb6 f1f3 	udiv	r1, r6, r3
 80062e2:	fb03 6711 	mls	r7, r3, r1, r6
 80062e6:	5dc7      	ldrb	r7, [r0, r7]
 80062e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062ec:	4637      	mov	r7, r6
 80062ee:	42bb      	cmp	r3, r7
 80062f0:	460e      	mov	r6, r1
 80062f2:	d9f4      	bls.n	80062de <_printf_i+0x11a>
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d10b      	bne.n	8006310 <_printf_i+0x14c>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	07de      	lsls	r6, r3, #31
 80062fc:	d508      	bpl.n	8006310 <_printf_i+0x14c>
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	6861      	ldr	r1, [r4, #4]
 8006302:	4299      	cmp	r1, r3
 8006304:	bfde      	ittt	le
 8006306:	2330      	movle	r3, #48	; 0x30
 8006308:	f805 3c01 	strble.w	r3, [r5, #-1]
 800630c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006310:	1b52      	subs	r2, r2, r5
 8006312:	6122      	str	r2, [r4, #16]
 8006314:	f8cd a000 	str.w	sl, [sp]
 8006318:	464b      	mov	r3, r9
 800631a:	aa03      	add	r2, sp, #12
 800631c:	4621      	mov	r1, r4
 800631e:	4640      	mov	r0, r8
 8006320:	f7ff fee2 	bl	80060e8 <_printf_common>
 8006324:	3001      	adds	r0, #1
 8006326:	d14c      	bne.n	80063c2 <_printf_i+0x1fe>
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	b004      	add	sp, #16
 800632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006332:	4835      	ldr	r0, [pc, #212]	; (8006408 <_printf_i+0x244>)
 8006334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006338:	6829      	ldr	r1, [r5, #0]
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006340:	6029      	str	r1, [r5, #0]
 8006342:	061d      	lsls	r5, r3, #24
 8006344:	d514      	bpl.n	8006370 <_printf_i+0x1ac>
 8006346:	07df      	lsls	r7, r3, #31
 8006348:	bf44      	itt	mi
 800634a:	f043 0320 	orrmi.w	r3, r3, #32
 800634e:	6023      	strmi	r3, [r4, #0]
 8006350:	b91e      	cbnz	r6, 800635a <_printf_i+0x196>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	f023 0320 	bic.w	r3, r3, #32
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	2310      	movs	r3, #16
 800635c:	e7b0      	b.n	80062c0 <_printf_i+0xfc>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	f043 0320 	orr.w	r3, r3, #32
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	2378      	movs	r3, #120	; 0x78
 8006368:	4828      	ldr	r0, [pc, #160]	; (800640c <_printf_i+0x248>)
 800636a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800636e:	e7e3      	b.n	8006338 <_printf_i+0x174>
 8006370:	0659      	lsls	r1, r3, #25
 8006372:	bf48      	it	mi
 8006374:	b2b6      	uxthmi	r6, r6
 8006376:	e7e6      	b.n	8006346 <_printf_i+0x182>
 8006378:	4615      	mov	r5, r2
 800637a:	e7bb      	b.n	80062f4 <_printf_i+0x130>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	6826      	ldr	r6, [r4, #0]
 8006380:	6961      	ldr	r1, [r4, #20]
 8006382:	1d18      	adds	r0, r3, #4
 8006384:	6028      	str	r0, [r5, #0]
 8006386:	0635      	lsls	r5, r6, #24
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	d501      	bpl.n	8006390 <_printf_i+0x1cc>
 800638c:	6019      	str	r1, [r3, #0]
 800638e:	e002      	b.n	8006396 <_printf_i+0x1d2>
 8006390:	0670      	lsls	r0, r6, #25
 8006392:	d5fb      	bpl.n	800638c <_printf_i+0x1c8>
 8006394:	8019      	strh	r1, [r3, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	4615      	mov	r5, r2
 800639c:	e7ba      	b.n	8006314 <_printf_i+0x150>
 800639e:	682b      	ldr	r3, [r5, #0]
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	602a      	str	r2, [r5, #0]
 80063a4:	681d      	ldr	r5, [r3, #0]
 80063a6:	6862      	ldr	r2, [r4, #4]
 80063a8:	2100      	movs	r1, #0
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7f9 ff38 	bl	8000220 <memchr>
 80063b0:	b108      	cbz	r0, 80063b6 <_printf_i+0x1f2>
 80063b2:	1b40      	subs	r0, r0, r5
 80063b4:	6060      	str	r0, [r4, #4]
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	2300      	movs	r3, #0
 80063bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c0:	e7a8      	b.n	8006314 <_printf_i+0x150>
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	462a      	mov	r2, r5
 80063c6:	4649      	mov	r1, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	47d0      	blx	sl
 80063cc:	3001      	adds	r0, #1
 80063ce:	d0ab      	beq.n	8006328 <_printf_i+0x164>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	079b      	lsls	r3, r3, #30
 80063d4:	d413      	bmi.n	80063fe <_printf_i+0x23a>
 80063d6:	68e0      	ldr	r0, [r4, #12]
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	4298      	cmp	r0, r3
 80063dc:	bfb8      	it	lt
 80063de:	4618      	movlt	r0, r3
 80063e0:	e7a4      	b.n	800632c <_printf_i+0x168>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d09b      	beq.n	8006328 <_printf_i+0x164>
 80063f0:	3501      	adds	r5, #1
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	9903      	ldr	r1, [sp, #12]
 80063f6:	1a5b      	subs	r3, r3, r1
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dcf2      	bgt.n	80063e2 <_printf_i+0x21e>
 80063fc:	e7eb      	b.n	80063d6 <_printf_i+0x212>
 80063fe:	2500      	movs	r5, #0
 8006400:	f104 0619 	add.w	r6, r4, #25
 8006404:	e7f5      	b.n	80063f2 <_printf_i+0x22e>
 8006406:	bf00      	nop
 8006408:	0800a4a2 	.word	0x0800a4a2
 800640c:	0800a4b3 	.word	0x0800a4b3

08006410 <_scanf_float>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	b087      	sub	sp, #28
 8006416:	4617      	mov	r7, r2
 8006418:	9303      	str	r3, [sp, #12]
 800641a:	688b      	ldr	r3, [r1, #8]
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006422:	bf83      	ittte	hi
 8006424:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006428:	195b      	addhi	r3, r3, r5
 800642a:	9302      	strhi	r3, [sp, #8]
 800642c:	2300      	movls	r3, #0
 800642e:	bf86      	itte	hi
 8006430:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006434:	608b      	strhi	r3, [r1, #8]
 8006436:	9302      	strls	r3, [sp, #8]
 8006438:	680b      	ldr	r3, [r1, #0]
 800643a:	468b      	mov	fp, r1
 800643c:	2500      	movs	r5, #0
 800643e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006442:	f84b 3b1c 	str.w	r3, [fp], #28
 8006446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800644a:	4680      	mov	r8, r0
 800644c:	460c      	mov	r4, r1
 800644e:	465e      	mov	r6, fp
 8006450:	46aa      	mov	sl, r5
 8006452:	46a9      	mov	r9, r5
 8006454:	9501      	str	r5, [sp, #4]
 8006456:	68a2      	ldr	r2, [r4, #8]
 8006458:	b152      	cbz	r2, 8006470 <_scanf_float+0x60>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b4e      	cmp	r3, #78	; 0x4e
 8006460:	d864      	bhi.n	800652c <_scanf_float+0x11c>
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	d83c      	bhi.n	80064e0 <_scanf_float+0xd0>
 8006466:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800646a:	b2c8      	uxtb	r0, r1
 800646c:	280e      	cmp	r0, #14
 800646e:	d93a      	bls.n	80064e6 <_scanf_float+0xd6>
 8006470:	f1b9 0f00 	cmp.w	r9, #0
 8006474:	d003      	beq.n	800647e <_scanf_float+0x6e>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006482:	f1ba 0f01 	cmp.w	sl, #1
 8006486:	f200 8113 	bhi.w	80066b0 <_scanf_float+0x2a0>
 800648a:	455e      	cmp	r6, fp
 800648c:	f200 8105 	bhi.w	800669a <_scanf_float+0x28a>
 8006490:	2501      	movs	r5, #1
 8006492:	4628      	mov	r0, r5
 8006494:	b007      	add	sp, #28
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800649e:	2a0d      	cmp	r2, #13
 80064a0:	d8e6      	bhi.n	8006470 <_scanf_float+0x60>
 80064a2:	a101      	add	r1, pc, #4	; (adr r1, 80064a8 <_scanf_float+0x98>)
 80064a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064a8:	080065e7 	.word	0x080065e7
 80064ac:	08006471 	.word	0x08006471
 80064b0:	08006471 	.word	0x08006471
 80064b4:	08006471 	.word	0x08006471
 80064b8:	08006647 	.word	0x08006647
 80064bc:	0800661f 	.word	0x0800661f
 80064c0:	08006471 	.word	0x08006471
 80064c4:	08006471 	.word	0x08006471
 80064c8:	080065f5 	.word	0x080065f5
 80064cc:	08006471 	.word	0x08006471
 80064d0:	08006471 	.word	0x08006471
 80064d4:	08006471 	.word	0x08006471
 80064d8:	08006471 	.word	0x08006471
 80064dc:	080065ad 	.word	0x080065ad
 80064e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80064e4:	e7db      	b.n	800649e <_scanf_float+0x8e>
 80064e6:	290e      	cmp	r1, #14
 80064e8:	d8c2      	bhi.n	8006470 <_scanf_float+0x60>
 80064ea:	a001      	add	r0, pc, #4	; (adr r0, 80064f0 <_scanf_float+0xe0>)
 80064ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064f0:	0800659f 	.word	0x0800659f
 80064f4:	08006471 	.word	0x08006471
 80064f8:	0800659f 	.word	0x0800659f
 80064fc:	08006633 	.word	0x08006633
 8006500:	08006471 	.word	0x08006471
 8006504:	0800654d 	.word	0x0800654d
 8006508:	08006589 	.word	0x08006589
 800650c:	08006589 	.word	0x08006589
 8006510:	08006589 	.word	0x08006589
 8006514:	08006589 	.word	0x08006589
 8006518:	08006589 	.word	0x08006589
 800651c:	08006589 	.word	0x08006589
 8006520:	08006589 	.word	0x08006589
 8006524:	08006589 	.word	0x08006589
 8006528:	08006589 	.word	0x08006589
 800652c:	2b6e      	cmp	r3, #110	; 0x6e
 800652e:	d809      	bhi.n	8006544 <_scanf_float+0x134>
 8006530:	2b60      	cmp	r3, #96	; 0x60
 8006532:	d8b2      	bhi.n	800649a <_scanf_float+0x8a>
 8006534:	2b54      	cmp	r3, #84	; 0x54
 8006536:	d077      	beq.n	8006628 <_scanf_float+0x218>
 8006538:	2b59      	cmp	r3, #89	; 0x59
 800653a:	d199      	bne.n	8006470 <_scanf_float+0x60>
 800653c:	2d07      	cmp	r5, #7
 800653e:	d197      	bne.n	8006470 <_scanf_float+0x60>
 8006540:	2508      	movs	r5, #8
 8006542:	e029      	b.n	8006598 <_scanf_float+0x188>
 8006544:	2b74      	cmp	r3, #116	; 0x74
 8006546:	d06f      	beq.n	8006628 <_scanf_float+0x218>
 8006548:	2b79      	cmp	r3, #121	; 0x79
 800654a:	e7f6      	b.n	800653a <_scanf_float+0x12a>
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	05c8      	lsls	r0, r1, #23
 8006550:	d51a      	bpl.n	8006588 <_scanf_float+0x178>
 8006552:	9b02      	ldr	r3, [sp, #8]
 8006554:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006558:	6021      	str	r1, [r4, #0]
 800655a:	f109 0901 	add.w	r9, r9, #1
 800655e:	b11b      	cbz	r3, 8006568 <_scanf_float+0x158>
 8006560:	3b01      	subs	r3, #1
 8006562:	3201      	adds	r2, #1
 8006564:	9302      	str	r3, [sp, #8]
 8006566:	60a2      	str	r2, [r4, #8]
 8006568:	68a3      	ldr	r3, [r4, #8]
 800656a:	3b01      	subs	r3, #1
 800656c:	60a3      	str	r3, [r4, #8]
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	3301      	adds	r3, #1
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3b01      	subs	r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	f340 8084 	ble.w	8006688 <_scanf_float+0x278>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	e766      	b.n	8006456 <_scanf_float+0x46>
 8006588:	eb1a 0f05 	cmn.w	sl, r5
 800658c:	f47f af70 	bne.w	8006470 <_scanf_float+0x60>
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006596:	6022      	str	r2, [r4, #0]
 8006598:	f806 3b01 	strb.w	r3, [r6], #1
 800659c:	e7e4      	b.n	8006568 <_scanf_float+0x158>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	0610      	lsls	r0, r2, #24
 80065a2:	f57f af65 	bpl.w	8006470 <_scanf_float+0x60>
 80065a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065aa:	e7f4      	b.n	8006596 <_scanf_float+0x186>
 80065ac:	f1ba 0f00 	cmp.w	sl, #0
 80065b0:	d10e      	bne.n	80065d0 <_scanf_float+0x1c0>
 80065b2:	f1b9 0f00 	cmp.w	r9, #0
 80065b6:	d10e      	bne.n	80065d6 <_scanf_float+0x1c6>
 80065b8:	6822      	ldr	r2, [r4, #0]
 80065ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065c2:	d108      	bne.n	80065d6 <_scanf_float+0x1c6>
 80065c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065c8:	6022      	str	r2, [r4, #0]
 80065ca:	f04f 0a01 	mov.w	sl, #1
 80065ce:	e7e3      	b.n	8006598 <_scanf_float+0x188>
 80065d0:	f1ba 0f02 	cmp.w	sl, #2
 80065d4:	d055      	beq.n	8006682 <_scanf_float+0x272>
 80065d6:	2d01      	cmp	r5, #1
 80065d8:	d002      	beq.n	80065e0 <_scanf_float+0x1d0>
 80065da:	2d04      	cmp	r5, #4
 80065dc:	f47f af48 	bne.w	8006470 <_scanf_float+0x60>
 80065e0:	3501      	adds	r5, #1
 80065e2:	b2ed      	uxtb	r5, r5
 80065e4:	e7d8      	b.n	8006598 <_scanf_float+0x188>
 80065e6:	f1ba 0f01 	cmp.w	sl, #1
 80065ea:	f47f af41 	bne.w	8006470 <_scanf_float+0x60>
 80065ee:	f04f 0a02 	mov.w	sl, #2
 80065f2:	e7d1      	b.n	8006598 <_scanf_float+0x188>
 80065f4:	b97d      	cbnz	r5, 8006616 <_scanf_float+0x206>
 80065f6:	f1b9 0f00 	cmp.w	r9, #0
 80065fa:	f47f af3c 	bne.w	8006476 <_scanf_float+0x66>
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006604:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006608:	f47f af39 	bne.w	800647e <_scanf_float+0x6e>
 800660c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006610:	6022      	str	r2, [r4, #0]
 8006612:	2501      	movs	r5, #1
 8006614:	e7c0      	b.n	8006598 <_scanf_float+0x188>
 8006616:	2d03      	cmp	r5, #3
 8006618:	d0e2      	beq.n	80065e0 <_scanf_float+0x1d0>
 800661a:	2d05      	cmp	r5, #5
 800661c:	e7de      	b.n	80065dc <_scanf_float+0x1cc>
 800661e:	2d02      	cmp	r5, #2
 8006620:	f47f af26 	bne.w	8006470 <_scanf_float+0x60>
 8006624:	2503      	movs	r5, #3
 8006626:	e7b7      	b.n	8006598 <_scanf_float+0x188>
 8006628:	2d06      	cmp	r5, #6
 800662a:	f47f af21 	bne.w	8006470 <_scanf_float+0x60>
 800662e:	2507      	movs	r5, #7
 8006630:	e7b2      	b.n	8006598 <_scanf_float+0x188>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	0591      	lsls	r1, r2, #22
 8006636:	f57f af1b 	bpl.w	8006470 <_scanf_float+0x60>
 800663a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800663e:	6022      	str	r2, [r4, #0]
 8006640:	f8cd 9004 	str.w	r9, [sp, #4]
 8006644:	e7a8      	b.n	8006598 <_scanf_float+0x188>
 8006646:	6822      	ldr	r2, [r4, #0]
 8006648:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800664c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006650:	d006      	beq.n	8006660 <_scanf_float+0x250>
 8006652:	0550      	lsls	r0, r2, #21
 8006654:	f57f af0c 	bpl.w	8006470 <_scanf_float+0x60>
 8006658:	f1b9 0f00 	cmp.w	r9, #0
 800665c:	f43f af0f 	beq.w	800647e <_scanf_float+0x6e>
 8006660:	0591      	lsls	r1, r2, #22
 8006662:	bf58      	it	pl
 8006664:	9901      	ldrpl	r1, [sp, #4]
 8006666:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800666a:	bf58      	it	pl
 800666c:	eba9 0101 	subpl.w	r1, r9, r1
 8006670:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006674:	bf58      	it	pl
 8006676:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	f04f 0900 	mov.w	r9, #0
 8006680:	e78a      	b.n	8006598 <_scanf_float+0x188>
 8006682:	f04f 0a03 	mov.w	sl, #3
 8006686:	e787      	b.n	8006598 <_scanf_float+0x188>
 8006688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800668c:	4639      	mov	r1, r7
 800668e:	4640      	mov	r0, r8
 8006690:	4798      	blx	r3
 8006692:	2800      	cmp	r0, #0
 8006694:	f43f aedf 	beq.w	8006456 <_scanf_float+0x46>
 8006698:	e6ea      	b.n	8006470 <_scanf_float+0x60>
 800669a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800669e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066a2:	463a      	mov	r2, r7
 80066a4:	4640      	mov	r0, r8
 80066a6:	4798      	blx	r3
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	6123      	str	r3, [r4, #16]
 80066ae:	e6ec      	b.n	800648a <_scanf_float+0x7a>
 80066b0:	1e6b      	subs	r3, r5, #1
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d825      	bhi.n	8006702 <_scanf_float+0x2f2>
 80066b6:	2d02      	cmp	r5, #2
 80066b8:	d836      	bhi.n	8006728 <_scanf_float+0x318>
 80066ba:	455e      	cmp	r6, fp
 80066bc:	f67f aee8 	bls.w	8006490 <_scanf_float+0x80>
 80066c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066c8:	463a      	mov	r2, r7
 80066ca:	4640      	mov	r0, r8
 80066cc:	4798      	blx	r3
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	e7f1      	b.n	80066ba <_scanf_float+0x2aa>
 80066d6:	9802      	ldr	r0, [sp, #8]
 80066d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80066e0:	9002      	str	r0, [sp, #8]
 80066e2:	463a      	mov	r2, r7
 80066e4:	4640      	mov	r0, r8
 80066e6:	4798      	blx	r3
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066f2:	fa5f fa8a 	uxtb.w	sl, sl
 80066f6:	f1ba 0f02 	cmp.w	sl, #2
 80066fa:	d1ec      	bne.n	80066d6 <_scanf_float+0x2c6>
 80066fc:	3d03      	subs	r5, #3
 80066fe:	b2ed      	uxtb	r5, r5
 8006700:	1b76      	subs	r6, r6, r5
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	05da      	lsls	r2, r3, #23
 8006706:	d52f      	bpl.n	8006768 <_scanf_float+0x358>
 8006708:	055b      	lsls	r3, r3, #21
 800670a:	d510      	bpl.n	800672e <_scanf_float+0x31e>
 800670c:	455e      	cmp	r6, fp
 800670e:	f67f aebf 	bls.w	8006490 <_scanf_float+0x80>
 8006712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800671a:	463a      	mov	r2, r7
 800671c:	4640      	mov	r0, r8
 800671e:	4798      	blx	r3
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	3b01      	subs	r3, #1
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	e7f1      	b.n	800670c <_scanf_float+0x2fc>
 8006728:	46aa      	mov	sl, r5
 800672a:	9602      	str	r6, [sp, #8]
 800672c:	e7df      	b.n	80066ee <_scanf_float+0x2de>
 800672e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	2965      	cmp	r1, #101	; 0x65
 8006736:	f103 33ff 	add.w	r3, r3, #4294967295
 800673a:	f106 35ff 	add.w	r5, r6, #4294967295
 800673e:	6123      	str	r3, [r4, #16]
 8006740:	d00c      	beq.n	800675c <_scanf_float+0x34c>
 8006742:	2945      	cmp	r1, #69	; 0x45
 8006744:	d00a      	beq.n	800675c <_scanf_float+0x34c>
 8006746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800674a:	463a      	mov	r2, r7
 800674c:	4640      	mov	r0, r8
 800674e:	4798      	blx	r3
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006756:	3b01      	subs	r3, #1
 8006758:	1eb5      	subs	r5, r6, #2
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006760:	463a      	mov	r2, r7
 8006762:	4640      	mov	r0, r8
 8006764:	4798      	blx	r3
 8006766:	462e      	mov	r6, r5
 8006768:	6825      	ldr	r5, [r4, #0]
 800676a:	f015 0510 	ands.w	r5, r5, #16
 800676e:	d159      	bne.n	8006824 <_scanf_float+0x414>
 8006770:	7035      	strb	r5, [r6, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677c:	d11b      	bne.n	80067b6 <_scanf_float+0x3a6>
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	454b      	cmp	r3, r9
 8006782:	eba3 0209 	sub.w	r2, r3, r9
 8006786:	d123      	bne.n	80067d0 <_scanf_float+0x3c0>
 8006788:	2200      	movs	r2, #0
 800678a:	4659      	mov	r1, fp
 800678c:	4640      	mov	r0, r8
 800678e:	f000 feb1 	bl	80074f4 <_strtod_r>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	f012 0f02 	tst.w	r2, #2
 800679a:	ec57 6b10 	vmov	r6, r7, d0
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	d021      	beq.n	80067e6 <_scanf_float+0x3d6>
 80067a2:	9903      	ldr	r1, [sp, #12]
 80067a4:	1d1a      	adds	r2, r3, #4
 80067a6:	600a      	str	r2, [r1, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	e9c3 6700 	strd	r6, r7, [r3]
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	60e3      	str	r3, [r4, #12]
 80067b4:	e66d      	b.n	8006492 <_scanf_float+0x82>
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0e5      	beq.n	8006788 <_scanf_float+0x378>
 80067bc:	9905      	ldr	r1, [sp, #20]
 80067be:	230a      	movs	r3, #10
 80067c0:	462a      	mov	r2, r5
 80067c2:	3101      	adds	r1, #1
 80067c4:	4640      	mov	r0, r8
 80067c6:	f000 ff1d 	bl	8007604 <_strtol_r>
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	9e05      	ldr	r6, [sp, #20]
 80067ce:	1ac2      	subs	r2, r0, r3
 80067d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80067d4:	429e      	cmp	r6, r3
 80067d6:	bf28      	it	cs
 80067d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80067dc:	4912      	ldr	r1, [pc, #72]	; (8006828 <_scanf_float+0x418>)
 80067de:	4630      	mov	r0, r6
 80067e0:	f000 f844 	bl	800686c <siprintf>
 80067e4:	e7d0      	b.n	8006788 <_scanf_float+0x378>
 80067e6:	9903      	ldr	r1, [sp, #12]
 80067e8:	f012 0f04 	tst.w	r2, #4
 80067ec:	f103 0204 	add.w	r2, r3, #4
 80067f0:	600a      	str	r2, [r1, #0]
 80067f2:	d1d9      	bne.n	80067a8 <_scanf_float+0x398>
 80067f4:	f8d3 8000 	ldr.w	r8, [r3]
 80067f8:	ee10 2a10 	vmov	r2, s0
 80067fc:	ee10 0a10 	vmov	r0, s0
 8006800:	463b      	mov	r3, r7
 8006802:	4639      	mov	r1, r7
 8006804:	f7fa f9b2 	bl	8000b6c <__aeabi_dcmpun>
 8006808:	b128      	cbz	r0, 8006816 <_scanf_float+0x406>
 800680a:	4808      	ldr	r0, [pc, #32]	; (800682c <_scanf_float+0x41c>)
 800680c:	f000 f828 	bl	8006860 <nanf>
 8006810:	ed88 0a00 	vstr	s0, [r8]
 8006814:	e7cb      	b.n	80067ae <_scanf_float+0x39e>
 8006816:	4630      	mov	r0, r6
 8006818:	4639      	mov	r1, r7
 800681a:	f7fa fa05 	bl	8000c28 <__aeabi_d2f>
 800681e:	f8c8 0000 	str.w	r0, [r8]
 8006822:	e7c4      	b.n	80067ae <_scanf_float+0x39e>
 8006824:	2500      	movs	r5, #0
 8006826:	e634      	b.n	8006492 <_scanf_float+0x82>
 8006828:	0800a4c4 	.word	0x0800a4c4
 800682c:	0800a938 	.word	0x0800a938

08006830 <iprintf>:
 8006830:	b40f      	push	{r0, r1, r2, r3}
 8006832:	4b0a      	ldr	r3, [pc, #40]	; (800685c <iprintf+0x2c>)
 8006834:	b513      	push	{r0, r1, r4, lr}
 8006836:	681c      	ldr	r4, [r3, #0]
 8006838:	b124      	cbz	r4, 8006844 <iprintf+0x14>
 800683a:	69a3      	ldr	r3, [r4, #24]
 800683c:	b913      	cbnz	r3, 8006844 <iprintf+0x14>
 800683e:	4620      	mov	r0, r4
 8006840:	f001 fdb4 	bl	80083ac <__sinit>
 8006844:	ab05      	add	r3, sp, #20
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	68a1      	ldr	r1, [r4, #8]
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	4620      	mov	r0, r4
 800684e:	f003 f927 	bl	8009aa0 <_vfiprintf_r>
 8006852:	b002      	add	sp, #8
 8006854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006858:	b004      	add	sp, #16
 800685a:	4770      	bx	lr
 800685c:	2000000c 	.word	0x2000000c

08006860 <nanf>:
 8006860:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006868 <nanf+0x8>
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	7fc00000 	.word	0x7fc00000

0800686c <siprintf>:
 800686c:	b40e      	push	{r1, r2, r3}
 800686e:	b500      	push	{lr}
 8006870:	b09c      	sub	sp, #112	; 0x70
 8006872:	ab1d      	add	r3, sp, #116	; 0x74
 8006874:	9002      	str	r0, [sp, #8]
 8006876:	9006      	str	r0, [sp, #24]
 8006878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800687c:	4809      	ldr	r0, [pc, #36]	; (80068a4 <siprintf+0x38>)
 800687e:	9107      	str	r1, [sp, #28]
 8006880:	9104      	str	r1, [sp, #16]
 8006882:	4909      	ldr	r1, [pc, #36]	; (80068a8 <siprintf+0x3c>)
 8006884:	f853 2b04 	ldr.w	r2, [r3], #4
 8006888:	9105      	str	r1, [sp, #20]
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	a902      	add	r1, sp, #8
 8006890:	f002 ffdc 	bl	800984c <_svfiprintf_r>
 8006894:	9b02      	ldr	r3, [sp, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	b01c      	add	sp, #112	; 0x70
 800689c:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a0:	b003      	add	sp, #12
 80068a2:	4770      	bx	lr
 80068a4:	2000000c 	.word	0x2000000c
 80068a8:	ffff0208 	.word	0xffff0208

080068ac <sulp>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	460d      	mov	r5, r1
 80068b2:	ec45 4b10 	vmov	d0, r4, r5
 80068b6:	4616      	mov	r6, r2
 80068b8:	f002 fd26 	bl	8009308 <__ulp>
 80068bc:	ec51 0b10 	vmov	r0, r1, d0
 80068c0:	b17e      	cbz	r6, 80068e2 <sulp+0x36>
 80068c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	dd09      	ble.n	80068e2 <sulp+0x36>
 80068ce:	051b      	lsls	r3, r3, #20
 80068d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068d4:	2400      	movs	r4, #0
 80068d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068da:	4622      	mov	r2, r4
 80068dc:	462b      	mov	r3, r5
 80068de:	f7f9 feab 	bl	8000638 <__aeabi_dmul>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	0000      	movs	r0, r0
	...

080068e8 <_strtod_l>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	ed2d 8b02 	vpush	{d8}
 80068f0:	b09d      	sub	sp, #116	; 0x74
 80068f2:	461f      	mov	r7, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	9318      	str	r3, [sp, #96]	; 0x60
 80068f8:	4ba2      	ldr	r3, [pc, #648]	; (8006b84 <_strtod_l+0x29c>)
 80068fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	9305      	str	r3, [sp, #20]
 8006900:	4604      	mov	r4, r0
 8006902:	4618      	mov	r0, r3
 8006904:	4688      	mov	r8, r1
 8006906:	f7f9 fc83 	bl	8000210 <strlen>
 800690a:	f04f 0a00 	mov.w	sl, #0
 800690e:	4605      	mov	r5, r0
 8006910:	f04f 0b00 	mov.w	fp, #0
 8006914:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	2a2b      	cmp	r2, #43	; 0x2b
 800691e:	d04e      	beq.n	80069be <_strtod_l+0xd6>
 8006920:	d83b      	bhi.n	800699a <_strtod_l+0xb2>
 8006922:	2a0d      	cmp	r2, #13
 8006924:	d834      	bhi.n	8006990 <_strtod_l+0xa8>
 8006926:	2a08      	cmp	r2, #8
 8006928:	d834      	bhi.n	8006994 <_strtod_l+0xac>
 800692a:	2a00      	cmp	r2, #0
 800692c:	d03e      	beq.n	80069ac <_strtod_l+0xc4>
 800692e:	2300      	movs	r3, #0
 8006930:	930a      	str	r3, [sp, #40]	; 0x28
 8006932:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006934:	7833      	ldrb	r3, [r6, #0]
 8006936:	2b30      	cmp	r3, #48	; 0x30
 8006938:	f040 80b0 	bne.w	8006a9c <_strtod_l+0x1b4>
 800693c:	7873      	ldrb	r3, [r6, #1]
 800693e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006942:	2b58      	cmp	r3, #88	; 0x58
 8006944:	d168      	bne.n	8006a18 <_strtod_l+0x130>
 8006946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	ab18      	add	r3, sp, #96	; 0x60
 800694c:	9702      	str	r7, [sp, #8]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	4a8d      	ldr	r2, [pc, #564]	; (8006b88 <_strtod_l+0x2a0>)
 8006952:	ab19      	add	r3, sp, #100	; 0x64
 8006954:	a917      	add	r1, sp, #92	; 0x5c
 8006956:	4620      	mov	r0, r4
 8006958:	f001 fe2c 	bl	80085b4 <__gethex>
 800695c:	f010 0707 	ands.w	r7, r0, #7
 8006960:	4605      	mov	r5, r0
 8006962:	d005      	beq.n	8006970 <_strtod_l+0x88>
 8006964:	2f06      	cmp	r7, #6
 8006966:	d12c      	bne.n	80069c2 <_strtod_l+0xda>
 8006968:	3601      	adds	r6, #1
 800696a:	2300      	movs	r3, #0
 800696c:	9617      	str	r6, [sp, #92]	; 0x5c
 800696e:	930a      	str	r3, [sp, #40]	; 0x28
 8006970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006972:	2b00      	cmp	r3, #0
 8006974:	f040 8590 	bne.w	8007498 <_strtod_l+0xbb0>
 8006978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697a:	b1eb      	cbz	r3, 80069b8 <_strtod_l+0xd0>
 800697c:	4652      	mov	r2, sl
 800697e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006982:	ec43 2b10 	vmov	d0, r2, r3
 8006986:	b01d      	add	sp, #116	; 0x74
 8006988:	ecbd 8b02 	vpop	{d8}
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	2a20      	cmp	r2, #32
 8006992:	d1cc      	bne.n	800692e <_strtod_l+0x46>
 8006994:	3301      	adds	r3, #1
 8006996:	9317      	str	r3, [sp, #92]	; 0x5c
 8006998:	e7be      	b.n	8006918 <_strtod_l+0x30>
 800699a:	2a2d      	cmp	r2, #45	; 0x2d
 800699c:	d1c7      	bne.n	800692e <_strtod_l+0x46>
 800699e:	2201      	movs	r2, #1
 80069a0:	920a      	str	r2, [sp, #40]	; 0x28
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1c2      	bne.n	8006932 <_strtod_l+0x4a>
 80069ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 856e 	bne.w	8007494 <_strtod_l+0xbac>
 80069b8:	4652      	mov	r2, sl
 80069ba:	465b      	mov	r3, fp
 80069bc:	e7e1      	b.n	8006982 <_strtod_l+0x9a>
 80069be:	2200      	movs	r2, #0
 80069c0:	e7ee      	b.n	80069a0 <_strtod_l+0xb8>
 80069c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069c4:	b13a      	cbz	r2, 80069d6 <_strtod_l+0xee>
 80069c6:	2135      	movs	r1, #53	; 0x35
 80069c8:	a81a      	add	r0, sp, #104	; 0x68
 80069ca:	f002 fda8 	bl	800951e <__copybits>
 80069ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069d0:	4620      	mov	r0, r4
 80069d2:	f002 f967 	bl	8008ca4 <_Bfree>
 80069d6:	3f01      	subs	r7, #1
 80069d8:	2f04      	cmp	r7, #4
 80069da:	d806      	bhi.n	80069ea <_strtod_l+0x102>
 80069dc:	e8df f007 	tbb	[pc, r7]
 80069e0:	1714030a 	.word	0x1714030a
 80069e4:	0a          	.byte	0x0a
 80069e5:	00          	.byte	0x00
 80069e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80069ea:	0728      	lsls	r0, r5, #28
 80069ec:	d5c0      	bpl.n	8006970 <_strtod_l+0x88>
 80069ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80069f2:	e7bd      	b.n	8006970 <_strtod_l+0x88>
 80069f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80069f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80069fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a06:	e7f0      	b.n	80069ea <_strtod_l+0x102>
 8006a08:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006b8c <_strtod_l+0x2a4>
 8006a0c:	e7ed      	b.n	80069ea <_strtod_l+0x102>
 8006a0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006a12:	f04f 3aff 	mov.w	sl, #4294967295
 8006a16:	e7e8      	b.n	80069ea <_strtod_l+0x102>
 8006a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b30      	cmp	r3, #48	; 0x30
 8006a22:	d0f9      	beq.n	8006a18 <_strtod_l+0x130>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0a3      	beq.n	8006970 <_strtod_l+0x88>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f04f 0900 	mov.w	r9, #0
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a32:	9308      	str	r3, [sp, #32]
 8006a34:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a38:	464f      	mov	r7, r9
 8006a3a:	220a      	movs	r2, #10
 8006a3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006a3e:	7806      	ldrb	r6, [r0, #0]
 8006a40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a44:	b2d9      	uxtb	r1, r3
 8006a46:	2909      	cmp	r1, #9
 8006a48:	d92a      	bls.n	8006aa0 <_strtod_l+0x1b8>
 8006a4a:	9905      	ldr	r1, [sp, #20]
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	f003 f9b2 	bl	8009db6 <strncmp>
 8006a52:	b398      	cbz	r0, 8006abc <_strtod_l+0x1d4>
 8006a54:	2000      	movs	r0, #0
 8006a56:	4632      	mov	r2, r6
 8006a58:	463d      	mov	r5, r7
 8006a5a:	9005      	str	r0, [sp, #20]
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2a65      	cmp	r2, #101	; 0x65
 8006a60:	d001      	beq.n	8006a66 <_strtod_l+0x17e>
 8006a62:	2a45      	cmp	r2, #69	; 0x45
 8006a64:	d118      	bne.n	8006a98 <_strtod_l+0x1b0>
 8006a66:	b91d      	cbnz	r5, 8006a70 <_strtod_l+0x188>
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	4302      	orrs	r2, r0
 8006a6c:	d09e      	beq.n	80069ac <_strtod_l+0xc4>
 8006a6e:	2500      	movs	r5, #0
 8006a70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006a74:	f108 0201 	add.w	r2, r8, #1
 8006a78:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006a7e:	2a2b      	cmp	r2, #43	; 0x2b
 8006a80:	d075      	beq.n	8006b6e <_strtod_l+0x286>
 8006a82:	2a2d      	cmp	r2, #45	; 0x2d
 8006a84:	d07b      	beq.n	8006b7e <_strtod_l+0x296>
 8006a86:	f04f 0c00 	mov.w	ip, #0
 8006a8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a8e:	2909      	cmp	r1, #9
 8006a90:	f240 8082 	bls.w	8006b98 <_strtod_l+0x2b0>
 8006a94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006a98:	2600      	movs	r6, #0
 8006a9a:	e09d      	b.n	8006bd8 <_strtod_l+0x2f0>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e7c4      	b.n	8006a2a <_strtod_l+0x142>
 8006aa0:	2f08      	cmp	r7, #8
 8006aa2:	bfd8      	it	le
 8006aa4:	9907      	ldrle	r1, [sp, #28]
 8006aa6:	f100 0001 	add.w	r0, r0, #1
 8006aaa:	bfda      	itte	le
 8006aac:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ab0:	9307      	strle	r3, [sp, #28]
 8006ab2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ab6:	3701      	adds	r7, #1
 8006ab8:	9017      	str	r0, [sp, #92]	; 0x5c
 8006aba:	e7bf      	b.n	8006a3c <_strtod_l+0x154>
 8006abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006abe:	195a      	adds	r2, r3, r5
 8006ac0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ac2:	5d5a      	ldrb	r2, [r3, r5]
 8006ac4:	2f00      	cmp	r7, #0
 8006ac6:	d037      	beq.n	8006b38 <_strtod_l+0x250>
 8006ac8:	9005      	str	r0, [sp, #20]
 8006aca:	463d      	mov	r5, r7
 8006acc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ad0:	2b09      	cmp	r3, #9
 8006ad2:	d912      	bls.n	8006afa <_strtod_l+0x212>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e7c2      	b.n	8006a5e <_strtod_l+0x176>
 8006ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ade:	785a      	ldrb	r2, [r3, #1]
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	2a30      	cmp	r2, #48	; 0x30
 8006ae4:	d0f8      	beq.n	8006ad8 <_strtod_l+0x1f0>
 8006ae6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	f200 84d9 	bhi.w	80074a2 <_strtod_l+0xbba>
 8006af0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006af2:	9005      	str	r0, [sp, #20]
 8006af4:	2000      	movs	r0, #0
 8006af6:	9308      	str	r3, [sp, #32]
 8006af8:	4605      	mov	r5, r0
 8006afa:	3a30      	subs	r2, #48	; 0x30
 8006afc:	f100 0301 	add.w	r3, r0, #1
 8006b00:	d014      	beq.n	8006b2c <_strtod_l+0x244>
 8006b02:	9905      	ldr	r1, [sp, #20]
 8006b04:	4419      	add	r1, r3
 8006b06:	9105      	str	r1, [sp, #20]
 8006b08:	462b      	mov	r3, r5
 8006b0a:	eb00 0e05 	add.w	lr, r0, r5
 8006b0e:	210a      	movs	r1, #10
 8006b10:	4573      	cmp	r3, lr
 8006b12:	d113      	bne.n	8006b3c <_strtod_l+0x254>
 8006b14:	182b      	adds	r3, r5, r0
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	f105 0501 	add.w	r5, r5, #1
 8006b1c:	4405      	add	r5, r0
 8006b1e:	dc1c      	bgt.n	8006b5a <_strtod_l+0x272>
 8006b20:	9907      	ldr	r1, [sp, #28]
 8006b22:	230a      	movs	r3, #10
 8006b24:	fb03 2301 	mla	r3, r3, r1, r2
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b2e:	1c51      	adds	r1, r2, #1
 8006b30:	9117      	str	r1, [sp, #92]	; 0x5c
 8006b32:	7852      	ldrb	r2, [r2, #1]
 8006b34:	4618      	mov	r0, r3
 8006b36:	e7c9      	b.n	8006acc <_strtod_l+0x1e4>
 8006b38:	4638      	mov	r0, r7
 8006b3a:	e7d2      	b.n	8006ae2 <_strtod_l+0x1fa>
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	dc04      	bgt.n	8006b4a <_strtod_l+0x262>
 8006b40:	9e07      	ldr	r6, [sp, #28]
 8006b42:	434e      	muls	r6, r1
 8006b44:	9607      	str	r6, [sp, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	e7e2      	b.n	8006b10 <_strtod_l+0x228>
 8006b4a:	f103 0c01 	add.w	ip, r3, #1
 8006b4e:	f1bc 0f10 	cmp.w	ip, #16
 8006b52:	bfd8      	it	le
 8006b54:	fb01 f909 	mulle.w	r9, r1, r9
 8006b58:	e7f5      	b.n	8006b46 <_strtod_l+0x25e>
 8006b5a:	2d10      	cmp	r5, #16
 8006b5c:	bfdc      	itt	le
 8006b5e:	230a      	movle	r3, #10
 8006b60:	fb03 2909 	mlale	r9, r3, r9, r2
 8006b64:	e7e1      	b.n	8006b2a <_strtod_l+0x242>
 8006b66:	2300      	movs	r3, #0
 8006b68:	9305      	str	r3, [sp, #20]
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e77c      	b.n	8006a68 <_strtod_l+0x180>
 8006b6e:	f04f 0c00 	mov.w	ip, #0
 8006b72:	f108 0202 	add.w	r2, r8, #2
 8006b76:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b78:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006b7c:	e785      	b.n	8006a8a <_strtod_l+0x1a2>
 8006b7e:	f04f 0c01 	mov.w	ip, #1
 8006b82:	e7f6      	b.n	8006b72 <_strtod_l+0x28a>
 8006b84:	0800a77c 	.word	0x0800a77c
 8006b88:	0800a4cc 	.word	0x0800a4cc
 8006b8c:	7ff00000 	.word	0x7ff00000
 8006b90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b92:	1c51      	adds	r1, r2, #1
 8006b94:	9117      	str	r1, [sp, #92]	; 0x5c
 8006b96:	7852      	ldrb	r2, [r2, #1]
 8006b98:	2a30      	cmp	r2, #48	; 0x30
 8006b9a:	d0f9      	beq.n	8006b90 <_strtod_l+0x2a8>
 8006b9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ba0:	2908      	cmp	r1, #8
 8006ba2:	f63f af79 	bhi.w	8006a98 <_strtod_l+0x1b0>
 8006ba6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006baa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bac:	9206      	str	r2, [sp, #24]
 8006bae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bb0:	1c51      	adds	r1, r2, #1
 8006bb2:	9117      	str	r1, [sp, #92]	; 0x5c
 8006bb4:	7852      	ldrb	r2, [r2, #1]
 8006bb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006bba:	2e09      	cmp	r6, #9
 8006bbc:	d937      	bls.n	8006c2e <_strtod_l+0x346>
 8006bbe:	9e06      	ldr	r6, [sp, #24]
 8006bc0:	1b89      	subs	r1, r1, r6
 8006bc2:	2908      	cmp	r1, #8
 8006bc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006bc8:	dc02      	bgt.n	8006bd0 <_strtod_l+0x2e8>
 8006bca:	4576      	cmp	r6, lr
 8006bcc:	bfa8      	it	ge
 8006bce:	4676      	movge	r6, lr
 8006bd0:	f1bc 0f00 	cmp.w	ip, #0
 8006bd4:	d000      	beq.n	8006bd8 <_strtod_l+0x2f0>
 8006bd6:	4276      	negs	r6, r6
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	d14d      	bne.n	8006c78 <_strtod_l+0x390>
 8006bdc:	9904      	ldr	r1, [sp, #16]
 8006bde:	4301      	orrs	r1, r0
 8006be0:	f47f aec6 	bne.w	8006970 <_strtod_l+0x88>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f47f aee1 	bne.w	80069ac <_strtod_l+0xc4>
 8006bea:	2a69      	cmp	r2, #105	; 0x69
 8006bec:	d027      	beq.n	8006c3e <_strtod_l+0x356>
 8006bee:	dc24      	bgt.n	8006c3a <_strtod_l+0x352>
 8006bf0:	2a49      	cmp	r2, #73	; 0x49
 8006bf2:	d024      	beq.n	8006c3e <_strtod_l+0x356>
 8006bf4:	2a4e      	cmp	r2, #78	; 0x4e
 8006bf6:	f47f aed9 	bne.w	80069ac <_strtod_l+0xc4>
 8006bfa:	499f      	ldr	r1, [pc, #636]	; (8006e78 <_strtod_l+0x590>)
 8006bfc:	a817      	add	r0, sp, #92	; 0x5c
 8006bfe:	f001 ff31 	bl	8008a64 <__match>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f aed2 	beq.w	80069ac <_strtod_l+0xc4>
 8006c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b28      	cmp	r3, #40	; 0x28
 8006c0e:	d12d      	bne.n	8006c6c <_strtod_l+0x384>
 8006c10:	499a      	ldr	r1, [pc, #616]	; (8006e7c <_strtod_l+0x594>)
 8006c12:	aa1a      	add	r2, sp, #104	; 0x68
 8006c14:	a817      	add	r0, sp, #92	; 0x5c
 8006c16:	f001 ff39 	bl	8008a8c <__hexnan>
 8006c1a:	2805      	cmp	r0, #5
 8006c1c:	d126      	bne.n	8006c6c <_strtod_l+0x384>
 8006c1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006c24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006c28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006c2c:	e6a0      	b.n	8006970 <_strtod_l+0x88>
 8006c2e:	210a      	movs	r1, #10
 8006c30:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006c34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006c38:	e7b9      	b.n	8006bae <_strtod_l+0x2c6>
 8006c3a:	2a6e      	cmp	r2, #110	; 0x6e
 8006c3c:	e7db      	b.n	8006bf6 <_strtod_l+0x30e>
 8006c3e:	4990      	ldr	r1, [pc, #576]	; (8006e80 <_strtod_l+0x598>)
 8006c40:	a817      	add	r0, sp, #92	; 0x5c
 8006c42:	f001 ff0f 	bl	8008a64 <__match>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f43f aeb0 	beq.w	80069ac <_strtod_l+0xc4>
 8006c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c4e:	498d      	ldr	r1, [pc, #564]	; (8006e84 <_strtod_l+0x59c>)
 8006c50:	3b01      	subs	r3, #1
 8006c52:	a817      	add	r0, sp, #92	; 0x5c
 8006c54:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c56:	f001 ff05 	bl	8008a64 <__match>
 8006c5a:	b910      	cbnz	r0, 8006c62 <_strtod_l+0x37a>
 8006c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c5e:	3301      	adds	r3, #1
 8006c60:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006e94 <_strtod_l+0x5ac>
 8006c66:	f04f 0a00 	mov.w	sl, #0
 8006c6a:	e681      	b.n	8006970 <_strtod_l+0x88>
 8006c6c:	4886      	ldr	r0, [pc, #536]	; (8006e88 <_strtod_l+0x5a0>)
 8006c6e:	f003 f847 	bl	8009d00 <nan>
 8006c72:	ec5b ab10 	vmov	sl, fp, d0
 8006c76:	e67b      	b.n	8006970 <_strtod_l+0x88>
 8006c78:	9b05      	ldr	r3, [sp, #20]
 8006c7a:	9807      	ldr	r0, [sp, #28]
 8006c7c:	1af3      	subs	r3, r6, r3
 8006c7e:	2f00      	cmp	r7, #0
 8006c80:	bf08      	it	eq
 8006c82:	462f      	moveq	r7, r5
 8006c84:	2d10      	cmp	r5, #16
 8006c86:	9306      	str	r3, [sp, #24]
 8006c88:	46a8      	mov	r8, r5
 8006c8a:	bfa8      	it	ge
 8006c8c:	f04f 0810 	movge.w	r8, #16
 8006c90:	f7f9 fc58 	bl	8000544 <__aeabi_ui2d>
 8006c94:	2d09      	cmp	r5, #9
 8006c96:	4682      	mov	sl, r0
 8006c98:	468b      	mov	fp, r1
 8006c9a:	dd13      	ble.n	8006cc4 <_strtod_l+0x3dc>
 8006c9c:	4b7b      	ldr	r3, [pc, #492]	; (8006e8c <_strtod_l+0x5a4>)
 8006c9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ca2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ca6:	f7f9 fcc7 	bl	8000638 <__aeabi_dmul>
 8006caa:	4682      	mov	sl, r0
 8006cac:	4648      	mov	r0, r9
 8006cae:	468b      	mov	fp, r1
 8006cb0:	f7f9 fc48 	bl	8000544 <__aeabi_ui2d>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f7f9 fb06 	bl	80002cc <__adddf3>
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	468b      	mov	fp, r1
 8006cc4:	2d0f      	cmp	r5, #15
 8006cc6:	dc38      	bgt.n	8006d3a <_strtod_l+0x452>
 8006cc8:	9b06      	ldr	r3, [sp, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f43f ae50 	beq.w	8006970 <_strtod_l+0x88>
 8006cd0:	dd24      	ble.n	8006d1c <_strtod_l+0x434>
 8006cd2:	2b16      	cmp	r3, #22
 8006cd4:	dc0b      	bgt.n	8006cee <_strtod_l+0x406>
 8006cd6:	496d      	ldr	r1, [pc, #436]	; (8006e8c <_strtod_l+0x5a4>)
 8006cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	465b      	mov	r3, fp
 8006ce4:	f7f9 fca8 	bl	8000638 <__aeabi_dmul>
 8006ce8:	4682      	mov	sl, r0
 8006cea:	468b      	mov	fp, r1
 8006cec:	e640      	b.n	8006970 <_strtod_l+0x88>
 8006cee:	9a06      	ldr	r2, [sp, #24]
 8006cf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	db20      	blt.n	8006d3a <_strtod_l+0x452>
 8006cf8:	4c64      	ldr	r4, [pc, #400]	; (8006e8c <_strtod_l+0x5a4>)
 8006cfa:	f1c5 050f 	rsb	r5, r5, #15
 8006cfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d02:	4652      	mov	r2, sl
 8006d04:	465b      	mov	r3, fp
 8006d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d0a:	f7f9 fc95 	bl	8000638 <__aeabi_dmul>
 8006d0e:	9b06      	ldr	r3, [sp, #24]
 8006d10:	1b5d      	subs	r5, r3, r5
 8006d12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d1a:	e7e3      	b.n	8006ce4 <_strtod_l+0x3fc>
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	3316      	adds	r3, #22
 8006d20:	db0b      	blt.n	8006d3a <_strtod_l+0x452>
 8006d22:	9b05      	ldr	r3, [sp, #20]
 8006d24:	1b9e      	subs	r6, r3, r6
 8006d26:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <_strtod_l+0x5a4>)
 8006d28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006d2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d30:	4650      	mov	r0, sl
 8006d32:	4659      	mov	r1, fp
 8006d34:	f7f9 fdaa 	bl	800088c <__aeabi_ddiv>
 8006d38:	e7d6      	b.n	8006ce8 <_strtod_l+0x400>
 8006d3a:	9b06      	ldr	r3, [sp, #24]
 8006d3c:	eba5 0808 	sub.w	r8, r5, r8
 8006d40:	4498      	add	r8, r3
 8006d42:	f1b8 0f00 	cmp.w	r8, #0
 8006d46:	dd74      	ble.n	8006e32 <_strtod_l+0x54a>
 8006d48:	f018 030f 	ands.w	r3, r8, #15
 8006d4c:	d00a      	beq.n	8006d64 <_strtod_l+0x47c>
 8006d4e:	494f      	ldr	r1, [pc, #316]	; (8006e8c <_strtod_l+0x5a4>)
 8006d50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d54:	4652      	mov	r2, sl
 8006d56:	465b      	mov	r3, fp
 8006d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d5c:	f7f9 fc6c 	bl	8000638 <__aeabi_dmul>
 8006d60:	4682      	mov	sl, r0
 8006d62:	468b      	mov	fp, r1
 8006d64:	f038 080f 	bics.w	r8, r8, #15
 8006d68:	d04f      	beq.n	8006e0a <_strtod_l+0x522>
 8006d6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006d6e:	dd22      	ble.n	8006db6 <_strtod_l+0x4ce>
 8006d70:	2500      	movs	r5, #0
 8006d72:	462e      	mov	r6, r5
 8006d74:	9507      	str	r5, [sp, #28]
 8006d76:	9505      	str	r5, [sp, #20]
 8006d78:	2322      	movs	r3, #34	; 0x22
 8006d7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006e94 <_strtod_l+0x5ac>
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	f04f 0a00 	mov.w	sl, #0
 8006d84:	9b07      	ldr	r3, [sp, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f43f adf2 	beq.w	8006970 <_strtod_l+0x88>
 8006d8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f001 ff88 	bl	8008ca4 <_Bfree>
 8006d94:	9905      	ldr	r1, [sp, #20]
 8006d96:	4620      	mov	r0, r4
 8006d98:	f001 ff84 	bl	8008ca4 <_Bfree>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f001 ff80 	bl	8008ca4 <_Bfree>
 8006da4:	9907      	ldr	r1, [sp, #28]
 8006da6:	4620      	mov	r0, r4
 8006da8:	f001 ff7c 	bl	8008ca4 <_Bfree>
 8006dac:	4629      	mov	r1, r5
 8006dae:	4620      	mov	r0, r4
 8006db0:	f001 ff78 	bl	8008ca4 <_Bfree>
 8006db4:	e5dc      	b.n	8006970 <_strtod_l+0x88>
 8006db6:	4b36      	ldr	r3, [pc, #216]	; (8006e90 <_strtod_l+0x5a8>)
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	4659      	mov	r1, fp
 8006dc4:	4699      	mov	r9, r3
 8006dc6:	f1b8 0f01 	cmp.w	r8, #1
 8006dca:	dc21      	bgt.n	8006e10 <_strtod_l+0x528>
 8006dcc:	b10b      	cbz	r3, 8006dd2 <_strtod_l+0x4ea>
 8006dce:	4682      	mov	sl, r0
 8006dd0:	468b      	mov	fp, r1
 8006dd2:	4b2f      	ldr	r3, [pc, #188]	; (8006e90 <_strtod_l+0x5a8>)
 8006dd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006dd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006ddc:	4652      	mov	r2, sl
 8006dde:	465b      	mov	r3, fp
 8006de0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006de4:	f7f9 fc28 	bl	8000638 <__aeabi_dmul>
 8006de8:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <_strtod_l+0x5ac>)
 8006dea:	460a      	mov	r2, r1
 8006dec:	400b      	ands	r3, r1
 8006dee:	492a      	ldr	r1, [pc, #168]	; (8006e98 <_strtod_l+0x5b0>)
 8006df0:	428b      	cmp	r3, r1
 8006df2:	4682      	mov	sl, r0
 8006df4:	d8bc      	bhi.n	8006d70 <_strtod_l+0x488>
 8006df6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006dfa:	428b      	cmp	r3, r1
 8006dfc:	bf86      	itte	hi
 8006dfe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006e9c <_strtod_l+0x5b4>
 8006e02:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	e084      	b.n	8006f1a <_strtod_l+0x632>
 8006e10:	f018 0f01 	tst.w	r8, #1
 8006e14:	d005      	beq.n	8006e22 <_strtod_l+0x53a>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f7f9 fc0c 	bl	8000638 <__aeabi_dmul>
 8006e20:	2301      	movs	r3, #1
 8006e22:	9a04      	ldr	r2, [sp, #16]
 8006e24:	3208      	adds	r2, #8
 8006e26:	f109 0901 	add.w	r9, r9, #1
 8006e2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e2e:	9204      	str	r2, [sp, #16]
 8006e30:	e7c9      	b.n	8006dc6 <_strtod_l+0x4de>
 8006e32:	d0ea      	beq.n	8006e0a <_strtod_l+0x522>
 8006e34:	f1c8 0800 	rsb	r8, r8, #0
 8006e38:	f018 020f 	ands.w	r2, r8, #15
 8006e3c:	d00a      	beq.n	8006e54 <_strtod_l+0x56c>
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <_strtod_l+0x5a4>)
 8006e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e44:	4650      	mov	r0, sl
 8006e46:	4659      	mov	r1, fp
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f7f9 fd1e 	bl	800088c <__aeabi_ddiv>
 8006e50:	4682      	mov	sl, r0
 8006e52:	468b      	mov	fp, r1
 8006e54:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e58:	d0d7      	beq.n	8006e0a <_strtod_l+0x522>
 8006e5a:	f1b8 0f1f 	cmp.w	r8, #31
 8006e5e:	dd1f      	ble.n	8006ea0 <_strtod_l+0x5b8>
 8006e60:	2500      	movs	r5, #0
 8006e62:	462e      	mov	r6, r5
 8006e64:	9507      	str	r5, [sp, #28]
 8006e66:	9505      	str	r5, [sp, #20]
 8006e68:	2322      	movs	r3, #34	; 0x22
 8006e6a:	f04f 0a00 	mov.w	sl, #0
 8006e6e:	f04f 0b00 	mov.w	fp, #0
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	e786      	b.n	8006d84 <_strtod_l+0x49c>
 8006e76:	bf00      	nop
 8006e78:	0800a49d 	.word	0x0800a49d
 8006e7c:	0800a4e0 	.word	0x0800a4e0
 8006e80:	0800a495 	.word	0x0800a495
 8006e84:	0800a624 	.word	0x0800a624
 8006e88:	0800a938 	.word	0x0800a938
 8006e8c:	0800a818 	.word	0x0800a818
 8006e90:	0800a7f0 	.word	0x0800a7f0
 8006e94:	7ff00000 	.word	0x7ff00000
 8006e98:	7ca00000 	.word	0x7ca00000
 8006e9c:	7fefffff 	.word	0x7fefffff
 8006ea0:	f018 0310 	ands.w	r3, r8, #16
 8006ea4:	bf18      	it	ne
 8006ea6:	236a      	movne	r3, #106	; 0x6a
 8006ea8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007258 <_strtod_l+0x970>
 8006eac:	9304      	str	r3, [sp, #16]
 8006eae:	4650      	mov	r0, sl
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f018 0f01 	tst.w	r8, #1
 8006eb8:	d004      	beq.n	8006ec4 <_strtod_l+0x5dc>
 8006eba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ebe:	f7f9 fbbb 	bl	8000638 <__aeabi_dmul>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006ec8:	f109 0908 	add.w	r9, r9, #8
 8006ecc:	d1f2      	bne.n	8006eb4 <_strtod_l+0x5cc>
 8006ece:	b10b      	cbz	r3, 8006ed4 <_strtod_l+0x5ec>
 8006ed0:	4682      	mov	sl, r0
 8006ed2:	468b      	mov	fp, r1
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	b1c3      	cbz	r3, 8006f0a <_strtod_l+0x622>
 8006ed8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006edc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	4659      	mov	r1, fp
 8006ee4:	dd11      	ble.n	8006f0a <_strtod_l+0x622>
 8006ee6:	2b1f      	cmp	r3, #31
 8006ee8:	f340 8124 	ble.w	8007134 <_strtod_l+0x84c>
 8006eec:	2b34      	cmp	r3, #52	; 0x34
 8006eee:	bfde      	ittt	le
 8006ef0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006ef4:	f04f 33ff 	movle.w	r3, #4294967295
 8006ef8:	fa03 f202 	lslle.w	r2, r3, r2
 8006efc:	f04f 0a00 	mov.w	sl, #0
 8006f00:	bfcc      	ite	gt
 8006f02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006f06:	ea02 0b01 	andle.w	fp, r2, r1
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4650      	mov	r0, sl
 8006f10:	4659      	mov	r1, fp
 8006f12:	f7f9 fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d1a2      	bne.n	8006e60 <_strtod_l+0x578>
 8006f1a:	9b07      	ldr	r3, [sp, #28]
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	9908      	ldr	r1, [sp, #32]
 8006f20:	462b      	mov	r3, r5
 8006f22:	463a      	mov	r2, r7
 8006f24:	4620      	mov	r0, r4
 8006f26:	f001 ff25 	bl	8008d74 <__s2b>
 8006f2a:	9007      	str	r0, [sp, #28]
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f43f af1f 	beq.w	8006d70 <_strtod_l+0x488>
 8006f32:	9b05      	ldr	r3, [sp, #20]
 8006f34:	1b9e      	subs	r6, r3, r6
 8006f36:	9b06      	ldr	r3, [sp, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfb4      	ite	lt
 8006f3c:	4633      	movlt	r3, r6
 8006f3e:	2300      	movge	r3, #0
 8006f40:	930c      	str	r3, [sp, #48]	; 0x30
 8006f42:	9b06      	ldr	r3, [sp, #24]
 8006f44:	2500      	movs	r5, #0
 8006f46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f4a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f4c:	462e      	mov	r6, r5
 8006f4e:	9b07      	ldr	r3, [sp, #28]
 8006f50:	4620      	mov	r0, r4
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	f001 fe66 	bl	8008c24 <_Balloc>
 8006f58:	9005      	str	r0, [sp, #20]
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	f43f af0c 	beq.w	8006d78 <_strtod_l+0x490>
 8006f60:	9b07      	ldr	r3, [sp, #28]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	3202      	adds	r2, #2
 8006f66:	f103 010c 	add.w	r1, r3, #12
 8006f6a:	0092      	lsls	r2, r2, #2
 8006f6c:	300c      	adds	r0, #12
 8006f6e:	f001 fe4b 	bl	8008c08 <memcpy>
 8006f72:	ec4b ab10 	vmov	d0, sl, fp
 8006f76:	aa1a      	add	r2, sp, #104	; 0x68
 8006f78:	a919      	add	r1, sp, #100	; 0x64
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f002 fa40 	bl	8009400 <__d2b>
 8006f80:	ec4b ab18 	vmov	d8, sl, fp
 8006f84:	9018      	str	r0, [sp, #96]	; 0x60
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f43f aef6 	beq.w	8006d78 <_strtod_l+0x490>
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f001 ff8a 	bl	8008ea8 <__i2b>
 8006f94:	4606      	mov	r6, r0
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f aeee 	beq.w	8006d78 <_strtod_l+0x490>
 8006f9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f9e:	9904      	ldr	r1, [sp, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bfab      	itete	ge
 8006fa4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006fa6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006fa8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006faa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006fae:	bfac      	ite	ge
 8006fb0:	eb03 0902 	addge.w	r9, r3, r2
 8006fb4:	1ad7      	sublt	r7, r2, r3
 8006fb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fb8:	eba3 0801 	sub.w	r8, r3, r1
 8006fbc:	4490      	add	r8, r2
 8006fbe:	4ba1      	ldr	r3, [pc, #644]	; (8007244 <_strtod_l+0x95c>)
 8006fc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fc4:	4598      	cmp	r8, r3
 8006fc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fca:	f280 80c7 	bge.w	800715c <_strtod_l+0x874>
 8006fce:	eba3 0308 	sub.w	r3, r3, r8
 8006fd2:	2b1f      	cmp	r3, #31
 8006fd4:	eba2 0203 	sub.w	r2, r2, r3
 8006fd8:	f04f 0101 	mov.w	r1, #1
 8006fdc:	f300 80b1 	bgt.w	8007142 <_strtod_l+0x85a>
 8006fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe4:	930d      	str	r3, [sp, #52]	; 0x34
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9308      	str	r3, [sp, #32]
 8006fea:	eb09 0802 	add.w	r8, r9, r2
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	45c1      	cmp	r9, r8
 8006ff2:	4417      	add	r7, r2
 8006ff4:	441f      	add	r7, r3
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	bfa8      	it	ge
 8006ffa:	4643      	movge	r3, r8
 8006ffc:	42bb      	cmp	r3, r7
 8006ffe:	bfa8      	it	ge
 8007000:	463b      	movge	r3, r7
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfc2      	ittt	gt
 8007006:	eba8 0803 	subgt.w	r8, r8, r3
 800700a:	1aff      	subgt	r7, r7, r3
 800700c:	eba9 0903 	subgt.w	r9, r9, r3
 8007010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007012:	2b00      	cmp	r3, #0
 8007014:	dd17      	ble.n	8007046 <_strtod_l+0x75e>
 8007016:	4631      	mov	r1, r6
 8007018:	461a      	mov	r2, r3
 800701a:	4620      	mov	r0, r4
 800701c:	f002 f804 	bl	8009028 <__pow5mult>
 8007020:	4606      	mov	r6, r0
 8007022:	2800      	cmp	r0, #0
 8007024:	f43f aea8 	beq.w	8006d78 <_strtod_l+0x490>
 8007028:	4601      	mov	r1, r0
 800702a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800702c:	4620      	mov	r0, r4
 800702e:	f001 ff51 	bl	8008ed4 <__multiply>
 8007032:	900b      	str	r0, [sp, #44]	; 0x2c
 8007034:	2800      	cmp	r0, #0
 8007036:	f43f ae9f 	beq.w	8006d78 <_strtod_l+0x490>
 800703a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800703c:	4620      	mov	r0, r4
 800703e:	f001 fe31 	bl	8008ca4 <_Bfree>
 8007042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007044:	9318      	str	r3, [sp, #96]	; 0x60
 8007046:	f1b8 0f00 	cmp.w	r8, #0
 800704a:	f300 808c 	bgt.w	8007166 <_strtod_l+0x87e>
 800704e:	9b06      	ldr	r3, [sp, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dd08      	ble.n	8007066 <_strtod_l+0x77e>
 8007054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007056:	9905      	ldr	r1, [sp, #20]
 8007058:	4620      	mov	r0, r4
 800705a:	f001 ffe5 	bl	8009028 <__pow5mult>
 800705e:	9005      	str	r0, [sp, #20]
 8007060:	2800      	cmp	r0, #0
 8007062:	f43f ae89 	beq.w	8006d78 <_strtod_l+0x490>
 8007066:	2f00      	cmp	r7, #0
 8007068:	dd08      	ble.n	800707c <_strtod_l+0x794>
 800706a:	9905      	ldr	r1, [sp, #20]
 800706c:	463a      	mov	r2, r7
 800706e:	4620      	mov	r0, r4
 8007070:	f002 f834 	bl	80090dc <__lshift>
 8007074:	9005      	str	r0, [sp, #20]
 8007076:	2800      	cmp	r0, #0
 8007078:	f43f ae7e 	beq.w	8006d78 <_strtod_l+0x490>
 800707c:	f1b9 0f00 	cmp.w	r9, #0
 8007080:	dd08      	ble.n	8007094 <_strtod_l+0x7ac>
 8007082:	4631      	mov	r1, r6
 8007084:	464a      	mov	r2, r9
 8007086:	4620      	mov	r0, r4
 8007088:	f002 f828 	bl	80090dc <__lshift>
 800708c:	4606      	mov	r6, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	f43f ae72 	beq.w	8006d78 <_strtod_l+0x490>
 8007094:	9a05      	ldr	r2, [sp, #20]
 8007096:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007098:	4620      	mov	r0, r4
 800709a:	f002 f8ab 	bl	80091f4 <__mdiff>
 800709e:	4605      	mov	r5, r0
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f43f ae69 	beq.w	8006d78 <_strtod_l+0x490>
 80070a6:	68c3      	ldr	r3, [r0, #12]
 80070a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80070aa:	2300      	movs	r3, #0
 80070ac:	60c3      	str	r3, [r0, #12]
 80070ae:	4631      	mov	r1, r6
 80070b0:	f002 f884 	bl	80091bc <__mcmp>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	da60      	bge.n	800717a <_strtod_l+0x892>
 80070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ba:	ea53 030a 	orrs.w	r3, r3, sl
 80070be:	f040 8082 	bne.w	80071c6 <_strtod_l+0x8de>
 80070c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d17d      	bne.n	80071c6 <_strtod_l+0x8de>
 80070ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070ce:	0d1b      	lsrs	r3, r3, #20
 80070d0:	051b      	lsls	r3, r3, #20
 80070d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80070d6:	d976      	bls.n	80071c6 <_strtod_l+0x8de>
 80070d8:	696b      	ldr	r3, [r5, #20]
 80070da:	b913      	cbnz	r3, 80070e2 <_strtod_l+0x7fa>
 80070dc:	692b      	ldr	r3, [r5, #16]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	dd71      	ble.n	80071c6 <_strtod_l+0x8de>
 80070e2:	4629      	mov	r1, r5
 80070e4:	2201      	movs	r2, #1
 80070e6:	4620      	mov	r0, r4
 80070e8:	f001 fff8 	bl	80090dc <__lshift>
 80070ec:	4631      	mov	r1, r6
 80070ee:	4605      	mov	r5, r0
 80070f0:	f002 f864 	bl	80091bc <__mcmp>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	dd66      	ble.n	80071c6 <_strtod_l+0x8de>
 80070f8:	9904      	ldr	r1, [sp, #16]
 80070fa:	4a53      	ldr	r2, [pc, #332]	; (8007248 <_strtod_l+0x960>)
 80070fc:	465b      	mov	r3, fp
 80070fe:	2900      	cmp	r1, #0
 8007100:	f000 8081 	beq.w	8007206 <_strtod_l+0x91e>
 8007104:	ea02 010b 	and.w	r1, r2, fp
 8007108:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800710c:	dc7b      	bgt.n	8007206 <_strtod_l+0x91e>
 800710e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007112:	f77f aea9 	ble.w	8006e68 <_strtod_l+0x580>
 8007116:	4b4d      	ldr	r3, [pc, #308]	; (800724c <_strtod_l+0x964>)
 8007118:	4650      	mov	r0, sl
 800711a:	4659      	mov	r1, fp
 800711c:	2200      	movs	r2, #0
 800711e:	f7f9 fa8b 	bl	8000638 <__aeabi_dmul>
 8007122:	460b      	mov	r3, r1
 8007124:	4303      	orrs	r3, r0
 8007126:	bf08      	it	eq
 8007128:	2322      	moveq	r3, #34	; 0x22
 800712a:	4682      	mov	sl, r0
 800712c:	468b      	mov	fp, r1
 800712e:	bf08      	it	eq
 8007130:	6023      	streq	r3, [r4, #0]
 8007132:	e62b      	b.n	8006d8c <_strtod_l+0x4a4>
 8007134:	f04f 32ff 	mov.w	r2, #4294967295
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	ea03 0a0a 	and.w	sl, r3, sl
 8007140:	e6e3      	b.n	8006f0a <_strtod_l+0x622>
 8007142:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007146:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800714a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800714e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007152:	fa01 f308 	lsl.w	r3, r1, r8
 8007156:	9308      	str	r3, [sp, #32]
 8007158:	910d      	str	r1, [sp, #52]	; 0x34
 800715a:	e746      	b.n	8006fea <_strtod_l+0x702>
 800715c:	2300      	movs	r3, #0
 800715e:	9308      	str	r3, [sp, #32]
 8007160:	2301      	movs	r3, #1
 8007162:	930d      	str	r3, [sp, #52]	; 0x34
 8007164:	e741      	b.n	8006fea <_strtod_l+0x702>
 8007166:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007168:	4642      	mov	r2, r8
 800716a:	4620      	mov	r0, r4
 800716c:	f001 ffb6 	bl	80090dc <__lshift>
 8007170:	9018      	str	r0, [sp, #96]	; 0x60
 8007172:	2800      	cmp	r0, #0
 8007174:	f47f af6b 	bne.w	800704e <_strtod_l+0x766>
 8007178:	e5fe      	b.n	8006d78 <_strtod_l+0x490>
 800717a:	465f      	mov	r7, fp
 800717c:	d16e      	bne.n	800725c <_strtod_l+0x974>
 800717e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007180:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007184:	b342      	cbz	r2, 80071d8 <_strtod_l+0x8f0>
 8007186:	4a32      	ldr	r2, [pc, #200]	; (8007250 <_strtod_l+0x968>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d128      	bne.n	80071de <_strtod_l+0x8f6>
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	4651      	mov	r1, sl
 8007190:	b1eb      	cbz	r3, 80071ce <_strtod_l+0x8e6>
 8007192:	4b2d      	ldr	r3, [pc, #180]	; (8007248 <_strtod_l+0x960>)
 8007194:	403b      	ands	r3, r7
 8007196:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	d819      	bhi.n	80071d4 <_strtod_l+0x8ec>
 80071a0:	0d1b      	lsrs	r3, r3, #20
 80071a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	4299      	cmp	r1, r3
 80071ac:	d117      	bne.n	80071de <_strtod_l+0x8f6>
 80071ae:	4b29      	ldr	r3, [pc, #164]	; (8007254 <_strtod_l+0x96c>)
 80071b0:	429f      	cmp	r7, r3
 80071b2:	d102      	bne.n	80071ba <_strtod_l+0x8d2>
 80071b4:	3101      	adds	r1, #1
 80071b6:	f43f addf 	beq.w	8006d78 <_strtod_l+0x490>
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <_strtod_l+0x960>)
 80071bc:	403b      	ands	r3, r7
 80071be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80071c2:	f04f 0a00 	mov.w	sl, #0
 80071c6:	9b04      	ldr	r3, [sp, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1a4      	bne.n	8007116 <_strtod_l+0x82e>
 80071cc:	e5de      	b.n	8006d8c <_strtod_l+0x4a4>
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295
 80071d2:	e7ea      	b.n	80071aa <_strtod_l+0x8c2>
 80071d4:	4613      	mov	r3, r2
 80071d6:	e7e8      	b.n	80071aa <_strtod_l+0x8c2>
 80071d8:	ea53 030a 	orrs.w	r3, r3, sl
 80071dc:	d08c      	beq.n	80070f8 <_strtod_l+0x810>
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	b1db      	cbz	r3, 800721a <_strtod_l+0x932>
 80071e2:	423b      	tst	r3, r7
 80071e4:	d0ef      	beq.n	80071c6 <_strtod_l+0x8de>
 80071e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e8:	9a04      	ldr	r2, [sp, #16]
 80071ea:	4650      	mov	r0, sl
 80071ec:	4659      	mov	r1, fp
 80071ee:	b1c3      	cbz	r3, 8007222 <_strtod_l+0x93a>
 80071f0:	f7ff fb5c 	bl	80068ac <sulp>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	ec51 0b18 	vmov	r0, r1, d8
 80071fc:	f7f9 f866 	bl	80002cc <__adddf3>
 8007200:	4682      	mov	sl, r0
 8007202:	468b      	mov	fp, r1
 8007204:	e7df      	b.n	80071c6 <_strtod_l+0x8de>
 8007206:	4013      	ands	r3, r2
 8007208:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800720c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007210:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007214:	f04f 3aff 	mov.w	sl, #4294967295
 8007218:	e7d5      	b.n	80071c6 <_strtod_l+0x8de>
 800721a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721c:	ea13 0f0a 	tst.w	r3, sl
 8007220:	e7e0      	b.n	80071e4 <_strtod_l+0x8fc>
 8007222:	f7ff fb43 	bl	80068ac <sulp>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	ec51 0b18 	vmov	r0, r1, d8
 800722e:	f7f9 f84b 	bl	80002c8 <__aeabi_dsub>
 8007232:	2200      	movs	r2, #0
 8007234:	2300      	movs	r3, #0
 8007236:	4682      	mov	sl, r0
 8007238:	468b      	mov	fp, r1
 800723a:	f7f9 fc65 	bl	8000b08 <__aeabi_dcmpeq>
 800723e:	2800      	cmp	r0, #0
 8007240:	d0c1      	beq.n	80071c6 <_strtod_l+0x8de>
 8007242:	e611      	b.n	8006e68 <_strtod_l+0x580>
 8007244:	fffffc02 	.word	0xfffffc02
 8007248:	7ff00000 	.word	0x7ff00000
 800724c:	39500000 	.word	0x39500000
 8007250:	000fffff 	.word	0x000fffff
 8007254:	7fefffff 	.word	0x7fefffff
 8007258:	0800a4f8 	.word	0x0800a4f8
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	f002 f92a 	bl	80094b8 <__ratio>
 8007264:	ec59 8b10 	vmov	r8, r9, d0
 8007268:	ee10 0a10 	vmov	r0, s0
 800726c:	2200      	movs	r2, #0
 800726e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007272:	4649      	mov	r1, r9
 8007274:	f7f9 fc5c 	bl	8000b30 <__aeabi_dcmple>
 8007278:	2800      	cmp	r0, #0
 800727a:	d07a      	beq.n	8007372 <_strtod_l+0xa8a>
 800727c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d04a      	beq.n	8007318 <_strtod_l+0xa30>
 8007282:	4b95      	ldr	r3, [pc, #596]	; (80074d8 <_strtod_l+0xbf0>)
 8007284:	2200      	movs	r2, #0
 8007286:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800728a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80074d8 <_strtod_l+0xbf0>
 800728e:	f04f 0800 	mov.w	r8, #0
 8007292:	4b92      	ldr	r3, [pc, #584]	; (80074dc <_strtod_l+0xbf4>)
 8007294:	403b      	ands	r3, r7
 8007296:	930d      	str	r3, [sp, #52]	; 0x34
 8007298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800729a:	4b91      	ldr	r3, [pc, #580]	; (80074e0 <_strtod_l+0xbf8>)
 800729c:	429a      	cmp	r2, r3
 800729e:	f040 80b0 	bne.w	8007402 <_strtod_l+0xb1a>
 80072a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80072aa:	ec4b ab10 	vmov	d0, sl, fp
 80072ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072b2:	f002 f829 	bl	8009308 <__ulp>
 80072b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072ba:	ec53 2b10 	vmov	r2, r3, d0
 80072be:	f7f9 f9bb 	bl	8000638 <__aeabi_dmul>
 80072c2:	4652      	mov	r2, sl
 80072c4:	465b      	mov	r3, fp
 80072c6:	f7f9 f801 	bl	80002cc <__adddf3>
 80072ca:	460b      	mov	r3, r1
 80072cc:	4983      	ldr	r1, [pc, #524]	; (80074dc <_strtod_l+0xbf4>)
 80072ce:	4a85      	ldr	r2, [pc, #532]	; (80074e4 <_strtod_l+0xbfc>)
 80072d0:	4019      	ands	r1, r3
 80072d2:	4291      	cmp	r1, r2
 80072d4:	4682      	mov	sl, r0
 80072d6:	d960      	bls.n	800739a <_strtod_l+0xab2>
 80072d8:	ee18 3a90 	vmov	r3, s17
 80072dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d104      	bne.n	80072ee <_strtod_l+0xa06>
 80072e4:	ee18 3a10 	vmov	r3, s16
 80072e8:	3301      	adds	r3, #1
 80072ea:	f43f ad45 	beq.w	8006d78 <_strtod_l+0x490>
 80072ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80074f0 <_strtod_l+0xc08>
 80072f2:	f04f 3aff 	mov.w	sl, #4294967295
 80072f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072f8:	4620      	mov	r0, r4
 80072fa:	f001 fcd3 	bl	8008ca4 <_Bfree>
 80072fe:	9905      	ldr	r1, [sp, #20]
 8007300:	4620      	mov	r0, r4
 8007302:	f001 fccf 	bl	8008ca4 <_Bfree>
 8007306:	4631      	mov	r1, r6
 8007308:	4620      	mov	r0, r4
 800730a:	f001 fccb 	bl	8008ca4 <_Bfree>
 800730e:	4629      	mov	r1, r5
 8007310:	4620      	mov	r0, r4
 8007312:	f001 fcc7 	bl	8008ca4 <_Bfree>
 8007316:	e61a      	b.n	8006f4e <_strtod_l+0x666>
 8007318:	f1ba 0f00 	cmp.w	sl, #0
 800731c:	d11b      	bne.n	8007356 <_strtod_l+0xa6e>
 800731e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007322:	b9f3      	cbnz	r3, 8007362 <_strtod_l+0xa7a>
 8007324:	4b6c      	ldr	r3, [pc, #432]	; (80074d8 <_strtod_l+0xbf0>)
 8007326:	2200      	movs	r2, #0
 8007328:	4640      	mov	r0, r8
 800732a:	4649      	mov	r1, r9
 800732c:	f7f9 fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8007330:	b9d0      	cbnz	r0, 8007368 <_strtod_l+0xa80>
 8007332:	4640      	mov	r0, r8
 8007334:	4649      	mov	r1, r9
 8007336:	4b6c      	ldr	r3, [pc, #432]	; (80074e8 <_strtod_l+0xc00>)
 8007338:	2200      	movs	r2, #0
 800733a:	f7f9 f97d 	bl	8000638 <__aeabi_dmul>
 800733e:	4680      	mov	r8, r0
 8007340:	4689      	mov	r9, r1
 8007342:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007346:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800734a:	9315      	str	r3, [sp, #84]	; 0x54
 800734c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007354:	e79d      	b.n	8007292 <_strtod_l+0x9aa>
 8007356:	f1ba 0f01 	cmp.w	sl, #1
 800735a:	d102      	bne.n	8007362 <_strtod_l+0xa7a>
 800735c:	2f00      	cmp	r7, #0
 800735e:	f43f ad83 	beq.w	8006e68 <_strtod_l+0x580>
 8007362:	4b62      	ldr	r3, [pc, #392]	; (80074ec <_strtod_l+0xc04>)
 8007364:	2200      	movs	r2, #0
 8007366:	e78e      	b.n	8007286 <_strtod_l+0x99e>
 8007368:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80074e8 <_strtod_l+0xc00>
 800736c:	f04f 0800 	mov.w	r8, #0
 8007370:	e7e7      	b.n	8007342 <_strtod_l+0xa5a>
 8007372:	4b5d      	ldr	r3, [pc, #372]	; (80074e8 <_strtod_l+0xc00>)
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	2200      	movs	r2, #0
 800737a:	f7f9 f95d 	bl	8000638 <__aeabi_dmul>
 800737e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007380:	4680      	mov	r8, r0
 8007382:	4689      	mov	r9, r1
 8007384:	b933      	cbnz	r3, 8007394 <_strtod_l+0xaac>
 8007386:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800738a:	900e      	str	r0, [sp, #56]	; 0x38
 800738c:	930f      	str	r3, [sp, #60]	; 0x3c
 800738e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007392:	e7dd      	b.n	8007350 <_strtod_l+0xa68>
 8007394:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007398:	e7f9      	b.n	800738e <_strtod_l+0xaa6>
 800739a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1a8      	bne.n	80072f6 <_strtod_l+0xa0e>
 80073a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073aa:	0d1b      	lsrs	r3, r3, #20
 80073ac:	051b      	lsls	r3, r3, #20
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d1a1      	bne.n	80072f6 <_strtod_l+0xa0e>
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f9 fcef 	bl	8000d98 <__aeabi_d2lz>
 80073ba:	f7f9 f90f 	bl	80005dc <__aeabi_l2d>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4640      	mov	r0, r8
 80073c4:	4649      	mov	r1, r9
 80073c6:	f7f8 ff7f 	bl	80002c8 <__aeabi_dsub>
 80073ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073d0:	ea43 030a 	orr.w	r3, r3, sl
 80073d4:	4313      	orrs	r3, r2
 80073d6:	4680      	mov	r8, r0
 80073d8:	4689      	mov	r9, r1
 80073da:	d055      	beq.n	8007488 <_strtod_l+0xba0>
 80073dc:	a336      	add	r3, pc, #216	; (adr r3, 80074b8 <_strtod_l+0xbd0>)
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f7f9 fb9b 	bl	8000b1c <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f47f acd0 	bne.w	8006d8c <_strtod_l+0x4a4>
 80073ec:	a334      	add	r3, pc, #208	; (adr r3, 80074c0 <_strtod_l+0xbd8>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f9 fbaf 	bl	8000b58 <__aeabi_dcmpgt>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f43f af7b 	beq.w	80072f6 <_strtod_l+0xa0e>
 8007400:	e4c4      	b.n	8006d8c <_strtod_l+0x4a4>
 8007402:	9b04      	ldr	r3, [sp, #16]
 8007404:	b333      	cbz	r3, 8007454 <_strtod_l+0xb6c>
 8007406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007408:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800740c:	d822      	bhi.n	8007454 <_strtod_l+0xb6c>
 800740e:	a32e      	add	r3, pc, #184	; (adr r3, 80074c8 <_strtod_l+0xbe0>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	4640      	mov	r0, r8
 8007416:	4649      	mov	r1, r9
 8007418:	f7f9 fb8a 	bl	8000b30 <__aeabi_dcmple>
 800741c:	b1a0      	cbz	r0, 8007448 <_strtod_l+0xb60>
 800741e:	4649      	mov	r1, r9
 8007420:	4640      	mov	r0, r8
 8007422:	f7f9 fbe1 	bl	8000be8 <__aeabi_d2uiz>
 8007426:	2801      	cmp	r0, #1
 8007428:	bf38      	it	cc
 800742a:	2001      	movcc	r0, #1
 800742c:	f7f9 f88a 	bl	8000544 <__aeabi_ui2d>
 8007430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007432:	4680      	mov	r8, r0
 8007434:	4689      	mov	r9, r1
 8007436:	bb23      	cbnz	r3, 8007482 <_strtod_l+0xb9a>
 8007438:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800743c:	9010      	str	r0, [sp, #64]	; 0x40
 800743e:	9311      	str	r3, [sp, #68]	; 0x44
 8007440:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007444:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800744c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	9309      	str	r3, [sp, #36]	; 0x24
 8007454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007458:	eeb0 0a48 	vmov.f32	s0, s16
 800745c:	eef0 0a68 	vmov.f32	s1, s17
 8007460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007464:	f001 ff50 	bl	8009308 <__ulp>
 8007468:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800746c:	ec53 2b10 	vmov	r2, r3, d0
 8007470:	f7f9 f8e2 	bl	8000638 <__aeabi_dmul>
 8007474:	ec53 2b18 	vmov	r2, r3, d8
 8007478:	f7f8 ff28 	bl	80002cc <__adddf3>
 800747c:	4682      	mov	sl, r0
 800747e:	468b      	mov	fp, r1
 8007480:	e78d      	b.n	800739e <_strtod_l+0xab6>
 8007482:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007486:	e7db      	b.n	8007440 <_strtod_l+0xb58>
 8007488:	a311      	add	r3, pc, #68	; (adr r3, 80074d0 <_strtod_l+0xbe8>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	f7f9 fb45 	bl	8000b1c <__aeabi_dcmplt>
 8007492:	e7b2      	b.n	80073fa <_strtod_l+0xb12>
 8007494:	2300      	movs	r3, #0
 8007496:	930a      	str	r3, [sp, #40]	; 0x28
 8007498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800749a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	f7ff ba6b 	b.w	8006978 <_strtod_l+0x90>
 80074a2:	2a65      	cmp	r2, #101	; 0x65
 80074a4:	f43f ab5f 	beq.w	8006b66 <_strtod_l+0x27e>
 80074a8:	2a45      	cmp	r2, #69	; 0x45
 80074aa:	f43f ab5c 	beq.w	8006b66 <_strtod_l+0x27e>
 80074ae:	2301      	movs	r3, #1
 80074b0:	f7ff bb94 	b.w	8006bdc <_strtod_l+0x2f4>
 80074b4:	f3af 8000 	nop.w
 80074b8:	94a03595 	.word	0x94a03595
 80074bc:	3fdfffff 	.word	0x3fdfffff
 80074c0:	35afe535 	.word	0x35afe535
 80074c4:	3fe00000 	.word	0x3fe00000
 80074c8:	ffc00000 	.word	0xffc00000
 80074cc:	41dfffff 	.word	0x41dfffff
 80074d0:	94a03595 	.word	0x94a03595
 80074d4:	3fcfffff 	.word	0x3fcfffff
 80074d8:	3ff00000 	.word	0x3ff00000
 80074dc:	7ff00000 	.word	0x7ff00000
 80074e0:	7fe00000 	.word	0x7fe00000
 80074e4:	7c9fffff 	.word	0x7c9fffff
 80074e8:	3fe00000 	.word	0x3fe00000
 80074ec:	bff00000 	.word	0xbff00000
 80074f0:	7fefffff 	.word	0x7fefffff

080074f4 <_strtod_r>:
 80074f4:	4b01      	ldr	r3, [pc, #4]	; (80074fc <_strtod_r+0x8>)
 80074f6:	f7ff b9f7 	b.w	80068e8 <_strtod_l>
 80074fa:	bf00      	nop
 80074fc:	20000074 	.word	0x20000074

08007500 <_strtol_l.constprop.0>:
 8007500:	2b01      	cmp	r3, #1
 8007502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007506:	d001      	beq.n	800750c <_strtol_l.constprop.0+0xc>
 8007508:	2b24      	cmp	r3, #36	; 0x24
 800750a:	d906      	bls.n	800751a <_strtol_l.constprop.0+0x1a>
 800750c:	f7fe fae4 	bl	8005ad8 <__errno>
 8007510:	2316      	movs	r3, #22
 8007512:	6003      	str	r3, [r0, #0]
 8007514:	2000      	movs	r0, #0
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007600 <_strtol_l.constprop.0+0x100>
 800751e:	460d      	mov	r5, r1
 8007520:	462e      	mov	r6, r5
 8007522:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007526:	f814 700c 	ldrb.w	r7, [r4, ip]
 800752a:	f017 0708 	ands.w	r7, r7, #8
 800752e:	d1f7      	bne.n	8007520 <_strtol_l.constprop.0+0x20>
 8007530:	2c2d      	cmp	r4, #45	; 0x2d
 8007532:	d132      	bne.n	800759a <_strtol_l.constprop.0+0x9a>
 8007534:	782c      	ldrb	r4, [r5, #0]
 8007536:	2701      	movs	r7, #1
 8007538:	1cb5      	adds	r5, r6, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d05b      	beq.n	80075f6 <_strtol_l.constprop.0+0xf6>
 800753e:	2b10      	cmp	r3, #16
 8007540:	d109      	bne.n	8007556 <_strtol_l.constprop.0+0x56>
 8007542:	2c30      	cmp	r4, #48	; 0x30
 8007544:	d107      	bne.n	8007556 <_strtol_l.constprop.0+0x56>
 8007546:	782c      	ldrb	r4, [r5, #0]
 8007548:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800754c:	2c58      	cmp	r4, #88	; 0x58
 800754e:	d14d      	bne.n	80075ec <_strtol_l.constprop.0+0xec>
 8007550:	786c      	ldrb	r4, [r5, #1]
 8007552:	2310      	movs	r3, #16
 8007554:	3502      	adds	r5, #2
 8007556:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800755a:	f108 38ff 	add.w	r8, r8, #4294967295
 800755e:	f04f 0c00 	mov.w	ip, #0
 8007562:	fbb8 f9f3 	udiv	r9, r8, r3
 8007566:	4666      	mov	r6, ip
 8007568:	fb03 8a19 	mls	sl, r3, r9, r8
 800756c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007570:	f1be 0f09 	cmp.w	lr, #9
 8007574:	d816      	bhi.n	80075a4 <_strtol_l.constprop.0+0xa4>
 8007576:	4674      	mov	r4, lr
 8007578:	42a3      	cmp	r3, r4
 800757a:	dd24      	ble.n	80075c6 <_strtol_l.constprop.0+0xc6>
 800757c:	f1bc 0f00 	cmp.w	ip, #0
 8007580:	db1e      	blt.n	80075c0 <_strtol_l.constprop.0+0xc0>
 8007582:	45b1      	cmp	r9, r6
 8007584:	d31c      	bcc.n	80075c0 <_strtol_l.constprop.0+0xc0>
 8007586:	d101      	bne.n	800758c <_strtol_l.constprop.0+0x8c>
 8007588:	45a2      	cmp	sl, r4
 800758a:	db19      	blt.n	80075c0 <_strtol_l.constprop.0+0xc0>
 800758c:	fb06 4603 	mla	r6, r6, r3, r4
 8007590:	f04f 0c01 	mov.w	ip, #1
 8007594:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007598:	e7e8      	b.n	800756c <_strtol_l.constprop.0+0x6c>
 800759a:	2c2b      	cmp	r4, #43	; 0x2b
 800759c:	bf04      	itt	eq
 800759e:	782c      	ldrbeq	r4, [r5, #0]
 80075a0:	1cb5      	addeq	r5, r6, #2
 80075a2:	e7ca      	b.n	800753a <_strtol_l.constprop.0+0x3a>
 80075a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80075a8:	f1be 0f19 	cmp.w	lr, #25
 80075ac:	d801      	bhi.n	80075b2 <_strtol_l.constprop.0+0xb2>
 80075ae:	3c37      	subs	r4, #55	; 0x37
 80075b0:	e7e2      	b.n	8007578 <_strtol_l.constprop.0+0x78>
 80075b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80075b6:	f1be 0f19 	cmp.w	lr, #25
 80075ba:	d804      	bhi.n	80075c6 <_strtol_l.constprop.0+0xc6>
 80075bc:	3c57      	subs	r4, #87	; 0x57
 80075be:	e7db      	b.n	8007578 <_strtol_l.constprop.0+0x78>
 80075c0:	f04f 3cff 	mov.w	ip, #4294967295
 80075c4:	e7e6      	b.n	8007594 <_strtol_l.constprop.0+0x94>
 80075c6:	f1bc 0f00 	cmp.w	ip, #0
 80075ca:	da05      	bge.n	80075d8 <_strtol_l.constprop.0+0xd8>
 80075cc:	2322      	movs	r3, #34	; 0x22
 80075ce:	6003      	str	r3, [r0, #0]
 80075d0:	4646      	mov	r6, r8
 80075d2:	b942      	cbnz	r2, 80075e6 <_strtol_l.constprop.0+0xe6>
 80075d4:	4630      	mov	r0, r6
 80075d6:	e79e      	b.n	8007516 <_strtol_l.constprop.0+0x16>
 80075d8:	b107      	cbz	r7, 80075dc <_strtol_l.constprop.0+0xdc>
 80075da:	4276      	negs	r6, r6
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d0f9      	beq.n	80075d4 <_strtol_l.constprop.0+0xd4>
 80075e0:	f1bc 0f00 	cmp.w	ip, #0
 80075e4:	d000      	beq.n	80075e8 <_strtol_l.constprop.0+0xe8>
 80075e6:	1e69      	subs	r1, r5, #1
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	e7f3      	b.n	80075d4 <_strtol_l.constprop.0+0xd4>
 80075ec:	2430      	movs	r4, #48	; 0x30
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1b1      	bne.n	8007556 <_strtol_l.constprop.0+0x56>
 80075f2:	2308      	movs	r3, #8
 80075f4:	e7af      	b.n	8007556 <_strtol_l.constprop.0+0x56>
 80075f6:	2c30      	cmp	r4, #48	; 0x30
 80075f8:	d0a5      	beq.n	8007546 <_strtol_l.constprop.0+0x46>
 80075fa:	230a      	movs	r3, #10
 80075fc:	e7ab      	b.n	8007556 <_strtol_l.constprop.0+0x56>
 80075fe:	bf00      	nop
 8007600:	0800a521 	.word	0x0800a521

08007604 <_strtol_r>:
 8007604:	f7ff bf7c 	b.w	8007500 <_strtol_l.constprop.0>

08007608 <quorem>:
 8007608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	6903      	ldr	r3, [r0, #16]
 800760e:	690c      	ldr	r4, [r1, #16]
 8007610:	42a3      	cmp	r3, r4
 8007612:	4607      	mov	r7, r0
 8007614:	f2c0 8081 	blt.w	800771a <quorem+0x112>
 8007618:	3c01      	subs	r4, #1
 800761a:	f101 0814 	add.w	r8, r1, #20
 800761e:	f100 0514 	add.w	r5, r0, #20
 8007622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800762c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007630:	3301      	adds	r3, #1
 8007632:	429a      	cmp	r2, r3
 8007634:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007638:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800763c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007640:	d331      	bcc.n	80076a6 <quorem+0x9e>
 8007642:	f04f 0e00 	mov.w	lr, #0
 8007646:	4640      	mov	r0, r8
 8007648:	46ac      	mov	ip, r5
 800764a:	46f2      	mov	sl, lr
 800764c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007650:	b293      	uxth	r3, r2
 8007652:	fb06 e303 	mla	r3, r6, r3, lr
 8007656:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800765a:	b29b      	uxth	r3, r3
 800765c:	ebaa 0303 	sub.w	r3, sl, r3
 8007660:	f8dc a000 	ldr.w	sl, [ip]
 8007664:	0c12      	lsrs	r2, r2, #16
 8007666:	fa13 f38a 	uxtah	r3, r3, sl
 800766a:	fb06 e202 	mla	r2, r6, r2, lr
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	9b00      	ldr	r3, [sp, #0]
 8007672:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007676:	b292      	uxth	r2, r2
 8007678:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800767c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007680:	f8bd 3000 	ldrh.w	r3, [sp]
 8007684:	4581      	cmp	r9, r0
 8007686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800768a:	f84c 3b04 	str.w	r3, [ip], #4
 800768e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007692:	d2db      	bcs.n	800764c <quorem+0x44>
 8007694:	f855 300b 	ldr.w	r3, [r5, fp]
 8007698:	b92b      	cbnz	r3, 80076a6 <quorem+0x9e>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	3b04      	subs	r3, #4
 800769e:	429d      	cmp	r5, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	d32e      	bcc.n	8007702 <quorem+0xfa>
 80076a4:	613c      	str	r4, [r7, #16]
 80076a6:	4638      	mov	r0, r7
 80076a8:	f001 fd88 	bl	80091bc <__mcmp>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	db24      	blt.n	80076fa <quorem+0xf2>
 80076b0:	3601      	adds	r6, #1
 80076b2:	4628      	mov	r0, r5
 80076b4:	f04f 0c00 	mov.w	ip, #0
 80076b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80076bc:	f8d0 e000 	ldr.w	lr, [r0]
 80076c0:	b293      	uxth	r3, r2
 80076c2:	ebac 0303 	sub.w	r3, ip, r3
 80076c6:	0c12      	lsrs	r2, r2, #16
 80076c8:	fa13 f38e 	uxtah	r3, r3, lr
 80076cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076da:	45c1      	cmp	r9, r8
 80076dc:	f840 3b04 	str.w	r3, [r0], #4
 80076e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076e4:	d2e8      	bcs.n	80076b8 <quorem+0xb0>
 80076e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ee:	b922      	cbnz	r2, 80076fa <quorem+0xf2>
 80076f0:	3b04      	subs	r3, #4
 80076f2:	429d      	cmp	r5, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	d30a      	bcc.n	800770e <quorem+0x106>
 80076f8:	613c      	str	r4, [r7, #16]
 80076fa:	4630      	mov	r0, r6
 80076fc:	b003      	add	sp, #12
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	3b04      	subs	r3, #4
 8007706:	2a00      	cmp	r2, #0
 8007708:	d1cc      	bne.n	80076a4 <quorem+0x9c>
 800770a:	3c01      	subs	r4, #1
 800770c:	e7c7      	b.n	800769e <quorem+0x96>
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	3b04      	subs	r3, #4
 8007712:	2a00      	cmp	r2, #0
 8007714:	d1f0      	bne.n	80076f8 <quorem+0xf0>
 8007716:	3c01      	subs	r4, #1
 8007718:	e7eb      	b.n	80076f2 <quorem+0xea>
 800771a:	2000      	movs	r0, #0
 800771c:	e7ee      	b.n	80076fc <quorem+0xf4>
	...

08007720 <_dtoa_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	ed2d 8b04 	vpush	{d8-d9}
 8007728:	ec57 6b10 	vmov	r6, r7, d0
 800772c:	b093      	sub	sp, #76	; 0x4c
 800772e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007734:	9106      	str	r1, [sp, #24]
 8007736:	ee10 aa10 	vmov	sl, s0
 800773a:	4604      	mov	r4, r0
 800773c:	9209      	str	r2, [sp, #36]	; 0x24
 800773e:	930c      	str	r3, [sp, #48]	; 0x30
 8007740:	46bb      	mov	fp, r7
 8007742:	b975      	cbnz	r5, 8007762 <_dtoa_r+0x42>
 8007744:	2010      	movs	r0, #16
 8007746:	f001 fa45 	bl	8008bd4 <malloc>
 800774a:	4602      	mov	r2, r0
 800774c:	6260      	str	r0, [r4, #36]	; 0x24
 800774e:	b920      	cbnz	r0, 800775a <_dtoa_r+0x3a>
 8007750:	4ba7      	ldr	r3, [pc, #668]	; (80079f0 <_dtoa_r+0x2d0>)
 8007752:	21ea      	movs	r1, #234	; 0xea
 8007754:	48a7      	ldr	r0, [pc, #668]	; (80079f4 <_dtoa_r+0x2d4>)
 8007756:	f002 fc23 	bl	8009fa0 <__assert_func>
 800775a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800775e:	6005      	str	r5, [r0, #0]
 8007760:	60c5      	str	r5, [r0, #12]
 8007762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	b151      	cbz	r1, 800777e <_dtoa_r+0x5e>
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	604a      	str	r2, [r1, #4]
 800776c:	2301      	movs	r3, #1
 800776e:	4093      	lsls	r3, r2
 8007770:	608b      	str	r3, [r1, #8]
 8007772:	4620      	mov	r0, r4
 8007774:	f001 fa96 	bl	8008ca4 <_Bfree>
 8007778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	1e3b      	subs	r3, r7, #0
 8007780:	bfaa      	itet	ge
 8007782:	2300      	movge	r3, #0
 8007784:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007788:	f8c8 3000 	strge.w	r3, [r8]
 800778c:	4b9a      	ldr	r3, [pc, #616]	; (80079f8 <_dtoa_r+0x2d8>)
 800778e:	bfbc      	itt	lt
 8007790:	2201      	movlt	r2, #1
 8007792:	f8c8 2000 	strlt.w	r2, [r8]
 8007796:	ea33 030b 	bics.w	r3, r3, fp
 800779a:	d11b      	bne.n	80077d4 <_dtoa_r+0xb4>
 800779c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800779e:	f242 730f 	movw	r3, #9999	; 0x270f
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077a8:	4333      	orrs	r3, r6
 80077aa:	f000 8592 	beq.w	80082d2 <_dtoa_r+0xbb2>
 80077ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077b0:	b963      	cbnz	r3, 80077cc <_dtoa_r+0xac>
 80077b2:	4b92      	ldr	r3, [pc, #584]	; (80079fc <_dtoa_r+0x2dc>)
 80077b4:	e022      	b.n	80077fc <_dtoa_r+0xdc>
 80077b6:	4b92      	ldr	r3, [pc, #584]	; (8007a00 <_dtoa_r+0x2e0>)
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	3308      	adds	r3, #8
 80077bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	9801      	ldr	r0, [sp, #4]
 80077c2:	b013      	add	sp, #76	; 0x4c
 80077c4:	ecbd 8b04 	vpop	{d8-d9}
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077cc:	4b8b      	ldr	r3, [pc, #556]	; (80079fc <_dtoa_r+0x2dc>)
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	3303      	adds	r3, #3
 80077d2:	e7f3      	b.n	80077bc <_dtoa_r+0x9c>
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	4650      	mov	r0, sl
 80077da:	4659      	mov	r1, fp
 80077dc:	f7f9 f994 	bl	8000b08 <__aeabi_dcmpeq>
 80077e0:	ec4b ab19 	vmov	d9, sl, fp
 80077e4:	4680      	mov	r8, r0
 80077e6:	b158      	cbz	r0, 8007800 <_dtoa_r+0xe0>
 80077e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ea:	2301      	movs	r3, #1
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 856b 	beq.w	80082cc <_dtoa_r+0xbac>
 80077f6:	4883      	ldr	r0, [pc, #524]	; (8007a04 <_dtoa_r+0x2e4>)
 80077f8:	6018      	str	r0, [r3, #0]
 80077fa:	1e43      	subs	r3, r0, #1
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	e7df      	b.n	80077c0 <_dtoa_r+0xa0>
 8007800:	ec4b ab10 	vmov	d0, sl, fp
 8007804:	aa10      	add	r2, sp, #64	; 0x40
 8007806:	a911      	add	r1, sp, #68	; 0x44
 8007808:	4620      	mov	r0, r4
 800780a:	f001 fdf9 	bl	8009400 <__d2b>
 800780e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007812:	ee08 0a10 	vmov	s16, r0
 8007816:	2d00      	cmp	r5, #0
 8007818:	f000 8084 	beq.w	8007924 <_dtoa_r+0x204>
 800781c:	ee19 3a90 	vmov	r3, s19
 8007820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007824:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007828:	4656      	mov	r6, sl
 800782a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800782e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007832:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007836:	4b74      	ldr	r3, [pc, #464]	; (8007a08 <_dtoa_r+0x2e8>)
 8007838:	2200      	movs	r2, #0
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	f7f8 fd43 	bl	80002c8 <__aeabi_dsub>
 8007842:	a365      	add	r3, pc, #404	; (adr r3, 80079d8 <_dtoa_r+0x2b8>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f8 fef6 	bl	8000638 <__aeabi_dmul>
 800784c:	a364      	add	r3, pc, #400	; (adr r3, 80079e0 <_dtoa_r+0x2c0>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fd3b 	bl	80002cc <__adddf3>
 8007856:	4606      	mov	r6, r0
 8007858:	4628      	mov	r0, r5
 800785a:	460f      	mov	r7, r1
 800785c:	f7f8 fe82 	bl	8000564 <__aeabi_i2d>
 8007860:	a361      	add	r3, pc, #388	; (adr r3, 80079e8 <_dtoa_r+0x2c8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fee7 	bl	8000638 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f8 fd2b 	bl	80002cc <__adddf3>
 8007876:	4606      	mov	r6, r0
 8007878:	460f      	mov	r7, r1
 800787a:	f7f9 f98d 	bl	8000b98 <__aeabi_d2iz>
 800787e:	2200      	movs	r2, #0
 8007880:	9000      	str	r0, [sp, #0]
 8007882:	2300      	movs	r3, #0
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f9 f948 	bl	8000b1c <__aeabi_dcmplt>
 800788c:	b150      	cbz	r0, 80078a4 <_dtoa_r+0x184>
 800788e:	9800      	ldr	r0, [sp, #0]
 8007890:	f7f8 fe68 	bl	8000564 <__aeabi_i2d>
 8007894:	4632      	mov	r2, r6
 8007896:	463b      	mov	r3, r7
 8007898:	f7f9 f936 	bl	8000b08 <__aeabi_dcmpeq>
 800789c:	b910      	cbnz	r0, 80078a4 <_dtoa_r+0x184>
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	9b00      	ldr	r3, [sp, #0]
 80078a6:	2b16      	cmp	r3, #22
 80078a8:	d85a      	bhi.n	8007960 <_dtoa_r+0x240>
 80078aa:	9a00      	ldr	r2, [sp, #0]
 80078ac:	4b57      	ldr	r3, [pc, #348]	; (8007a0c <_dtoa_r+0x2ec>)
 80078ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	ec51 0b19 	vmov	r0, r1, d9
 80078ba:	f7f9 f92f 	bl	8000b1c <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d050      	beq.n	8007964 <_dtoa_r+0x244>
 80078c2:	9b00      	ldr	r3, [sp, #0]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	2300      	movs	r3, #0
 80078ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80078cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ce:	1b5d      	subs	r5, r3, r5
 80078d0:	1e6b      	subs	r3, r5, #1
 80078d2:	9305      	str	r3, [sp, #20]
 80078d4:	bf45      	ittet	mi
 80078d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80078da:	9304      	strmi	r3, [sp, #16]
 80078dc:	2300      	movpl	r3, #0
 80078de:	2300      	movmi	r3, #0
 80078e0:	bf4c      	ite	mi
 80078e2:	9305      	strmi	r3, [sp, #20]
 80078e4:	9304      	strpl	r3, [sp, #16]
 80078e6:	9b00      	ldr	r3, [sp, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	db3d      	blt.n	8007968 <_dtoa_r+0x248>
 80078ec:	9b05      	ldr	r3, [sp, #20]
 80078ee:	9a00      	ldr	r2, [sp, #0]
 80078f0:	920a      	str	r2, [sp, #40]	; 0x28
 80078f2:	4413      	add	r3, r2
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9307      	str	r3, [sp, #28]
 80078fa:	9b06      	ldr	r3, [sp, #24]
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	f200 8089 	bhi.w	8007a14 <_dtoa_r+0x2f4>
 8007902:	2b05      	cmp	r3, #5
 8007904:	bfc4      	itt	gt
 8007906:	3b04      	subgt	r3, #4
 8007908:	9306      	strgt	r3, [sp, #24]
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	f1a3 0302 	sub.w	r3, r3, #2
 8007910:	bfcc      	ite	gt
 8007912:	2500      	movgt	r5, #0
 8007914:	2501      	movle	r5, #1
 8007916:	2b03      	cmp	r3, #3
 8007918:	f200 8087 	bhi.w	8007a2a <_dtoa_r+0x30a>
 800791c:	e8df f003 	tbb	[pc, r3]
 8007920:	59383a2d 	.word	0x59383a2d
 8007924:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007928:	441d      	add	r5, r3
 800792a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800792e:	2b20      	cmp	r3, #32
 8007930:	bfc1      	itttt	gt
 8007932:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007936:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800793a:	fa0b f303 	lslgt.w	r3, fp, r3
 800793e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007942:	bfda      	itte	le
 8007944:	f1c3 0320 	rsble	r3, r3, #32
 8007948:	fa06 f003 	lslle.w	r0, r6, r3
 800794c:	4318      	orrgt	r0, r3
 800794e:	f7f8 fdf9 	bl	8000544 <__aeabi_ui2d>
 8007952:	2301      	movs	r3, #1
 8007954:	4606      	mov	r6, r0
 8007956:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800795a:	3d01      	subs	r5, #1
 800795c:	930e      	str	r3, [sp, #56]	; 0x38
 800795e:	e76a      	b.n	8007836 <_dtoa_r+0x116>
 8007960:	2301      	movs	r3, #1
 8007962:	e7b2      	b.n	80078ca <_dtoa_r+0x1aa>
 8007964:	900b      	str	r0, [sp, #44]	; 0x2c
 8007966:	e7b1      	b.n	80078cc <_dtoa_r+0x1ac>
 8007968:	9b04      	ldr	r3, [sp, #16]
 800796a:	9a00      	ldr	r2, [sp, #0]
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	9304      	str	r3, [sp, #16]
 8007970:	4253      	negs	r3, r2
 8007972:	9307      	str	r3, [sp, #28]
 8007974:	2300      	movs	r3, #0
 8007976:	930a      	str	r3, [sp, #40]	; 0x28
 8007978:	e7bf      	b.n	80078fa <_dtoa_r+0x1da>
 800797a:	2300      	movs	r3, #0
 800797c:	9308      	str	r3, [sp, #32]
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	dc55      	bgt.n	8007a30 <_dtoa_r+0x310>
 8007984:	2301      	movs	r3, #1
 8007986:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800798a:	461a      	mov	r2, r3
 800798c:	9209      	str	r2, [sp, #36]	; 0x24
 800798e:	e00c      	b.n	80079aa <_dtoa_r+0x28a>
 8007990:	2301      	movs	r3, #1
 8007992:	e7f3      	b.n	800797c <_dtoa_r+0x25c>
 8007994:	2300      	movs	r3, #0
 8007996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007998:	9308      	str	r3, [sp, #32]
 800799a:	9b00      	ldr	r3, [sp, #0]
 800799c:	4413      	add	r3, r2
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	3301      	adds	r3, #1
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	9303      	str	r3, [sp, #12]
 80079a6:	bfb8      	it	lt
 80079a8:	2301      	movlt	r3, #1
 80079aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079ac:	2200      	movs	r2, #0
 80079ae:	6042      	str	r2, [r0, #4]
 80079b0:	2204      	movs	r2, #4
 80079b2:	f102 0614 	add.w	r6, r2, #20
 80079b6:	429e      	cmp	r6, r3
 80079b8:	6841      	ldr	r1, [r0, #4]
 80079ba:	d93d      	bls.n	8007a38 <_dtoa_r+0x318>
 80079bc:	4620      	mov	r0, r4
 80079be:	f001 f931 	bl	8008c24 <_Balloc>
 80079c2:	9001      	str	r0, [sp, #4]
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d13b      	bne.n	8007a40 <_dtoa_r+0x320>
 80079c8:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <_dtoa_r+0x2f0>)
 80079ca:	4602      	mov	r2, r0
 80079cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079d0:	e6c0      	b.n	8007754 <_dtoa_r+0x34>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e7df      	b.n	8007996 <_dtoa_r+0x276>
 80079d6:	bf00      	nop
 80079d8:	636f4361 	.word	0x636f4361
 80079dc:	3fd287a7 	.word	0x3fd287a7
 80079e0:	8b60c8b3 	.word	0x8b60c8b3
 80079e4:	3fc68a28 	.word	0x3fc68a28
 80079e8:	509f79fb 	.word	0x509f79fb
 80079ec:	3fd34413 	.word	0x3fd34413
 80079f0:	0800a62e 	.word	0x0800a62e
 80079f4:	0800a645 	.word	0x0800a645
 80079f8:	7ff00000 	.word	0x7ff00000
 80079fc:	0800a62a 	.word	0x0800a62a
 8007a00:	0800a621 	.word	0x0800a621
 8007a04:	0800a4a1 	.word	0x0800a4a1
 8007a08:	3ff80000 	.word	0x3ff80000
 8007a0c:	0800a818 	.word	0x0800a818
 8007a10:	0800a6a0 	.word	0x0800a6a0
 8007a14:	2501      	movs	r5, #1
 8007a16:	2300      	movs	r3, #0
 8007a18:	9306      	str	r3, [sp, #24]
 8007a1a:	9508      	str	r5, [sp, #32]
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a24:	2200      	movs	r2, #0
 8007a26:	2312      	movs	r3, #18
 8007a28:	e7b0      	b.n	800798c <_dtoa_r+0x26c>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	9308      	str	r3, [sp, #32]
 8007a2e:	e7f5      	b.n	8007a1c <_dtoa_r+0x2fc>
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a36:	e7b8      	b.n	80079aa <_dtoa_r+0x28a>
 8007a38:	3101      	adds	r1, #1
 8007a3a:	6041      	str	r1, [r0, #4]
 8007a3c:	0052      	lsls	r2, r2, #1
 8007a3e:	e7b8      	b.n	80079b2 <_dtoa_r+0x292>
 8007a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a42:	9a01      	ldr	r2, [sp, #4]
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	2b0e      	cmp	r3, #14
 8007a4a:	f200 809d 	bhi.w	8007b88 <_dtoa_r+0x468>
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	f000 809a 	beq.w	8007b88 <_dtoa_r+0x468>
 8007a54:	9b00      	ldr	r3, [sp, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dd32      	ble.n	8007ac0 <_dtoa_r+0x3a0>
 8007a5a:	4ab7      	ldr	r2, [pc, #732]	; (8007d38 <_dtoa_r+0x618>)
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a68:	9b00      	ldr	r3, [sp, #0]
 8007a6a:	05d8      	lsls	r0, r3, #23
 8007a6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a70:	d516      	bpl.n	8007aa0 <_dtoa_r+0x380>
 8007a72:	4bb2      	ldr	r3, [pc, #712]	; (8007d3c <_dtoa_r+0x61c>)
 8007a74:	ec51 0b19 	vmov	r0, r1, d9
 8007a78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a7c:	f7f8 ff06 	bl	800088c <__aeabi_ddiv>
 8007a80:	f007 070f 	and.w	r7, r7, #15
 8007a84:	4682      	mov	sl, r0
 8007a86:	468b      	mov	fp, r1
 8007a88:	2503      	movs	r5, #3
 8007a8a:	4eac      	ldr	r6, [pc, #688]	; (8007d3c <_dtoa_r+0x61c>)
 8007a8c:	b957      	cbnz	r7, 8007aa4 <_dtoa_r+0x384>
 8007a8e:	4642      	mov	r2, r8
 8007a90:	464b      	mov	r3, r9
 8007a92:	4650      	mov	r0, sl
 8007a94:	4659      	mov	r1, fp
 8007a96:	f7f8 fef9 	bl	800088c <__aeabi_ddiv>
 8007a9a:	4682      	mov	sl, r0
 8007a9c:	468b      	mov	fp, r1
 8007a9e:	e028      	b.n	8007af2 <_dtoa_r+0x3d2>
 8007aa0:	2502      	movs	r5, #2
 8007aa2:	e7f2      	b.n	8007a8a <_dtoa_r+0x36a>
 8007aa4:	07f9      	lsls	r1, r7, #31
 8007aa6:	d508      	bpl.n	8007aba <_dtoa_r+0x39a>
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ab0:	f7f8 fdc2 	bl	8000638 <__aeabi_dmul>
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	4689      	mov	r9, r1
 8007aba:	107f      	asrs	r7, r7, #1
 8007abc:	3608      	adds	r6, #8
 8007abe:	e7e5      	b.n	8007a8c <_dtoa_r+0x36c>
 8007ac0:	f000 809b 	beq.w	8007bfa <_dtoa_r+0x4da>
 8007ac4:	9b00      	ldr	r3, [sp, #0]
 8007ac6:	4f9d      	ldr	r7, [pc, #628]	; (8007d3c <_dtoa_r+0x61c>)
 8007ac8:	425e      	negs	r6, r3
 8007aca:	4b9b      	ldr	r3, [pc, #620]	; (8007d38 <_dtoa_r+0x618>)
 8007acc:	f006 020f 	and.w	r2, r6, #15
 8007ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	ec51 0b19 	vmov	r0, r1, d9
 8007adc:	f7f8 fdac 	bl	8000638 <__aeabi_dmul>
 8007ae0:	1136      	asrs	r6, r6, #4
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	468b      	mov	fp, r1
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2502      	movs	r5, #2
 8007aea:	2e00      	cmp	r6, #0
 8007aec:	d17a      	bne.n	8007be4 <_dtoa_r+0x4c4>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1d3      	bne.n	8007a9a <_dtoa_r+0x37a>
 8007af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8082 	beq.w	8007bfe <_dtoa_r+0x4de>
 8007afa:	4b91      	ldr	r3, [pc, #580]	; (8007d40 <_dtoa_r+0x620>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	4650      	mov	r0, sl
 8007b00:	4659      	mov	r1, fp
 8007b02:	f7f9 f80b 	bl	8000b1c <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d079      	beq.n	8007bfe <_dtoa_r+0x4de>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d076      	beq.n	8007bfe <_dtoa_r+0x4de>
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dd36      	ble.n	8007b84 <_dtoa_r+0x464>
 8007b16:	9b00      	ldr	r3, [sp, #0]
 8007b18:	4650      	mov	r0, sl
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	1e5f      	subs	r7, r3, #1
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4b88      	ldr	r3, [pc, #544]	; (8007d44 <_dtoa_r+0x624>)
 8007b22:	f7f8 fd89 	bl	8000638 <__aeabi_dmul>
 8007b26:	9e02      	ldr	r6, [sp, #8]
 8007b28:	4682      	mov	sl, r0
 8007b2a:	468b      	mov	fp, r1
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7f8 fd18 	bl	8000564 <__aeabi_i2d>
 8007b34:	4652      	mov	r2, sl
 8007b36:	465b      	mov	r3, fp
 8007b38:	f7f8 fd7e 	bl	8000638 <__aeabi_dmul>
 8007b3c:	4b82      	ldr	r3, [pc, #520]	; (8007d48 <_dtoa_r+0x628>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f7f8 fbc4 	bl	80002cc <__adddf3>
 8007b44:	46d0      	mov	r8, sl
 8007b46:	46d9      	mov	r9, fp
 8007b48:	4682      	mov	sl, r0
 8007b4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	d158      	bne.n	8007c04 <_dtoa_r+0x4e4>
 8007b52:	4b7e      	ldr	r3, [pc, #504]	; (8007d4c <_dtoa_r+0x62c>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	4640      	mov	r0, r8
 8007b58:	4649      	mov	r1, r9
 8007b5a:	f7f8 fbb5 	bl	80002c8 <__aeabi_dsub>
 8007b5e:	4652      	mov	r2, sl
 8007b60:	465b      	mov	r3, fp
 8007b62:	4680      	mov	r8, r0
 8007b64:	4689      	mov	r9, r1
 8007b66:	f7f8 fff7 	bl	8000b58 <__aeabi_dcmpgt>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f040 8295 	bne.w	800809a <_dtoa_r+0x97a>
 8007b70:	4652      	mov	r2, sl
 8007b72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 ffcf 	bl	8000b1c <__aeabi_dcmplt>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f040 8289 	bne.w	8008096 <_dtoa_r+0x976>
 8007b84:	ec5b ab19 	vmov	sl, fp, d9
 8007b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f2c0 8148 	blt.w	8007e20 <_dtoa_r+0x700>
 8007b90:	9a00      	ldr	r2, [sp, #0]
 8007b92:	2a0e      	cmp	r2, #14
 8007b94:	f300 8144 	bgt.w	8007e20 <_dtoa_r+0x700>
 8007b98:	4b67      	ldr	r3, [pc, #412]	; (8007d38 <_dtoa_r+0x618>)
 8007b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f280 80d5 	bge.w	8007d54 <_dtoa_r+0x634>
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f300 80d1 	bgt.w	8007d54 <_dtoa_r+0x634>
 8007bb2:	f040 826f 	bne.w	8008094 <_dtoa_r+0x974>
 8007bb6:	4b65      	ldr	r3, [pc, #404]	; (8007d4c <_dtoa_r+0x62c>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fd3b 	bl	8000638 <__aeabi_dmul>
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	465b      	mov	r3, fp
 8007bc6:	f7f8 ffbd 	bl	8000b44 <__aeabi_dcmpge>
 8007bca:	9e03      	ldr	r6, [sp, #12]
 8007bcc:	4637      	mov	r7, r6
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f040 8245 	bne.w	800805e <_dtoa_r+0x93e>
 8007bd4:	9d01      	ldr	r5, [sp, #4]
 8007bd6:	2331      	movs	r3, #49	; 0x31
 8007bd8:	f805 3b01 	strb.w	r3, [r5], #1
 8007bdc:	9b00      	ldr	r3, [sp, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	e240      	b.n	8008066 <_dtoa_r+0x946>
 8007be4:	07f2      	lsls	r2, r6, #31
 8007be6:	d505      	bpl.n	8007bf4 <_dtoa_r+0x4d4>
 8007be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bec:	f7f8 fd24 	bl	8000638 <__aeabi_dmul>
 8007bf0:	3501      	adds	r5, #1
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	1076      	asrs	r6, r6, #1
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	e777      	b.n	8007aea <_dtoa_r+0x3ca>
 8007bfa:	2502      	movs	r5, #2
 8007bfc:	e779      	b.n	8007af2 <_dtoa_r+0x3d2>
 8007bfe:	9f00      	ldr	r7, [sp, #0]
 8007c00:	9e03      	ldr	r6, [sp, #12]
 8007c02:	e794      	b.n	8007b2e <_dtoa_r+0x40e>
 8007c04:	9901      	ldr	r1, [sp, #4]
 8007c06:	4b4c      	ldr	r3, [pc, #304]	; (8007d38 <_dtoa_r+0x618>)
 8007c08:	4431      	add	r1, r6
 8007c0a:	910d      	str	r1, [sp, #52]	; 0x34
 8007c0c:	9908      	ldr	r1, [sp, #32]
 8007c0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d043      	beq.n	8007ca2 <_dtoa_r+0x582>
 8007c1a:	494d      	ldr	r1, [pc, #308]	; (8007d50 <_dtoa_r+0x630>)
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f7f8 fe35 	bl	800088c <__aeabi_ddiv>
 8007c22:	4652      	mov	r2, sl
 8007c24:	465b      	mov	r3, fp
 8007c26:	f7f8 fb4f 	bl	80002c8 <__aeabi_dsub>
 8007c2a:	9d01      	ldr	r5, [sp, #4]
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	468b      	mov	fp, r1
 8007c30:	4649      	mov	r1, r9
 8007c32:	4640      	mov	r0, r8
 8007c34:	f7f8 ffb0 	bl	8000b98 <__aeabi_d2iz>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	f7f8 fc93 	bl	8000564 <__aeabi_i2d>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	f7f8 fb3f 	bl	80002c8 <__aeabi_dsub>
 8007c4a:	3630      	adds	r6, #48	; 0x30
 8007c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c50:	4652      	mov	r2, sl
 8007c52:	465b      	mov	r3, fp
 8007c54:	4680      	mov	r8, r0
 8007c56:	4689      	mov	r9, r1
 8007c58:	f7f8 ff60 	bl	8000b1c <__aeabi_dcmplt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d163      	bne.n	8007d28 <_dtoa_r+0x608>
 8007c60:	4642      	mov	r2, r8
 8007c62:	464b      	mov	r3, r9
 8007c64:	4936      	ldr	r1, [pc, #216]	; (8007d40 <_dtoa_r+0x620>)
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f8 fb2e 	bl	80002c8 <__aeabi_dsub>
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	465b      	mov	r3, fp
 8007c70:	f7f8 ff54 	bl	8000b1c <__aeabi_dcmplt>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f040 80b5 	bne.w	8007de4 <_dtoa_r+0x6c4>
 8007c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7c:	429d      	cmp	r5, r3
 8007c7e:	d081      	beq.n	8007b84 <_dtoa_r+0x464>
 8007c80:	4b30      	ldr	r3, [pc, #192]	; (8007d44 <_dtoa_r+0x624>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	4650      	mov	r0, sl
 8007c86:	4659      	mov	r1, fp
 8007c88:	f7f8 fcd6 	bl	8000638 <__aeabi_dmul>
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	; (8007d44 <_dtoa_r+0x624>)
 8007c8e:	4682      	mov	sl, r0
 8007c90:	468b      	mov	fp, r1
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	2200      	movs	r2, #0
 8007c98:	f7f8 fcce 	bl	8000638 <__aeabi_dmul>
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	e7c6      	b.n	8007c30 <_dtoa_r+0x510>
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	f7f8 fcc7 	bl	8000638 <__aeabi_dmul>
 8007caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cac:	9d01      	ldr	r5, [sp, #4]
 8007cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb0:	4682      	mov	sl, r0
 8007cb2:	468b      	mov	fp, r1
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	f7f8 ff6e 	bl	8000b98 <__aeabi_d2iz>
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	f7f8 fc51 	bl	8000564 <__aeabi_i2d>
 8007cc2:	3630      	adds	r6, #48	; 0x30
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 fafc 	bl	80002c8 <__aeabi_dsub>
 8007cd0:	f805 6b01 	strb.w	r6, [r5], #1
 8007cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd6:	429d      	cmp	r5, r3
 8007cd8:	4680      	mov	r8, r0
 8007cda:	4689      	mov	r9, r1
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	d124      	bne.n	8007d2c <_dtoa_r+0x60c>
 8007ce2:	4b1b      	ldr	r3, [pc, #108]	; (8007d50 <_dtoa_r+0x630>)
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	4659      	mov	r1, fp
 8007ce8:	f7f8 faf0 	bl	80002cc <__adddf3>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	f7f8 ff30 	bl	8000b58 <__aeabi_dcmpgt>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d173      	bne.n	8007de4 <_dtoa_r+0x6c4>
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	465b      	mov	r3, fp
 8007d00:	4913      	ldr	r1, [pc, #76]	; (8007d50 <_dtoa_r+0x630>)
 8007d02:	2000      	movs	r0, #0
 8007d04:	f7f8 fae0 	bl	80002c8 <__aeabi_dsub>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 ff04 	bl	8000b1c <__aeabi_dcmplt>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f43f af35 	beq.w	8007b84 <_dtoa_r+0x464>
 8007d1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d1c:	1e6b      	subs	r3, r5, #1
 8007d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d24:	2b30      	cmp	r3, #48	; 0x30
 8007d26:	d0f8      	beq.n	8007d1a <_dtoa_r+0x5fa>
 8007d28:	9700      	str	r7, [sp, #0]
 8007d2a:	e049      	b.n	8007dc0 <_dtoa_r+0x6a0>
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <_dtoa_r+0x624>)
 8007d2e:	f7f8 fc83 	bl	8000638 <__aeabi_dmul>
 8007d32:	4680      	mov	r8, r0
 8007d34:	4689      	mov	r9, r1
 8007d36:	e7bd      	b.n	8007cb4 <_dtoa_r+0x594>
 8007d38:	0800a818 	.word	0x0800a818
 8007d3c:	0800a7f0 	.word	0x0800a7f0
 8007d40:	3ff00000 	.word	0x3ff00000
 8007d44:	40240000 	.word	0x40240000
 8007d48:	401c0000 	.word	0x401c0000
 8007d4c:	40140000 	.word	0x40140000
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	9d01      	ldr	r5, [sp, #4]
 8007d56:	4656      	mov	r6, sl
 8007d58:	465f      	mov	r7, fp
 8007d5a:	4642      	mov	r2, r8
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	4630      	mov	r0, r6
 8007d60:	4639      	mov	r1, r7
 8007d62:	f7f8 fd93 	bl	800088c <__aeabi_ddiv>
 8007d66:	f7f8 ff17 	bl	8000b98 <__aeabi_d2iz>
 8007d6a:	4682      	mov	sl, r0
 8007d6c:	f7f8 fbfa 	bl	8000564 <__aeabi_i2d>
 8007d70:	4642      	mov	r2, r8
 8007d72:	464b      	mov	r3, r9
 8007d74:	f7f8 fc60 	bl	8000638 <__aeabi_dmul>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d84:	f7f8 faa0 	bl	80002c8 <__aeabi_dsub>
 8007d88:	f805 6b01 	strb.w	r6, [r5], #1
 8007d8c:	9e01      	ldr	r6, [sp, #4]
 8007d8e:	9f03      	ldr	r7, [sp, #12]
 8007d90:	1bae      	subs	r6, r5, r6
 8007d92:	42b7      	cmp	r7, r6
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	d135      	bne.n	8007e06 <_dtoa_r+0x6e6>
 8007d9a:	f7f8 fa97 	bl	80002cc <__adddf3>
 8007d9e:	4642      	mov	r2, r8
 8007da0:	464b      	mov	r3, r9
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	f7f8 fed7 	bl	8000b58 <__aeabi_dcmpgt>
 8007daa:	b9d0      	cbnz	r0, 8007de2 <_dtoa_r+0x6c2>
 8007dac:	4642      	mov	r2, r8
 8007dae:	464b      	mov	r3, r9
 8007db0:	4630      	mov	r0, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	f7f8 fea8 	bl	8000b08 <__aeabi_dcmpeq>
 8007db8:	b110      	cbz	r0, 8007dc0 <_dtoa_r+0x6a0>
 8007dba:	f01a 0f01 	tst.w	sl, #1
 8007dbe:	d110      	bne.n	8007de2 <_dtoa_r+0x6c2>
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	ee18 1a10 	vmov	r1, s16
 8007dc6:	f000 ff6d 	bl	8008ca4 <_Bfree>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9800      	ldr	r0, [sp, #0]
 8007dce:	702b      	strb	r3, [r5, #0]
 8007dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	6018      	str	r0, [r3, #0]
 8007dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f43f acf1 	beq.w	80077c0 <_dtoa_r+0xa0>
 8007dde:	601d      	str	r5, [r3, #0]
 8007de0:	e4ee      	b.n	80077c0 <_dtoa_r+0xa0>
 8007de2:	9f00      	ldr	r7, [sp, #0]
 8007de4:	462b      	mov	r3, r5
 8007de6:	461d      	mov	r5, r3
 8007de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dec:	2a39      	cmp	r2, #57	; 0x39
 8007dee:	d106      	bne.n	8007dfe <_dtoa_r+0x6de>
 8007df0:	9a01      	ldr	r2, [sp, #4]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d1f7      	bne.n	8007de6 <_dtoa_r+0x6c6>
 8007df6:	9901      	ldr	r1, [sp, #4]
 8007df8:	2230      	movs	r2, #48	; 0x30
 8007dfa:	3701      	adds	r7, #1
 8007dfc:	700a      	strb	r2, [r1, #0]
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	3201      	adds	r2, #1
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	e790      	b.n	8007d28 <_dtoa_r+0x608>
 8007e06:	4ba6      	ldr	r3, [pc, #664]	; (80080a0 <_dtoa_r+0x980>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f7f8 fc15 	bl	8000638 <__aeabi_dmul>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2300      	movs	r3, #0
 8007e12:	4606      	mov	r6, r0
 8007e14:	460f      	mov	r7, r1
 8007e16:	f7f8 fe77 	bl	8000b08 <__aeabi_dcmpeq>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d09d      	beq.n	8007d5a <_dtoa_r+0x63a>
 8007e1e:	e7cf      	b.n	8007dc0 <_dtoa_r+0x6a0>
 8007e20:	9a08      	ldr	r2, [sp, #32]
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	f000 80d7 	beq.w	8007fd6 <_dtoa_r+0x8b6>
 8007e28:	9a06      	ldr	r2, [sp, #24]
 8007e2a:	2a01      	cmp	r2, #1
 8007e2c:	f300 80ba 	bgt.w	8007fa4 <_dtoa_r+0x884>
 8007e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	f000 80b2 	beq.w	8007f9c <_dtoa_r+0x87c>
 8007e38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e3c:	9e07      	ldr	r6, [sp, #28]
 8007e3e:	9d04      	ldr	r5, [sp, #16]
 8007e40:	9a04      	ldr	r2, [sp, #16]
 8007e42:	441a      	add	r2, r3
 8007e44:	9204      	str	r2, [sp, #16]
 8007e46:	9a05      	ldr	r2, [sp, #20]
 8007e48:	2101      	movs	r1, #1
 8007e4a:	441a      	add	r2, r3
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	9205      	str	r2, [sp, #20]
 8007e50:	f001 f82a 	bl	8008ea8 <__i2b>
 8007e54:	4607      	mov	r7, r0
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	dd0c      	ble.n	8007e74 <_dtoa_r+0x754>
 8007e5a:	9b05      	ldr	r3, [sp, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd09      	ble.n	8007e74 <_dtoa_r+0x754>
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	9a04      	ldr	r2, [sp, #16]
 8007e64:	bfa8      	it	ge
 8007e66:	462b      	movge	r3, r5
 8007e68:	1ad2      	subs	r2, r2, r3
 8007e6a:	9204      	str	r2, [sp, #16]
 8007e6c:	9a05      	ldr	r2, [sp, #20]
 8007e6e:	1aed      	subs	r5, r5, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	9b07      	ldr	r3, [sp, #28]
 8007e76:	b31b      	cbz	r3, 8007ec0 <_dtoa_r+0x7a0>
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 80af 	beq.w	8007fde <_dtoa_r+0x8be>
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	dd13      	ble.n	8007eac <_dtoa_r+0x78c>
 8007e84:	4639      	mov	r1, r7
 8007e86:	4632      	mov	r2, r6
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f001 f8cd 	bl	8009028 <__pow5mult>
 8007e8e:	ee18 2a10 	vmov	r2, s16
 8007e92:	4601      	mov	r1, r0
 8007e94:	4607      	mov	r7, r0
 8007e96:	4620      	mov	r0, r4
 8007e98:	f001 f81c 	bl	8008ed4 <__multiply>
 8007e9c:	ee18 1a10 	vmov	r1, s16
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fefe 	bl	8008ca4 <_Bfree>
 8007ea8:	ee08 8a10 	vmov	s16, r8
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	1b9a      	subs	r2, r3, r6
 8007eb0:	d006      	beq.n	8007ec0 <_dtoa_r+0x7a0>
 8007eb2:	ee18 1a10 	vmov	r1, s16
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f001 f8b6 	bl	8009028 <__pow5mult>
 8007ebc:	ee08 0a10 	vmov	s16, r0
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 fff0 	bl	8008ea8 <__i2b>
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	4606      	mov	r6, r0
 8007ece:	f340 8088 	ble.w	8007fe2 <_dtoa_r+0x8c2>
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4601      	mov	r1, r0
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f001 f8a6 	bl	8009028 <__pow5mult>
 8007edc:	9b06      	ldr	r3, [sp, #24]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	f340 8081 	ble.w	8007fe8 <_dtoa_r+0x8c8>
 8007ee6:	f04f 0800 	mov.w	r8, #0
 8007eea:	6933      	ldr	r3, [r6, #16]
 8007eec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ef0:	6918      	ldr	r0, [r3, #16]
 8007ef2:	f000 ff89 	bl	8008e08 <__hi0bits>
 8007ef6:	f1c0 0020 	rsb	r0, r0, #32
 8007efa:	9b05      	ldr	r3, [sp, #20]
 8007efc:	4418      	add	r0, r3
 8007efe:	f010 001f 	ands.w	r0, r0, #31
 8007f02:	f000 8092 	beq.w	800802a <_dtoa_r+0x90a>
 8007f06:	f1c0 0320 	rsb	r3, r0, #32
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	f340 808a 	ble.w	8008024 <_dtoa_r+0x904>
 8007f10:	f1c0 001c 	rsb	r0, r0, #28
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	4403      	add	r3, r0
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	9b05      	ldr	r3, [sp, #20]
 8007f1c:	4403      	add	r3, r0
 8007f1e:	4405      	add	r5, r0
 8007f20:	9305      	str	r3, [sp, #20]
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dd07      	ble.n	8007f38 <_dtoa_r+0x818>
 8007f28:	ee18 1a10 	vmov	r1, s16
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f001 f8d4 	bl	80090dc <__lshift>
 8007f34:	ee08 0a10 	vmov	s16, r0
 8007f38:	9b05      	ldr	r3, [sp, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dd05      	ble.n	8007f4a <_dtoa_r+0x82a>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	461a      	mov	r2, r3
 8007f42:	4620      	mov	r0, r4
 8007f44:	f001 f8ca 	bl	80090dc <__lshift>
 8007f48:	4606      	mov	r6, r0
 8007f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d06e      	beq.n	800802e <_dtoa_r+0x90e>
 8007f50:	ee18 0a10 	vmov	r0, s16
 8007f54:	4631      	mov	r1, r6
 8007f56:	f001 f931 	bl	80091bc <__mcmp>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	da67      	bge.n	800802e <_dtoa_r+0x90e>
 8007f5e:	9b00      	ldr	r3, [sp, #0]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	ee18 1a10 	vmov	r1, s16
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	220a      	movs	r2, #10
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 febb 	bl	8008ce8 <__multadd>
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	ee08 0a10 	vmov	s16, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 81b1 	beq.w	80082e0 <_dtoa_r+0xbc0>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4639      	mov	r1, r7
 8007f82:	220a      	movs	r2, #10
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 feaf 	bl	8008ce8 <__multadd>
 8007f8a:	9b02      	ldr	r3, [sp, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	4607      	mov	r7, r0
 8007f90:	f300 808e 	bgt.w	80080b0 <_dtoa_r+0x990>
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	dc51      	bgt.n	800803e <_dtoa_r+0x91e>
 8007f9a:	e089      	b.n	80080b0 <_dtoa_r+0x990>
 8007f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fa2:	e74b      	b.n	8007e3c <_dtoa_r+0x71c>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	1e5e      	subs	r6, r3, #1
 8007fa8:	9b07      	ldr	r3, [sp, #28]
 8007faa:	42b3      	cmp	r3, r6
 8007fac:	bfbf      	itttt	lt
 8007fae:	9b07      	ldrlt	r3, [sp, #28]
 8007fb0:	9607      	strlt	r6, [sp, #28]
 8007fb2:	1af2      	sublt	r2, r6, r3
 8007fb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fb6:	bfb6      	itet	lt
 8007fb8:	189b      	addlt	r3, r3, r2
 8007fba:	1b9e      	subge	r6, r3, r6
 8007fbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	bfb8      	it	lt
 8007fc2:	2600      	movlt	r6, #0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bfb7      	itett	lt
 8007fc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007fcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007fd0:	1a9d      	sublt	r5, r3, r2
 8007fd2:	2300      	movlt	r3, #0
 8007fd4:	e734      	b.n	8007e40 <_dtoa_r+0x720>
 8007fd6:	9e07      	ldr	r6, [sp, #28]
 8007fd8:	9d04      	ldr	r5, [sp, #16]
 8007fda:	9f08      	ldr	r7, [sp, #32]
 8007fdc:	e73b      	b.n	8007e56 <_dtoa_r+0x736>
 8007fde:	9a07      	ldr	r2, [sp, #28]
 8007fe0:	e767      	b.n	8007eb2 <_dtoa_r+0x792>
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	dc18      	bgt.n	800801a <_dtoa_r+0x8fa>
 8007fe8:	f1ba 0f00 	cmp.w	sl, #0
 8007fec:	d115      	bne.n	800801a <_dtoa_r+0x8fa>
 8007fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ff2:	b993      	cbnz	r3, 800801a <_dtoa_r+0x8fa>
 8007ff4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ff8:	0d1b      	lsrs	r3, r3, #20
 8007ffa:	051b      	lsls	r3, r3, #20
 8007ffc:	b183      	cbz	r3, 8008020 <_dtoa_r+0x900>
 8007ffe:	9b04      	ldr	r3, [sp, #16]
 8008000:	3301      	adds	r3, #1
 8008002:	9304      	str	r3, [sp, #16]
 8008004:	9b05      	ldr	r3, [sp, #20]
 8008006:	3301      	adds	r3, #1
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	f04f 0801 	mov.w	r8, #1
 800800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008010:	2b00      	cmp	r3, #0
 8008012:	f47f af6a 	bne.w	8007eea <_dtoa_r+0x7ca>
 8008016:	2001      	movs	r0, #1
 8008018:	e76f      	b.n	8007efa <_dtoa_r+0x7da>
 800801a:	f04f 0800 	mov.w	r8, #0
 800801e:	e7f6      	b.n	800800e <_dtoa_r+0x8ee>
 8008020:	4698      	mov	r8, r3
 8008022:	e7f4      	b.n	800800e <_dtoa_r+0x8ee>
 8008024:	f43f af7d 	beq.w	8007f22 <_dtoa_r+0x802>
 8008028:	4618      	mov	r0, r3
 800802a:	301c      	adds	r0, #28
 800802c:	e772      	b.n	8007f14 <_dtoa_r+0x7f4>
 800802e:	9b03      	ldr	r3, [sp, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	dc37      	bgt.n	80080a4 <_dtoa_r+0x984>
 8008034:	9b06      	ldr	r3, [sp, #24]
 8008036:	2b02      	cmp	r3, #2
 8008038:	dd34      	ble.n	80080a4 <_dtoa_r+0x984>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	9302      	str	r3, [sp, #8]
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	b96b      	cbnz	r3, 800805e <_dtoa_r+0x93e>
 8008042:	4631      	mov	r1, r6
 8008044:	2205      	movs	r2, #5
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fe4e 	bl	8008ce8 <__multadd>
 800804c:	4601      	mov	r1, r0
 800804e:	4606      	mov	r6, r0
 8008050:	ee18 0a10 	vmov	r0, s16
 8008054:	f001 f8b2 	bl	80091bc <__mcmp>
 8008058:	2800      	cmp	r0, #0
 800805a:	f73f adbb 	bgt.w	8007bd4 <_dtoa_r+0x4b4>
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	9d01      	ldr	r5, [sp, #4]
 8008062:	43db      	mvns	r3, r3
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	f04f 0800 	mov.w	r8, #0
 800806a:	4631      	mov	r1, r6
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fe19 	bl	8008ca4 <_Bfree>
 8008072:	2f00      	cmp	r7, #0
 8008074:	f43f aea4 	beq.w	8007dc0 <_dtoa_r+0x6a0>
 8008078:	f1b8 0f00 	cmp.w	r8, #0
 800807c:	d005      	beq.n	800808a <_dtoa_r+0x96a>
 800807e:	45b8      	cmp	r8, r7
 8008080:	d003      	beq.n	800808a <_dtoa_r+0x96a>
 8008082:	4641      	mov	r1, r8
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fe0d 	bl	8008ca4 <_Bfree>
 800808a:	4639      	mov	r1, r7
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fe09 	bl	8008ca4 <_Bfree>
 8008092:	e695      	b.n	8007dc0 <_dtoa_r+0x6a0>
 8008094:	2600      	movs	r6, #0
 8008096:	4637      	mov	r7, r6
 8008098:	e7e1      	b.n	800805e <_dtoa_r+0x93e>
 800809a:	9700      	str	r7, [sp, #0]
 800809c:	4637      	mov	r7, r6
 800809e:	e599      	b.n	8007bd4 <_dtoa_r+0x4b4>
 80080a0:	40240000 	.word	0x40240000
 80080a4:	9b08      	ldr	r3, [sp, #32]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 80ca 	beq.w	8008240 <_dtoa_r+0xb20>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	9302      	str	r3, [sp, #8]
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	dd05      	ble.n	80080c0 <_dtoa_r+0x9a0>
 80080b4:	4639      	mov	r1, r7
 80080b6:	462a      	mov	r2, r5
 80080b8:	4620      	mov	r0, r4
 80080ba:	f001 f80f 	bl	80090dc <__lshift>
 80080be:	4607      	mov	r7, r0
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	d05b      	beq.n	800817e <_dtoa_r+0xa5e>
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fdab 	bl	8008c24 <_Balloc>
 80080ce:	4605      	mov	r5, r0
 80080d0:	b928      	cbnz	r0, 80080de <_dtoa_r+0x9be>
 80080d2:	4b87      	ldr	r3, [pc, #540]	; (80082f0 <_dtoa_r+0xbd0>)
 80080d4:	4602      	mov	r2, r0
 80080d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080da:	f7ff bb3b 	b.w	8007754 <_dtoa_r+0x34>
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	3202      	adds	r2, #2
 80080e2:	0092      	lsls	r2, r2, #2
 80080e4:	f107 010c 	add.w	r1, r7, #12
 80080e8:	300c      	adds	r0, #12
 80080ea:	f000 fd8d 	bl	8008c08 <memcpy>
 80080ee:	2201      	movs	r2, #1
 80080f0:	4629      	mov	r1, r5
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 fff2 	bl	80090dc <__lshift>
 80080f8:	9b01      	ldr	r3, [sp, #4]
 80080fa:	f103 0901 	add.w	r9, r3, #1
 80080fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008102:	4413      	add	r3, r2
 8008104:	9305      	str	r3, [sp, #20]
 8008106:	f00a 0301 	and.w	r3, sl, #1
 800810a:	46b8      	mov	r8, r7
 800810c:	9304      	str	r3, [sp, #16]
 800810e:	4607      	mov	r7, r0
 8008110:	4631      	mov	r1, r6
 8008112:	ee18 0a10 	vmov	r0, s16
 8008116:	f7ff fa77 	bl	8007608 <quorem>
 800811a:	4641      	mov	r1, r8
 800811c:	9002      	str	r0, [sp, #8]
 800811e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008122:	ee18 0a10 	vmov	r0, s16
 8008126:	f001 f849 	bl	80091bc <__mcmp>
 800812a:	463a      	mov	r2, r7
 800812c:	9003      	str	r0, [sp, #12]
 800812e:	4631      	mov	r1, r6
 8008130:	4620      	mov	r0, r4
 8008132:	f001 f85f 	bl	80091f4 <__mdiff>
 8008136:	68c2      	ldr	r2, [r0, #12]
 8008138:	f109 3bff 	add.w	fp, r9, #4294967295
 800813c:	4605      	mov	r5, r0
 800813e:	bb02      	cbnz	r2, 8008182 <_dtoa_r+0xa62>
 8008140:	4601      	mov	r1, r0
 8008142:	ee18 0a10 	vmov	r0, s16
 8008146:	f001 f839 	bl	80091bc <__mcmp>
 800814a:	4602      	mov	r2, r0
 800814c:	4629      	mov	r1, r5
 800814e:	4620      	mov	r0, r4
 8008150:	9207      	str	r2, [sp, #28]
 8008152:	f000 fda7 	bl	8008ca4 <_Bfree>
 8008156:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800815a:	ea43 0102 	orr.w	r1, r3, r2
 800815e:	9b04      	ldr	r3, [sp, #16]
 8008160:	430b      	orrs	r3, r1
 8008162:	464d      	mov	r5, r9
 8008164:	d10f      	bne.n	8008186 <_dtoa_r+0xa66>
 8008166:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800816a:	d02a      	beq.n	80081c2 <_dtoa_r+0xaa2>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	dd02      	ble.n	8008178 <_dtoa_r+0xa58>
 8008172:	9b02      	ldr	r3, [sp, #8]
 8008174:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008178:	f88b a000 	strb.w	sl, [fp]
 800817c:	e775      	b.n	800806a <_dtoa_r+0x94a>
 800817e:	4638      	mov	r0, r7
 8008180:	e7ba      	b.n	80080f8 <_dtoa_r+0x9d8>
 8008182:	2201      	movs	r2, #1
 8008184:	e7e2      	b.n	800814c <_dtoa_r+0xa2c>
 8008186:	9b03      	ldr	r3, [sp, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	db04      	blt.n	8008196 <_dtoa_r+0xa76>
 800818c:	9906      	ldr	r1, [sp, #24]
 800818e:	430b      	orrs	r3, r1
 8008190:	9904      	ldr	r1, [sp, #16]
 8008192:	430b      	orrs	r3, r1
 8008194:	d122      	bne.n	80081dc <_dtoa_r+0xabc>
 8008196:	2a00      	cmp	r2, #0
 8008198:	ddee      	ble.n	8008178 <_dtoa_r+0xa58>
 800819a:	ee18 1a10 	vmov	r1, s16
 800819e:	2201      	movs	r2, #1
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 ff9b 	bl	80090dc <__lshift>
 80081a6:	4631      	mov	r1, r6
 80081a8:	ee08 0a10 	vmov	s16, r0
 80081ac:	f001 f806 	bl	80091bc <__mcmp>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	dc03      	bgt.n	80081bc <_dtoa_r+0xa9c>
 80081b4:	d1e0      	bne.n	8008178 <_dtoa_r+0xa58>
 80081b6:	f01a 0f01 	tst.w	sl, #1
 80081ba:	d0dd      	beq.n	8008178 <_dtoa_r+0xa58>
 80081bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081c0:	d1d7      	bne.n	8008172 <_dtoa_r+0xa52>
 80081c2:	2339      	movs	r3, #57	; 0x39
 80081c4:	f88b 3000 	strb.w	r3, [fp]
 80081c8:	462b      	mov	r3, r5
 80081ca:	461d      	mov	r5, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081d2:	2a39      	cmp	r2, #57	; 0x39
 80081d4:	d071      	beq.n	80082ba <_dtoa_r+0xb9a>
 80081d6:	3201      	adds	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e746      	b.n	800806a <_dtoa_r+0x94a>
 80081dc:	2a00      	cmp	r2, #0
 80081de:	dd07      	ble.n	80081f0 <_dtoa_r+0xad0>
 80081e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081e4:	d0ed      	beq.n	80081c2 <_dtoa_r+0xaa2>
 80081e6:	f10a 0301 	add.w	r3, sl, #1
 80081ea:	f88b 3000 	strb.w	r3, [fp]
 80081ee:	e73c      	b.n	800806a <_dtoa_r+0x94a>
 80081f0:	9b05      	ldr	r3, [sp, #20]
 80081f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80081f6:	4599      	cmp	r9, r3
 80081f8:	d047      	beq.n	800828a <_dtoa_r+0xb6a>
 80081fa:	ee18 1a10 	vmov	r1, s16
 80081fe:	2300      	movs	r3, #0
 8008200:	220a      	movs	r2, #10
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fd70 	bl	8008ce8 <__multadd>
 8008208:	45b8      	cmp	r8, r7
 800820a:	ee08 0a10 	vmov	s16, r0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	f04f 020a 	mov.w	r2, #10
 8008216:	4641      	mov	r1, r8
 8008218:	4620      	mov	r0, r4
 800821a:	d106      	bne.n	800822a <_dtoa_r+0xb0a>
 800821c:	f000 fd64 	bl	8008ce8 <__multadd>
 8008220:	4680      	mov	r8, r0
 8008222:	4607      	mov	r7, r0
 8008224:	f109 0901 	add.w	r9, r9, #1
 8008228:	e772      	b.n	8008110 <_dtoa_r+0x9f0>
 800822a:	f000 fd5d 	bl	8008ce8 <__multadd>
 800822e:	4639      	mov	r1, r7
 8008230:	4680      	mov	r8, r0
 8008232:	2300      	movs	r3, #0
 8008234:	220a      	movs	r2, #10
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fd56 	bl	8008ce8 <__multadd>
 800823c:	4607      	mov	r7, r0
 800823e:	e7f1      	b.n	8008224 <_dtoa_r+0xb04>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	9302      	str	r3, [sp, #8]
 8008244:	9d01      	ldr	r5, [sp, #4]
 8008246:	ee18 0a10 	vmov	r0, s16
 800824a:	4631      	mov	r1, r6
 800824c:	f7ff f9dc 	bl	8007608 <quorem>
 8008250:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	f805 ab01 	strb.w	sl, [r5], #1
 800825a:	1aea      	subs	r2, r5, r3
 800825c:	9b02      	ldr	r3, [sp, #8]
 800825e:	4293      	cmp	r3, r2
 8008260:	dd09      	ble.n	8008276 <_dtoa_r+0xb56>
 8008262:	ee18 1a10 	vmov	r1, s16
 8008266:	2300      	movs	r3, #0
 8008268:	220a      	movs	r2, #10
 800826a:	4620      	mov	r0, r4
 800826c:	f000 fd3c 	bl	8008ce8 <__multadd>
 8008270:	ee08 0a10 	vmov	s16, r0
 8008274:	e7e7      	b.n	8008246 <_dtoa_r+0xb26>
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bfc8      	it	gt
 800827c:	461d      	movgt	r5, r3
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	bfd8      	it	le
 8008282:	2501      	movle	r5, #1
 8008284:	441d      	add	r5, r3
 8008286:	f04f 0800 	mov.w	r8, #0
 800828a:	ee18 1a10 	vmov	r1, s16
 800828e:	2201      	movs	r2, #1
 8008290:	4620      	mov	r0, r4
 8008292:	f000 ff23 	bl	80090dc <__lshift>
 8008296:	4631      	mov	r1, r6
 8008298:	ee08 0a10 	vmov	s16, r0
 800829c:	f000 ff8e 	bl	80091bc <__mcmp>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	dc91      	bgt.n	80081c8 <_dtoa_r+0xaa8>
 80082a4:	d102      	bne.n	80082ac <_dtoa_r+0xb8c>
 80082a6:	f01a 0f01 	tst.w	sl, #1
 80082aa:	d18d      	bne.n	80081c8 <_dtoa_r+0xaa8>
 80082ac:	462b      	mov	r3, r5
 80082ae:	461d      	mov	r5, r3
 80082b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082b4:	2a30      	cmp	r2, #48	; 0x30
 80082b6:	d0fa      	beq.n	80082ae <_dtoa_r+0xb8e>
 80082b8:	e6d7      	b.n	800806a <_dtoa_r+0x94a>
 80082ba:	9a01      	ldr	r2, [sp, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d184      	bne.n	80081ca <_dtoa_r+0xaaa>
 80082c0:	9b00      	ldr	r3, [sp, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2331      	movs	r3, #49	; 0x31
 80082c8:	7013      	strb	r3, [r2, #0]
 80082ca:	e6ce      	b.n	800806a <_dtoa_r+0x94a>
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <_dtoa_r+0xbd4>)
 80082ce:	f7ff ba95 	b.w	80077fc <_dtoa_r+0xdc>
 80082d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f aa6e 	bne.w	80077b6 <_dtoa_r+0x96>
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <_dtoa_r+0xbd8>)
 80082dc:	f7ff ba8e 	b.w	80077fc <_dtoa_r+0xdc>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dcae      	bgt.n	8008244 <_dtoa_r+0xb24>
 80082e6:	9b06      	ldr	r3, [sp, #24]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	f73f aea8 	bgt.w	800803e <_dtoa_r+0x91e>
 80082ee:	e7a9      	b.n	8008244 <_dtoa_r+0xb24>
 80082f0:	0800a6a0 	.word	0x0800a6a0
 80082f4:	0800a4a0 	.word	0x0800a4a0
 80082f8:	0800a621 	.word	0x0800a621

080082fc <std>:
 80082fc:	2300      	movs	r3, #0
 80082fe:	b510      	push	{r4, lr}
 8008300:	4604      	mov	r4, r0
 8008302:	e9c0 3300 	strd	r3, r3, [r0]
 8008306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800830a:	6083      	str	r3, [r0, #8]
 800830c:	8181      	strh	r1, [r0, #12]
 800830e:	6643      	str	r3, [r0, #100]	; 0x64
 8008310:	81c2      	strh	r2, [r0, #14]
 8008312:	6183      	str	r3, [r0, #24]
 8008314:	4619      	mov	r1, r3
 8008316:	2208      	movs	r2, #8
 8008318:	305c      	adds	r0, #92	; 0x5c
 800831a:	f7fd fc07 	bl	8005b2c <memset>
 800831e:	4b05      	ldr	r3, [pc, #20]	; (8008334 <std+0x38>)
 8008320:	6263      	str	r3, [r4, #36]	; 0x24
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <std+0x3c>)
 8008324:	62a3      	str	r3, [r4, #40]	; 0x28
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <std+0x40>)
 8008328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800832a:	4b05      	ldr	r3, [pc, #20]	; (8008340 <std+0x44>)
 800832c:	6224      	str	r4, [r4, #32]
 800832e:	6323      	str	r3, [r4, #48]	; 0x30
 8008330:	bd10      	pop	{r4, pc}
 8008332:	bf00      	nop
 8008334:	08009d31 	.word	0x08009d31
 8008338:	08009d53 	.word	0x08009d53
 800833c:	08009d8b 	.word	0x08009d8b
 8008340:	08009daf 	.word	0x08009daf

08008344 <_cleanup_r>:
 8008344:	4901      	ldr	r1, [pc, #4]	; (800834c <_cleanup_r+0x8>)
 8008346:	f000 b8af 	b.w	80084a8 <_fwalk_reent>
 800834a:	bf00      	nop
 800834c:	0800a109 	.word	0x0800a109

08008350 <__sfmoreglue>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	2268      	movs	r2, #104	; 0x68
 8008354:	1e4d      	subs	r5, r1, #1
 8008356:	4355      	muls	r5, r2
 8008358:	460e      	mov	r6, r1
 800835a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800835e:	f001 f9a5 	bl	80096ac <_malloc_r>
 8008362:	4604      	mov	r4, r0
 8008364:	b140      	cbz	r0, 8008378 <__sfmoreglue+0x28>
 8008366:	2100      	movs	r1, #0
 8008368:	e9c0 1600 	strd	r1, r6, [r0]
 800836c:	300c      	adds	r0, #12
 800836e:	60a0      	str	r0, [r4, #8]
 8008370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008374:	f7fd fbda 	bl	8005b2c <memset>
 8008378:	4620      	mov	r0, r4
 800837a:	bd70      	pop	{r4, r5, r6, pc}

0800837c <__sfp_lock_acquire>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__sfp_lock_acquire+0x8>)
 800837e:	f000 bc26 	b.w	8008bce <__retarget_lock_acquire_recursive>
 8008382:	bf00      	nop
 8008384:	20000335 	.word	0x20000335

08008388 <__sfp_lock_release>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__sfp_lock_release+0x8>)
 800838a:	f000 bc21 	b.w	8008bd0 <__retarget_lock_release_recursive>
 800838e:	bf00      	nop
 8008390:	20000335 	.word	0x20000335

08008394 <__sinit_lock_acquire>:
 8008394:	4801      	ldr	r0, [pc, #4]	; (800839c <__sinit_lock_acquire+0x8>)
 8008396:	f000 bc1a 	b.w	8008bce <__retarget_lock_acquire_recursive>
 800839a:	bf00      	nop
 800839c:	20000336 	.word	0x20000336

080083a0 <__sinit_lock_release>:
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <__sinit_lock_release+0x8>)
 80083a2:	f000 bc15 	b.w	8008bd0 <__retarget_lock_release_recursive>
 80083a6:	bf00      	nop
 80083a8:	20000336 	.word	0x20000336

080083ac <__sinit>:
 80083ac:	b510      	push	{r4, lr}
 80083ae:	4604      	mov	r4, r0
 80083b0:	f7ff fff0 	bl	8008394 <__sinit_lock_acquire>
 80083b4:	69a3      	ldr	r3, [r4, #24]
 80083b6:	b11b      	cbz	r3, 80083c0 <__sinit+0x14>
 80083b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083bc:	f7ff bff0 	b.w	80083a0 <__sinit_lock_release>
 80083c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083c4:	6523      	str	r3, [r4, #80]	; 0x50
 80083c6:	4b13      	ldr	r3, [pc, #76]	; (8008414 <__sinit+0x68>)
 80083c8:	4a13      	ldr	r2, [pc, #76]	; (8008418 <__sinit+0x6c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	bf04      	itt	eq
 80083d2:	2301      	moveq	r3, #1
 80083d4:	61a3      	streq	r3, [r4, #24]
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 f820 	bl	800841c <__sfp>
 80083dc:	6060      	str	r0, [r4, #4]
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f81c 	bl	800841c <__sfp>
 80083e4:	60a0      	str	r0, [r4, #8]
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 f818 	bl	800841c <__sfp>
 80083ec:	2200      	movs	r2, #0
 80083ee:	60e0      	str	r0, [r4, #12]
 80083f0:	2104      	movs	r1, #4
 80083f2:	6860      	ldr	r0, [r4, #4]
 80083f4:	f7ff ff82 	bl	80082fc <std>
 80083f8:	68a0      	ldr	r0, [r4, #8]
 80083fa:	2201      	movs	r2, #1
 80083fc:	2109      	movs	r1, #9
 80083fe:	f7ff ff7d 	bl	80082fc <std>
 8008402:	68e0      	ldr	r0, [r4, #12]
 8008404:	2202      	movs	r2, #2
 8008406:	2112      	movs	r1, #18
 8008408:	f7ff ff78 	bl	80082fc <std>
 800840c:	2301      	movs	r3, #1
 800840e:	61a3      	str	r3, [r4, #24]
 8008410:	e7d2      	b.n	80083b8 <__sinit+0xc>
 8008412:	bf00      	nop
 8008414:	0800a48c 	.word	0x0800a48c
 8008418:	08008345 	.word	0x08008345

0800841c <__sfp>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	4607      	mov	r7, r0
 8008420:	f7ff ffac 	bl	800837c <__sfp_lock_acquire>
 8008424:	4b1e      	ldr	r3, [pc, #120]	; (80084a0 <__sfp+0x84>)
 8008426:	681e      	ldr	r6, [r3, #0]
 8008428:	69b3      	ldr	r3, [r6, #24]
 800842a:	b913      	cbnz	r3, 8008432 <__sfp+0x16>
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff ffbd 	bl	80083ac <__sinit>
 8008432:	3648      	adds	r6, #72	; 0x48
 8008434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008438:	3b01      	subs	r3, #1
 800843a:	d503      	bpl.n	8008444 <__sfp+0x28>
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	b30b      	cbz	r3, 8008484 <__sfp+0x68>
 8008440:	6836      	ldr	r6, [r6, #0]
 8008442:	e7f7      	b.n	8008434 <__sfp+0x18>
 8008444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008448:	b9d5      	cbnz	r5, 8008480 <__sfp+0x64>
 800844a:	4b16      	ldr	r3, [pc, #88]	; (80084a4 <__sfp+0x88>)
 800844c:	60e3      	str	r3, [r4, #12]
 800844e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008452:	6665      	str	r5, [r4, #100]	; 0x64
 8008454:	f000 fbba 	bl	8008bcc <__retarget_lock_init_recursive>
 8008458:	f7ff ff96 	bl	8008388 <__sfp_lock_release>
 800845c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008464:	6025      	str	r5, [r4, #0]
 8008466:	61a5      	str	r5, [r4, #24]
 8008468:	2208      	movs	r2, #8
 800846a:	4629      	mov	r1, r5
 800846c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008470:	f7fd fb5c 	bl	8005b2c <memset>
 8008474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800847c:	4620      	mov	r0, r4
 800847e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008480:	3468      	adds	r4, #104	; 0x68
 8008482:	e7d9      	b.n	8008438 <__sfp+0x1c>
 8008484:	2104      	movs	r1, #4
 8008486:	4638      	mov	r0, r7
 8008488:	f7ff ff62 	bl	8008350 <__sfmoreglue>
 800848c:	4604      	mov	r4, r0
 800848e:	6030      	str	r0, [r6, #0]
 8008490:	2800      	cmp	r0, #0
 8008492:	d1d5      	bne.n	8008440 <__sfp+0x24>
 8008494:	f7ff ff78 	bl	8008388 <__sfp_lock_release>
 8008498:	230c      	movs	r3, #12
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	e7ee      	b.n	800847c <__sfp+0x60>
 800849e:	bf00      	nop
 80084a0:	0800a48c 	.word	0x0800a48c
 80084a4:	ffff0001 	.word	0xffff0001

080084a8 <_fwalk_reent>:
 80084a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ac:	4606      	mov	r6, r0
 80084ae:	4688      	mov	r8, r1
 80084b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084b4:	2700      	movs	r7, #0
 80084b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084ba:	f1b9 0901 	subs.w	r9, r9, #1
 80084be:	d505      	bpl.n	80084cc <_fwalk_reent+0x24>
 80084c0:	6824      	ldr	r4, [r4, #0]
 80084c2:	2c00      	cmp	r4, #0
 80084c4:	d1f7      	bne.n	80084b6 <_fwalk_reent+0xe>
 80084c6:	4638      	mov	r0, r7
 80084c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084cc:	89ab      	ldrh	r3, [r5, #12]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d907      	bls.n	80084e2 <_fwalk_reent+0x3a>
 80084d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084d6:	3301      	adds	r3, #1
 80084d8:	d003      	beq.n	80084e2 <_fwalk_reent+0x3a>
 80084da:	4629      	mov	r1, r5
 80084dc:	4630      	mov	r0, r6
 80084de:	47c0      	blx	r8
 80084e0:	4307      	orrs	r7, r0
 80084e2:	3568      	adds	r5, #104	; 0x68
 80084e4:	e7e9      	b.n	80084ba <_fwalk_reent+0x12>

080084e6 <rshift>:
 80084e6:	6903      	ldr	r3, [r0, #16]
 80084e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084f4:	f100 0414 	add.w	r4, r0, #20
 80084f8:	dd45      	ble.n	8008586 <rshift+0xa0>
 80084fa:	f011 011f 	ands.w	r1, r1, #31
 80084fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008502:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008506:	d10c      	bne.n	8008522 <rshift+0x3c>
 8008508:	f100 0710 	add.w	r7, r0, #16
 800850c:	4629      	mov	r1, r5
 800850e:	42b1      	cmp	r1, r6
 8008510:	d334      	bcc.n	800857c <rshift+0x96>
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	1eea      	subs	r2, r5, #3
 8008518:	4296      	cmp	r6, r2
 800851a:	bf38      	it	cc
 800851c:	2300      	movcc	r3, #0
 800851e:	4423      	add	r3, r4
 8008520:	e015      	b.n	800854e <rshift+0x68>
 8008522:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008526:	f1c1 0820 	rsb	r8, r1, #32
 800852a:	40cf      	lsrs	r7, r1
 800852c:	f105 0e04 	add.w	lr, r5, #4
 8008530:	46a1      	mov	r9, r4
 8008532:	4576      	cmp	r6, lr
 8008534:	46f4      	mov	ip, lr
 8008536:	d815      	bhi.n	8008564 <rshift+0x7e>
 8008538:	1a9a      	subs	r2, r3, r2
 800853a:	0092      	lsls	r2, r2, #2
 800853c:	3a04      	subs	r2, #4
 800853e:	3501      	adds	r5, #1
 8008540:	42ae      	cmp	r6, r5
 8008542:	bf38      	it	cc
 8008544:	2200      	movcc	r2, #0
 8008546:	18a3      	adds	r3, r4, r2
 8008548:	50a7      	str	r7, [r4, r2]
 800854a:	b107      	cbz	r7, 800854e <rshift+0x68>
 800854c:	3304      	adds	r3, #4
 800854e:	1b1a      	subs	r2, r3, r4
 8008550:	42a3      	cmp	r3, r4
 8008552:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008556:	bf08      	it	eq
 8008558:	2300      	moveq	r3, #0
 800855a:	6102      	str	r2, [r0, #16]
 800855c:	bf08      	it	eq
 800855e:	6143      	streq	r3, [r0, #20]
 8008560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008564:	f8dc c000 	ldr.w	ip, [ip]
 8008568:	fa0c fc08 	lsl.w	ip, ip, r8
 800856c:	ea4c 0707 	orr.w	r7, ip, r7
 8008570:	f849 7b04 	str.w	r7, [r9], #4
 8008574:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008578:	40cf      	lsrs	r7, r1
 800857a:	e7da      	b.n	8008532 <rshift+0x4c>
 800857c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008580:	f847 cf04 	str.w	ip, [r7, #4]!
 8008584:	e7c3      	b.n	800850e <rshift+0x28>
 8008586:	4623      	mov	r3, r4
 8008588:	e7e1      	b.n	800854e <rshift+0x68>

0800858a <__hexdig_fun>:
 800858a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800858e:	2b09      	cmp	r3, #9
 8008590:	d802      	bhi.n	8008598 <__hexdig_fun+0xe>
 8008592:	3820      	subs	r0, #32
 8008594:	b2c0      	uxtb	r0, r0
 8008596:	4770      	bx	lr
 8008598:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800859c:	2b05      	cmp	r3, #5
 800859e:	d801      	bhi.n	80085a4 <__hexdig_fun+0x1a>
 80085a0:	3847      	subs	r0, #71	; 0x47
 80085a2:	e7f7      	b.n	8008594 <__hexdig_fun+0xa>
 80085a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80085a8:	2b05      	cmp	r3, #5
 80085aa:	d801      	bhi.n	80085b0 <__hexdig_fun+0x26>
 80085ac:	3827      	subs	r0, #39	; 0x27
 80085ae:	e7f1      	b.n	8008594 <__hexdig_fun+0xa>
 80085b0:	2000      	movs	r0, #0
 80085b2:	4770      	bx	lr

080085b4 <__gethex>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	ed2d 8b02 	vpush	{d8}
 80085bc:	b089      	sub	sp, #36	; 0x24
 80085be:	ee08 0a10 	vmov	s16, r0
 80085c2:	9304      	str	r3, [sp, #16]
 80085c4:	4bb4      	ldr	r3, [pc, #720]	; (8008898 <__gethex+0x2e4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	4618      	mov	r0, r3
 80085cc:	468b      	mov	fp, r1
 80085ce:	4690      	mov	r8, r2
 80085d0:	f7f7 fe1e 	bl	8000210 <strlen>
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	f8db 2000 	ldr.w	r2, [fp]
 80085da:	4403      	add	r3, r0
 80085dc:	4682      	mov	sl, r0
 80085de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	1c93      	adds	r3, r2, #2
 80085e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80085ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80085ee:	32fe      	adds	r2, #254	; 0xfe
 80085f0:	18d1      	adds	r1, r2, r3
 80085f2:	461f      	mov	r7, r3
 80085f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80085f8:	9100      	str	r1, [sp, #0]
 80085fa:	2830      	cmp	r0, #48	; 0x30
 80085fc:	d0f8      	beq.n	80085f0 <__gethex+0x3c>
 80085fe:	f7ff ffc4 	bl	800858a <__hexdig_fun>
 8008602:	4604      	mov	r4, r0
 8008604:	2800      	cmp	r0, #0
 8008606:	d13a      	bne.n	800867e <__gethex+0xca>
 8008608:	9901      	ldr	r1, [sp, #4]
 800860a:	4652      	mov	r2, sl
 800860c:	4638      	mov	r0, r7
 800860e:	f001 fbd2 	bl	8009db6 <strncmp>
 8008612:	4605      	mov	r5, r0
 8008614:	2800      	cmp	r0, #0
 8008616:	d168      	bne.n	80086ea <__gethex+0x136>
 8008618:	f817 000a 	ldrb.w	r0, [r7, sl]
 800861c:	eb07 060a 	add.w	r6, r7, sl
 8008620:	f7ff ffb3 	bl	800858a <__hexdig_fun>
 8008624:	2800      	cmp	r0, #0
 8008626:	d062      	beq.n	80086ee <__gethex+0x13a>
 8008628:	4633      	mov	r3, r6
 800862a:	7818      	ldrb	r0, [r3, #0]
 800862c:	2830      	cmp	r0, #48	; 0x30
 800862e:	461f      	mov	r7, r3
 8008630:	f103 0301 	add.w	r3, r3, #1
 8008634:	d0f9      	beq.n	800862a <__gethex+0x76>
 8008636:	f7ff ffa8 	bl	800858a <__hexdig_fun>
 800863a:	2301      	movs	r3, #1
 800863c:	fab0 f480 	clz	r4, r0
 8008640:	0964      	lsrs	r4, r4, #5
 8008642:	4635      	mov	r5, r6
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	463a      	mov	r2, r7
 8008648:	4616      	mov	r6, r2
 800864a:	3201      	adds	r2, #1
 800864c:	7830      	ldrb	r0, [r6, #0]
 800864e:	f7ff ff9c 	bl	800858a <__hexdig_fun>
 8008652:	2800      	cmp	r0, #0
 8008654:	d1f8      	bne.n	8008648 <__gethex+0x94>
 8008656:	9901      	ldr	r1, [sp, #4]
 8008658:	4652      	mov	r2, sl
 800865a:	4630      	mov	r0, r6
 800865c:	f001 fbab 	bl	8009db6 <strncmp>
 8008660:	b980      	cbnz	r0, 8008684 <__gethex+0xd0>
 8008662:	b94d      	cbnz	r5, 8008678 <__gethex+0xc4>
 8008664:	eb06 050a 	add.w	r5, r6, sl
 8008668:	462a      	mov	r2, r5
 800866a:	4616      	mov	r6, r2
 800866c:	3201      	adds	r2, #1
 800866e:	7830      	ldrb	r0, [r6, #0]
 8008670:	f7ff ff8b 	bl	800858a <__hexdig_fun>
 8008674:	2800      	cmp	r0, #0
 8008676:	d1f8      	bne.n	800866a <__gethex+0xb6>
 8008678:	1bad      	subs	r5, r5, r6
 800867a:	00ad      	lsls	r5, r5, #2
 800867c:	e004      	b.n	8008688 <__gethex+0xd4>
 800867e:	2400      	movs	r4, #0
 8008680:	4625      	mov	r5, r4
 8008682:	e7e0      	b.n	8008646 <__gethex+0x92>
 8008684:	2d00      	cmp	r5, #0
 8008686:	d1f7      	bne.n	8008678 <__gethex+0xc4>
 8008688:	7833      	ldrb	r3, [r6, #0]
 800868a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800868e:	2b50      	cmp	r3, #80	; 0x50
 8008690:	d13b      	bne.n	800870a <__gethex+0x156>
 8008692:	7873      	ldrb	r3, [r6, #1]
 8008694:	2b2b      	cmp	r3, #43	; 0x2b
 8008696:	d02c      	beq.n	80086f2 <__gethex+0x13e>
 8008698:	2b2d      	cmp	r3, #45	; 0x2d
 800869a:	d02e      	beq.n	80086fa <__gethex+0x146>
 800869c:	1c71      	adds	r1, r6, #1
 800869e:	f04f 0900 	mov.w	r9, #0
 80086a2:	7808      	ldrb	r0, [r1, #0]
 80086a4:	f7ff ff71 	bl	800858a <__hexdig_fun>
 80086a8:	1e43      	subs	r3, r0, #1
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b18      	cmp	r3, #24
 80086ae:	d82c      	bhi.n	800870a <__gethex+0x156>
 80086b0:	f1a0 0210 	sub.w	r2, r0, #16
 80086b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086b8:	f7ff ff67 	bl	800858a <__hexdig_fun>
 80086bc:	1e43      	subs	r3, r0, #1
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b18      	cmp	r3, #24
 80086c2:	d91d      	bls.n	8008700 <__gethex+0x14c>
 80086c4:	f1b9 0f00 	cmp.w	r9, #0
 80086c8:	d000      	beq.n	80086cc <__gethex+0x118>
 80086ca:	4252      	negs	r2, r2
 80086cc:	4415      	add	r5, r2
 80086ce:	f8cb 1000 	str.w	r1, [fp]
 80086d2:	b1e4      	cbz	r4, 800870e <__gethex+0x15a>
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bf14      	ite	ne
 80086da:	2700      	movne	r7, #0
 80086dc:	2706      	moveq	r7, #6
 80086de:	4638      	mov	r0, r7
 80086e0:	b009      	add	sp, #36	; 0x24
 80086e2:	ecbd 8b02 	vpop	{d8}
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	463e      	mov	r6, r7
 80086ec:	4625      	mov	r5, r4
 80086ee:	2401      	movs	r4, #1
 80086f0:	e7ca      	b.n	8008688 <__gethex+0xd4>
 80086f2:	f04f 0900 	mov.w	r9, #0
 80086f6:	1cb1      	adds	r1, r6, #2
 80086f8:	e7d3      	b.n	80086a2 <__gethex+0xee>
 80086fa:	f04f 0901 	mov.w	r9, #1
 80086fe:	e7fa      	b.n	80086f6 <__gethex+0x142>
 8008700:	230a      	movs	r3, #10
 8008702:	fb03 0202 	mla	r2, r3, r2, r0
 8008706:	3a10      	subs	r2, #16
 8008708:	e7d4      	b.n	80086b4 <__gethex+0x100>
 800870a:	4631      	mov	r1, r6
 800870c:	e7df      	b.n	80086ce <__gethex+0x11a>
 800870e:	1bf3      	subs	r3, r6, r7
 8008710:	3b01      	subs	r3, #1
 8008712:	4621      	mov	r1, r4
 8008714:	2b07      	cmp	r3, #7
 8008716:	dc0b      	bgt.n	8008730 <__gethex+0x17c>
 8008718:	ee18 0a10 	vmov	r0, s16
 800871c:	f000 fa82 	bl	8008c24 <_Balloc>
 8008720:	4604      	mov	r4, r0
 8008722:	b940      	cbnz	r0, 8008736 <__gethex+0x182>
 8008724:	4b5d      	ldr	r3, [pc, #372]	; (800889c <__gethex+0x2e8>)
 8008726:	4602      	mov	r2, r0
 8008728:	21de      	movs	r1, #222	; 0xde
 800872a:	485d      	ldr	r0, [pc, #372]	; (80088a0 <__gethex+0x2ec>)
 800872c:	f001 fc38 	bl	8009fa0 <__assert_func>
 8008730:	3101      	adds	r1, #1
 8008732:	105b      	asrs	r3, r3, #1
 8008734:	e7ee      	b.n	8008714 <__gethex+0x160>
 8008736:	f100 0914 	add.w	r9, r0, #20
 800873a:	f04f 0b00 	mov.w	fp, #0
 800873e:	f1ca 0301 	rsb	r3, sl, #1
 8008742:	f8cd 9008 	str.w	r9, [sp, #8]
 8008746:	f8cd b000 	str.w	fp, [sp]
 800874a:	9306      	str	r3, [sp, #24]
 800874c:	42b7      	cmp	r7, r6
 800874e:	d340      	bcc.n	80087d2 <__gethex+0x21e>
 8008750:	9802      	ldr	r0, [sp, #8]
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	f840 3b04 	str.w	r3, [r0], #4
 8008758:	eba0 0009 	sub.w	r0, r0, r9
 800875c:	1080      	asrs	r0, r0, #2
 800875e:	0146      	lsls	r6, r0, #5
 8008760:	6120      	str	r0, [r4, #16]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fb50 	bl	8008e08 <__hi0bits>
 8008768:	1a30      	subs	r0, r6, r0
 800876a:	f8d8 6000 	ldr.w	r6, [r8]
 800876e:	42b0      	cmp	r0, r6
 8008770:	dd63      	ble.n	800883a <__gethex+0x286>
 8008772:	1b87      	subs	r7, r0, r6
 8008774:	4639      	mov	r1, r7
 8008776:	4620      	mov	r0, r4
 8008778:	f000 fef4 	bl	8009564 <__any_on>
 800877c:	4682      	mov	sl, r0
 800877e:	b1a8      	cbz	r0, 80087ac <__gethex+0x1f8>
 8008780:	1e7b      	subs	r3, r7, #1
 8008782:	1159      	asrs	r1, r3, #5
 8008784:	f003 021f 	and.w	r2, r3, #31
 8008788:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800878c:	f04f 0a01 	mov.w	sl, #1
 8008790:	fa0a f202 	lsl.w	r2, sl, r2
 8008794:	420a      	tst	r2, r1
 8008796:	d009      	beq.n	80087ac <__gethex+0x1f8>
 8008798:	4553      	cmp	r3, sl
 800879a:	dd05      	ble.n	80087a8 <__gethex+0x1f4>
 800879c:	1eb9      	subs	r1, r7, #2
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 fee0 	bl	8009564 <__any_on>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d145      	bne.n	8008834 <__gethex+0x280>
 80087a8:	f04f 0a02 	mov.w	sl, #2
 80087ac:	4639      	mov	r1, r7
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff fe99 	bl	80084e6 <rshift>
 80087b4:	443d      	add	r5, r7
 80087b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087ba:	42ab      	cmp	r3, r5
 80087bc:	da4c      	bge.n	8008858 <__gethex+0x2a4>
 80087be:	ee18 0a10 	vmov	r0, s16
 80087c2:	4621      	mov	r1, r4
 80087c4:	f000 fa6e 	bl	8008ca4 <_Bfree>
 80087c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087ca:	2300      	movs	r3, #0
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	27a3      	movs	r7, #163	; 0xa3
 80087d0:	e785      	b.n	80086de <__gethex+0x12a>
 80087d2:	1e73      	subs	r3, r6, #1
 80087d4:	9a05      	ldr	r2, [sp, #20]
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087dc:	4293      	cmp	r3, r2
 80087de:	d019      	beq.n	8008814 <__gethex+0x260>
 80087e0:	f1bb 0f20 	cmp.w	fp, #32
 80087e4:	d107      	bne.n	80087f6 <__gethex+0x242>
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	9a00      	ldr	r2, [sp, #0]
 80087ea:	f843 2b04 	str.w	r2, [r3], #4
 80087ee:	9302      	str	r3, [sp, #8]
 80087f0:	2300      	movs	r3, #0
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	469b      	mov	fp, r3
 80087f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80087fa:	f7ff fec6 	bl	800858a <__hexdig_fun>
 80087fe:	9b00      	ldr	r3, [sp, #0]
 8008800:	f000 000f 	and.w	r0, r0, #15
 8008804:	fa00 f00b 	lsl.w	r0, r0, fp
 8008808:	4303      	orrs	r3, r0
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	f10b 0b04 	add.w	fp, fp, #4
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	e00d      	b.n	8008830 <__gethex+0x27c>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	9a06      	ldr	r2, [sp, #24]
 8008818:	4413      	add	r3, r2
 800881a:	42bb      	cmp	r3, r7
 800881c:	d3e0      	bcc.n	80087e0 <__gethex+0x22c>
 800881e:	4618      	mov	r0, r3
 8008820:	9901      	ldr	r1, [sp, #4]
 8008822:	9307      	str	r3, [sp, #28]
 8008824:	4652      	mov	r2, sl
 8008826:	f001 fac6 	bl	8009db6 <strncmp>
 800882a:	9b07      	ldr	r3, [sp, #28]
 800882c:	2800      	cmp	r0, #0
 800882e:	d1d7      	bne.n	80087e0 <__gethex+0x22c>
 8008830:	461e      	mov	r6, r3
 8008832:	e78b      	b.n	800874c <__gethex+0x198>
 8008834:	f04f 0a03 	mov.w	sl, #3
 8008838:	e7b8      	b.n	80087ac <__gethex+0x1f8>
 800883a:	da0a      	bge.n	8008852 <__gethex+0x29e>
 800883c:	1a37      	subs	r7, r6, r0
 800883e:	4621      	mov	r1, r4
 8008840:	ee18 0a10 	vmov	r0, s16
 8008844:	463a      	mov	r2, r7
 8008846:	f000 fc49 	bl	80090dc <__lshift>
 800884a:	1bed      	subs	r5, r5, r7
 800884c:	4604      	mov	r4, r0
 800884e:	f100 0914 	add.w	r9, r0, #20
 8008852:	f04f 0a00 	mov.w	sl, #0
 8008856:	e7ae      	b.n	80087b6 <__gethex+0x202>
 8008858:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800885c:	42a8      	cmp	r0, r5
 800885e:	dd72      	ble.n	8008946 <__gethex+0x392>
 8008860:	1b45      	subs	r5, r0, r5
 8008862:	42ae      	cmp	r6, r5
 8008864:	dc36      	bgt.n	80088d4 <__gethex+0x320>
 8008866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d02a      	beq.n	80088c4 <__gethex+0x310>
 800886e:	2b03      	cmp	r3, #3
 8008870:	d02c      	beq.n	80088cc <__gethex+0x318>
 8008872:	2b01      	cmp	r3, #1
 8008874:	d11c      	bne.n	80088b0 <__gethex+0x2fc>
 8008876:	42ae      	cmp	r6, r5
 8008878:	d11a      	bne.n	80088b0 <__gethex+0x2fc>
 800887a:	2e01      	cmp	r6, #1
 800887c:	d112      	bne.n	80088a4 <__gethex+0x2f0>
 800887e:	9a04      	ldr	r2, [sp, #16]
 8008880:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	2301      	movs	r3, #1
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	f8c9 3000 	str.w	r3, [r9]
 800888e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008890:	2762      	movs	r7, #98	; 0x62
 8008892:	601c      	str	r4, [r3, #0]
 8008894:	e723      	b.n	80086de <__gethex+0x12a>
 8008896:	bf00      	nop
 8008898:	0800a77c 	.word	0x0800a77c
 800889c:	0800a6a0 	.word	0x0800a6a0
 80088a0:	0800a714 	.word	0x0800a714
 80088a4:	1e71      	subs	r1, r6, #1
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fe5c 	bl	8009564 <__any_on>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d1e6      	bne.n	800887e <__gethex+0x2ca>
 80088b0:	ee18 0a10 	vmov	r0, s16
 80088b4:	4621      	mov	r1, r4
 80088b6:	f000 f9f5 	bl	8008ca4 <_Bfree>
 80088ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088bc:	2300      	movs	r3, #0
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	2750      	movs	r7, #80	; 0x50
 80088c2:	e70c      	b.n	80086de <__gethex+0x12a>
 80088c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1f2      	bne.n	80088b0 <__gethex+0x2fc>
 80088ca:	e7d8      	b.n	800887e <__gethex+0x2ca>
 80088cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1d5      	bne.n	800887e <__gethex+0x2ca>
 80088d2:	e7ed      	b.n	80088b0 <__gethex+0x2fc>
 80088d4:	1e6f      	subs	r7, r5, #1
 80088d6:	f1ba 0f00 	cmp.w	sl, #0
 80088da:	d131      	bne.n	8008940 <__gethex+0x38c>
 80088dc:	b127      	cbz	r7, 80088e8 <__gethex+0x334>
 80088de:	4639      	mov	r1, r7
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fe3f 	bl	8009564 <__any_on>
 80088e6:	4682      	mov	sl, r0
 80088e8:	117b      	asrs	r3, r7, #5
 80088ea:	2101      	movs	r1, #1
 80088ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80088f0:	f007 071f 	and.w	r7, r7, #31
 80088f4:	fa01 f707 	lsl.w	r7, r1, r7
 80088f8:	421f      	tst	r7, r3
 80088fa:	4629      	mov	r1, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	bf18      	it	ne
 8008900:	f04a 0a02 	orrne.w	sl, sl, #2
 8008904:	1b76      	subs	r6, r6, r5
 8008906:	f7ff fdee 	bl	80084e6 <rshift>
 800890a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800890e:	2702      	movs	r7, #2
 8008910:	f1ba 0f00 	cmp.w	sl, #0
 8008914:	d048      	beq.n	80089a8 <__gethex+0x3f4>
 8008916:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d015      	beq.n	800894a <__gethex+0x396>
 800891e:	2b03      	cmp	r3, #3
 8008920:	d017      	beq.n	8008952 <__gethex+0x39e>
 8008922:	2b01      	cmp	r3, #1
 8008924:	d109      	bne.n	800893a <__gethex+0x386>
 8008926:	f01a 0f02 	tst.w	sl, #2
 800892a:	d006      	beq.n	800893a <__gethex+0x386>
 800892c:	f8d9 0000 	ldr.w	r0, [r9]
 8008930:	ea4a 0a00 	orr.w	sl, sl, r0
 8008934:	f01a 0f01 	tst.w	sl, #1
 8008938:	d10e      	bne.n	8008958 <__gethex+0x3a4>
 800893a:	f047 0710 	orr.w	r7, r7, #16
 800893e:	e033      	b.n	80089a8 <__gethex+0x3f4>
 8008940:	f04f 0a01 	mov.w	sl, #1
 8008944:	e7d0      	b.n	80088e8 <__gethex+0x334>
 8008946:	2701      	movs	r7, #1
 8008948:	e7e2      	b.n	8008910 <__gethex+0x35c>
 800894a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800894c:	f1c3 0301 	rsb	r3, r3, #1
 8008950:	9315      	str	r3, [sp, #84]	; 0x54
 8008952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0f0      	beq.n	800893a <__gethex+0x386>
 8008958:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800895c:	f104 0314 	add.w	r3, r4, #20
 8008960:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008964:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008968:	f04f 0c00 	mov.w	ip, #0
 800896c:	4618      	mov	r0, r3
 800896e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008972:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008976:	d01c      	beq.n	80089b2 <__gethex+0x3fe>
 8008978:	3201      	adds	r2, #1
 800897a:	6002      	str	r2, [r0, #0]
 800897c:	2f02      	cmp	r7, #2
 800897e:	f104 0314 	add.w	r3, r4, #20
 8008982:	d13f      	bne.n	8008a04 <__gethex+0x450>
 8008984:	f8d8 2000 	ldr.w	r2, [r8]
 8008988:	3a01      	subs	r2, #1
 800898a:	42b2      	cmp	r2, r6
 800898c:	d10a      	bne.n	80089a4 <__gethex+0x3f0>
 800898e:	1171      	asrs	r1, r6, #5
 8008990:	2201      	movs	r2, #1
 8008992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008996:	f006 061f 	and.w	r6, r6, #31
 800899a:	fa02 f606 	lsl.w	r6, r2, r6
 800899e:	421e      	tst	r6, r3
 80089a0:	bf18      	it	ne
 80089a2:	4617      	movne	r7, r2
 80089a4:	f047 0720 	orr.w	r7, r7, #32
 80089a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089aa:	601c      	str	r4, [r3, #0]
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	601d      	str	r5, [r3, #0]
 80089b0:	e695      	b.n	80086de <__gethex+0x12a>
 80089b2:	4299      	cmp	r1, r3
 80089b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80089b8:	d8d8      	bhi.n	800896c <__gethex+0x3b8>
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	459b      	cmp	fp, r3
 80089be:	db19      	blt.n	80089f4 <__gethex+0x440>
 80089c0:	6861      	ldr	r1, [r4, #4]
 80089c2:	ee18 0a10 	vmov	r0, s16
 80089c6:	3101      	adds	r1, #1
 80089c8:	f000 f92c 	bl	8008c24 <_Balloc>
 80089cc:	4681      	mov	r9, r0
 80089ce:	b918      	cbnz	r0, 80089d8 <__gethex+0x424>
 80089d0:	4b1a      	ldr	r3, [pc, #104]	; (8008a3c <__gethex+0x488>)
 80089d2:	4602      	mov	r2, r0
 80089d4:	2184      	movs	r1, #132	; 0x84
 80089d6:	e6a8      	b.n	800872a <__gethex+0x176>
 80089d8:	6922      	ldr	r2, [r4, #16]
 80089da:	3202      	adds	r2, #2
 80089dc:	f104 010c 	add.w	r1, r4, #12
 80089e0:	0092      	lsls	r2, r2, #2
 80089e2:	300c      	adds	r0, #12
 80089e4:	f000 f910 	bl	8008c08 <memcpy>
 80089e8:	4621      	mov	r1, r4
 80089ea:	ee18 0a10 	vmov	r0, s16
 80089ee:	f000 f959 	bl	8008ca4 <_Bfree>
 80089f2:	464c      	mov	r4, r9
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089fc:	6122      	str	r2, [r4, #16]
 80089fe:	2201      	movs	r2, #1
 8008a00:	615a      	str	r2, [r3, #20]
 8008a02:	e7bb      	b.n	800897c <__gethex+0x3c8>
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	455a      	cmp	r2, fp
 8008a08:	dd0b      	ble.n	8008a22 <__gethex+0x46e>
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff fd6a 	bl	80084e6 <rshift>
 8008a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a16:	3501      	adds	r5, #1
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	f6ff aed0 	blt.w	80087be <__gethex+0x20a>
 8008a1e:	2701      	movs	r7, #1
 8008a20:	e7c0      	b.n	80089a4 <__gethex+0x3f0>
 8008a22:	f016 061f 	ands.w	r6, r6, #31
 8008a26:	d0fa      	beq.n	8008a1e <__gethex+0x46a>
 8008a28:	4453      	add	r3, sl
 8008a2a:	f1c6 0620 	rsb	r6, r6, #32
 8008a2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a32:	f000 f9e9 	bl	8008e08 <__hi0bits>
 8008a36:	42b0      	cmp	r0, r6
 8008a38:	dbe7      	blt.n	8008a0a <__gethex+0x456>
 8008a3a:	e7f0      	b.n	8008a1e <__gethex+0x46a>
 8008a3c:	0800a6a0 	.word	0x0800a6a0

08008a40 <L_shift>:
 8008a40:	f1c2 0208 	rsb	r2, r2, #8
 8008a44:	0092      	lsls	r2, r2, #2
 8008a46:	b570      	push	{r4, r5, r6, lr}
 8008a48:	f1c2 0620 	rsb	r6, r2, #32
 8008a4c:	6843      	ldr	r3, [r0, #4]
 8008a4e:	6804      	ldr	r4, [r0, #0]
 8008a50:	fa03 f506 	lsl.w	r5, r3, r6
 8008a54:	432c      	orrs	r4, r5
 8008a56:	40d3      	lsrs	r3, r2
 8008a58:	6004      	str	r4, [r0, #0]
 8008a5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a5e:	4288      	cmp	r0, r1
 8008a60:	d3f4      	bcc.n	8008a4c <L_shift+0xc>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}

08008a64 <__match>:
 8008a64:	b530      	push	{r4, r5, lr}
 8008a66:	6803      	ldr	r3, [r0, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a6e:	b914      	cbnz	r4, 8008a76 <__match+0x12>
 8008a70:	6003      	str	r3, [r0, #0]
 8008a72:	2001      	movs	r0, #1
 8008a74:	bd30      	pop	{r4, r5, pc}
 8008a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a7e:	2d19      	cmp	r5, #25
 8008a80:	bf98      	it	ls
 8008a82:	3220      	addls	r2, #32
 8008a84:	42a2      	cmp	r2, r4
 8008a86:	d0f0      	beq.n	8008a6a <__match+0x6>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e7f3      	b.n	8008a74 <__match+0x10>

08008a8c <__hexnan>:
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	680b      	ldr	r3, [r1, #0]
 8008a92:	115e      	asrs	r6, r3, #5
 8008a94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a98:	f013 031f 	ands.w	r3, r3, #31
 8008a9c:	b087      	sub	sp, #28
 8008a9e:	bf18      	it	ne
 8008aa0:	3604      	addne	r6, #4
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	1f37      	subs	r7, r6, #4
 8008aa6:	4690      	mov	r8, r2
 8008aa8:	6802      	ldr	r2, [r0, #0]
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	4682      	mov	sl, r0
 8008aae:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ab2:	46b9      	mov	r9, r7
 8008ab4:	463c      	mov	r4, r7
 8008ab6:	9502      	str	r5, [sp, #8]
 8008ab8:	46ab      	mov	fp, r5
 8008aba:	7851      	ldrb	r1, [r2, #1]
 8008abc:	1c53      	adds	r3, r2, #1
 8008abe:	9303      	str	r3, [sp, #12]
 8008ac0:	b341      	cbz	r1, 8008b14 <__hexnan+0x88>
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	9205      	str	r2, [sp, #20]
 8008ac6:	9104      	str	r1, [sp, #16]
 8008ac8:	f7ff fd5f 	bl	800858a <__hexdig_fun>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d14f      	bne.n	8008b70 <__hexnan+0xe4>
 8008ad0:	9904      	ldr	r1, [sp, #16]
 8008ad2:	9a05      	ldr	r2, [sp, #20]
 8008ad4:	2920      	cmp	r1, #32
 8008ad6:	d818      	bhi.n	8008b0a <__hexnan+0x7e>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	459b      	cmp	fp, r3
 8008adc:	dd13      	ble.n	8008b06 <__hexnan+0x7a>
 8008ade:	454c      	cmp	r4, r9
 8008ae0:	d206      	bcs.n	8008af0 <__hexnan+0x64>
 8008ae2:	2d07      	cmp	r5, #7
 8008ae4:	dc04      	bgt.n	8008af0 <__hexnan+0x64>
 8008ae6:	462a      	mov	r2, r5
 8008ae8:	4649      	mov	r1, r9
 8008aea:	4620      	mov	r0, r4
 8008aec:	f7ff ffa8 	bl	8008a40 <L_shift>
 8008af0:	4544      	cmp	r4, r8
 8008af2:	d950      	bls.n	8008b96 <__hexnan+0x10a>
 8008af4:	2300      	movs	r3, #0
 8008af6:	f1a4 0904 	sub.w	r9, r4, #4
 8008afa:	f844 3c04 	str.w	r3, [r4, #-4]
 8008afe:	f8cd b008 	str.w	fp, [sp, #8]
 8008b02:	464c      	mov	r4, r9
 8008b04:	461d      	mov	r5, r3
 8008b06:	9a03      	ldr	r2, [sp, #12]
 8008b08:	e7d7      	b.n	8008aba <__hexnan+0x2e>
 8008b0a:	2929      	cmp	r1, #41	; 0x29
 8008b0c:	d156      	bne.n	8008bbc <__hexnan+0x130>
 8008b0e:	3202      	adds	r2, #2
 8008b10:	f8ca 2000 	str.w	r2, [sl]
 8008b14:	f1bb 0f00 	cmp.w	fp, #0
 8008b18:	d050      	beq.n	8008bbc <__hexnan+0x130>
 8008b1a:	454c      	cmp	r4, r9
 8008b1c:	d206      	bcs.n	8008b2c <__hexnan+0xa0>
 8008b1e:	2d07      	cmp	r5, #7
 8008b20:	dc04      	bgt.n	8008b2c <__hexnan+0xa0>
 8008b22:	462a      	mov	r2, r5
 8008b24:	4649      	mov	r1, r9
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff ff8a 	bl	8008a40 <L_shift>
 8008b2c:	4544      	cmp	r4, r8
 8008b2e:	d934      	bls.n	8008b9a <__hexnan+0x10e>
 8008b30:	f1a8 0204 	sub.w	r2, r8, #4
 8008b34:	4623      	mov	r3, r4
 8008b36:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b3e:	429f      	cmp	r7, r3
 8008b40:	d2f9      	bcs.n	8008b36 <__hexnan+0xaa>
 8008b42:	1b3b      	subs	r3, r7, r4
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	3304      	adds	r3, #4
 8008b4a:	3401      	adds	r4, #1
 8008b4c:	3e03      	subs	r6, #3
 8008b4e:	42b4      	cmp	r4, r6
 8008b50:	bf88      	it	hi
 8008b52:	2304      	movhi	r3, #4
 8008b54:	4443      	add	r3, r8
 8008b56:	2200      	movs	r2, #0
 8008b58:	f843 2b04 	str.w	r2, [r3], #4
 8008b5c:	429f      	cmp	r7, r3
 8008b5e:	d2fb      	bcs.n	8008b58 <__hexnan+0xcc>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	b91b      	cbnz	r3, 8008b6c <__hexnan+0xe0>
 8008b64:	4547      	cmp	r7, r8
 8008b66:	d127      	bne.n	8008bb8 <__hexnan+0x12c>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	2005      	movs	r0, #5
 8008b6e:	e026      	b.n	8008bbe <__hexnan+0x132>
 8008b70:	3501      	adds	r5, #1
 8008b72:	2d08      	cmp	r5, #8
 8008b74:	f10b 0b01 	add.w	fp, fp, #1
 8008b78:	dd06      	ble.n	8008b88 <__hexnan+0xfc>
 8008b7a:	4544      	cmp	r4, r8
 8008b7c:	d9c3      	bls.n	8008b06 <__hexnan+0x7a>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b84:	2501      	movs	r5, #1
 8008b86:	3c04      	subs	r4, #4
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	f000 000f 	and.w	r0, r0, #15
 8008b8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008b92:	6022      	str	r2, [r4, #0]
 8008b94:	e7b7      	b.n	8008b06 <__hexnan+0x7a>
 8008b96:	2508      	movs	r5, #8
 8008b98:	e7b5      	b.n	8008b06 <__hexnan+0x7a>
 8008b9a:	9b01      	ldr	r3, [sp, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0df      	beq.n	8008b60 <__hexnan+0xd4>
 8008ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba4:	f1c3 0320 	rsb	r3, r3, #32
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008bb0:	401a      	ands	r2, r3
 8008bb2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008bb6:	e7d3      	b.n	8008b60 <__hexnan+0xd4>
 8008bb8:	3f04      	subs	r7, #4
 8008bba:	e7d1      	b.n	8008b60 <__hexnan+0xd4>
 8008bbc:	2004      	movs	r0, #4
 8008bbe:	b007      	add	sp, #28
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bc4 <_localeconv_r>:
 8008bc4:	4800      	ldr	r0, [pc, #0]	; (8008bc8 <_localeconv_r+0x4>)
 8008bc6:	4770      	bx	lr
 8008bc8:	20000164 	.word	0x20000164

08008bcc <__retarget_lock_init_recursive>:
 8008bcc:	4770      	bx	lr

08008bce <__retarget_lock_acquire_recursive>:
 8008bce:	4770      	bx	lr

08008bd0 <__retarget_lock_release_recursive>:
 8008bd0:	4770      	bx	lr
	...

08008bd4 <malloc>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <malloc+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f000 bd67 	b.w	80096ac <_malloc_r>
 8008bde:	bf00      	nop
 8008be0:	2000000c 	.word	0x2000000c

08008be4 <__ascii_mbtowc>:
 8008be4:	b082      	sub	sp, #8
 8008be6:	b901      	cbnz	r1, 8008bea <__ascii_mbtowc+0x6>
 8008be8:	a901      	add	r1, sp, #4
 8008bea:	b142      	cbz	r2, 8008bfe <__ascii_mbtowc+0x1a>
 8008bec:	b14b      	cbz	r3, 8008c02 <__ascii_mbtowc+0x1e>
 8008bee:	7813      	ldrb	r3, [r2, #0]
 8008bf0:	600b      	str	r3, [r1, #0]
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	1e10      	subs	r0, r2, #0
 8008bf6:	bf18      	it	ne
 8008bf8:	2001      	movne	r0, #1
 8008bfa:	b002      	add	sp, #8
 8008bfc:	4770      	bx	lr
 8008bfe:	4610      	mov	r0, r2
 8008c00:	e7fb      	b.n	8008bfa <__ascii_mbtowc+0x16>
 8008c02:	f06f 0001 	mvn.w	r0, #1
 8008c06:	e7f8      	b.n	8008bfa <__ascii_mbtowc+0x16>

08008c08 <memcpy>:
 8008c08:	440a      	add	r2, r1
 8008c0a:	4291      	cmp	r1, r2
 8008c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c10:	d100      	bne.n	8008c14 <memcpy+0xc>
 8008c12:	4770      	bx	lr
 8008c14:	b510      	push	{r4, lr}
 8008c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c1e:	4291      	cmp	r1, r2
 8008c20:	d1f9      	bne.n	8008c16 <memcpy+0xe>
 8008c22:	bd10      	pop	{r4, pc}

08008c24 <_Balloc>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c28:	4604      	mov	r4, r0
 8008c2a:	460d      	mov	r5, r1
 8008c2c:	b976      	cbnz	r6, 8008c4c <_Balloc+0x28>
 8008c2e:	2010      	movs	r0, #16
 8008c30:	f7ff ffd0 	bl	8008bd4 <malloc>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6260      	str	r0, [r4, #36]	; 0x24
 8008c38:	b920      	cbnz	r0, 8008c44 <_Balloc+0x20>
 8008c3a:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <_Balloc+0x78>)
 8008c3c:	4818      	ldr	r0, [pc, #96]	; (8008ca0 <_Balloc+0x7c>)
 8008c3e:	2166      	movs	r1, #102	; 0x66
 8008c40:	f001 f9ae 	bl	8009fa0 <__assert_func>
 8008c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c48:	6006      	str	r6, [r0, #0]
 8008c4a:	60c6      	str	r6, [r0, #12]
 8008c4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c4e:	68f3      	ldr	r3, [r6, #12]
 8008c50:	b183      	cbz	r3, 8008c74 <_Balloc+0x50>
 8008c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c5a:	b9b8      	cbnz	r0, 8008c8c <_Balloc+0x68>
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	fa01 f605 	lsl.w	r6, r1, r5
 8008c62:	1d72      	adds	r2, r6, #5
 8008c64:	0092      	lsls	r2, r2, #2
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 fc9d 	bl	80095a6 <_calloc_r>
 8008c6c:	b160      	cbz	r0, 8008c88 <_Balloc+0x64>
 8008c6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c72:	e00e      	b.n	8008c92 <_Balloc+0x6e>
 8008c74:	2221      	movs	r2, #33	; 0x21
 8008c76:	2104      	movs	r1, #4
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fc94 	bl	80095a6 <_calloc_r>
 8008c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c80:	60f0      	str	r0, [r6, #12]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e4      	bne.n	8008c52 <_Balloc+0x2e>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	6802      	ldr	r2, [r0, #0]
 8008c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c92:	2300      	movs	r3, #0
 8008c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c98:	e7f7      	b.n	8008c8a <_Balloc+0x66>
 8008c9a:	bf00      	nop
 8008c9c:	0800a62e 	.word	0x0800a62e
 8008ca0:	0800a790 	.word	0x0800a790

08008ca4 <_Bfree>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ca8:	4605      	mov	r5, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	b976      	cbnz	r6, 8008ccc <_Bfree+0x28>
 8008cae:	2010      	movs	r0, #16
 8008cb0:	f7ff ff90 	bl	8008bd4 <malloc>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6268      	str	r0, [r5, #36]	; 0x24
 8008cb8:	b920      	cbnz	r0, 8008cc4 <_Bfree+0x20>
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <_Bfree+0x3c>)
 8008cbc:	4809      	ldr	r0, [pc, #36]	; (8008ce4 <_Bfree+0x40>)
 8008cbe:	218a      	movs	r1, #138	; 0x8a
 8008cc0:	f001 f96e 	bl	8009fa0 <__assert_func>
 8008cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cc8:	6006      	str	r6, [r0, #0]
 8008cca:	60c6      	str	r6, [r0, #12]
 8008ccc:	b13c      	cbz	r4, 8008cde <_Bfree+0x3a>
 8008cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cd0:	6862      	ldr	r2, [r4, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cd8:	6021      	str	r1, [r4, #0]
 8008cda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	0800a62e 	.word	0x0800a62e
 8008ce4:	0800a790 	.word	0x0800a790

08008ce8 <__multadd>:
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	690d      	ldr	r5, [r1, #16]
 8008cee:	4607      	mov	r7, r0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	461e      	mov	r6, r3
 8008cf4:	f101 0c14 	add.w	ip, r1, #20
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	f8dc 3000 	ldr.w	r3, [ip]
 8008cfe:	b299      	uxth	r1, r3
 8008d00:	fb02 6101 	mla	r1, r2, r1, r6
 8008d04:	0c1e      	lsrs	r6, r3, #16
 8008d06:	0c0b      	lsrs	r3, r1, #16
 8008d08:	fb02 3306 	mla	r3, r2, r6, r3
 8008d0c:	b289      	uxth	r1, r1
 8008d0e:	3001      	adds	r0, #1
 8008d10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d14:	4285      	cmp	r5, r0
 8008d16:	f84c 1b04 	str.w	r1, [ip], #4
 8008d1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d1e:	dcec      	bgt.n	8008cfa <__multadd+0x12>
 8008d20:	b30e      	cbz	r6, 8008d66 <__multadd+0x7e>
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	42ab      	cmp	r3, r5
 8008d26:	dc19      	bgt.n	8008d5c <__multadd+0x74>
 8008d28:	6861      	ldr	r1, [r4, #4]
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	3101      	adds	r1, #1
 8008d2e:	f7ff ff79 	bl	8008c24 <_Balloc>
 8008d32:	4680      	mov	r8, r0
 8008d34:	b928      	cbnz	r0, 8008d42 <__multadd+0x5a>
 8008d36:	4602      	mov	r2, r0
 8008d38:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <__multadd+0x84>)
 8008d3a:	480d      	ldr	r0, [pc, #52]	; (8008d70 <__multadd+0x88>)
 8008d3c:	21b5      	movs	r1, #181	; 0xb5
 8008d3e:	f001 f92f 	bl	8009fa0 <__assert_func>
 8008d42:	6922      	ldr	r2, [r4, #16]
 8008d44:	3202      	adds	r2, #2
 8008d46:	f104 010c 	add.w	r1, r4, #12
 8008d4a:	0092      	lsls	r2, r2, #2
 8008d4c:	300c      	adds	r0, #12
 8008d4e:	f7ff ff5b 	bl	8008c08 <memcpy>
 8008d52:	4621      	mov	r1, r4
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7ff ffa5 	bl	8008ca4 <_Bfree>
 8008d5a:	4644      	mov	r4, r8
 8008d5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d60:	3501      	adds	r5, #1
 8008d62:	615e      	str	r6, [r3, #20]
 8008d64:	6125      	str	r5, [r4, #16]
 8008d66:	4620      	mov	r0, r4
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	0800a6a0 	.word	0x0800a6a0
 8008d70:	0800a790 	.word	0x0800a790

08008d74 <__s2b>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	4615      	mov	r5, r2
 8008d7c:	461f      	mov	r7, r3
 8008d7e:	2209      	movs	r2, #9
 8008d80:	3308      	adds	r3, #8
 8008d82:	4606      	mov	r6, r0
 8008d84:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d88:	2100      	movs	r1, #0
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	db09      	blt.n	8008da4 <__s2b+0x30>
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7ff ff47 	bl	8008c24 <_Balloc>
 8008d96:	b940      	cbnz	r0, 8008daa <__s2b+0x36>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <__s2b+0x8c>)
 8008d9c:	4819      	ldr	r0, [pc, #100]	; (8008e04 <__s2b+0x90>)
 8008d9e:	21ce      	movs	r1, #206	; 0xce
 8008da0:	f001 f8fe 	bl	8009fa0 <__assert_func>
 8008da4:	0052      	lsls	r2, r2, #1
 8008da6:	3101      	adds	r1, #1
 8008da8:	e7f0      	b.n	8008d8c <__s2b+0x18>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	6143      	str	r3, [r0, #20]
 8008dae:	2d09      	cmp	r5, #9
 8008db0:	f04f 0301 	mov.w	r3, #1
 8008db4:	6103      	str	r3, [r0, #16]
 8008db6:	dd16      	ble.n	8008de6 <__s2b+0x72>
 8008db8:	f104 0909 	add.w	r9, r4, #9
 8008dbc:	46c8      	mov	r8, r9
 8008dbe:	442c      	add	r4, r5
 8008dc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008dc4:	4601      	mov	r1, r0
 8008dc6:	3b30      	subs	r3, #48	; 0x30
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7ff ff8c 	bl	8008ce8 <__multadd>
 8008dd0:	45a0      	cmp	r8, r4
 8008dd2:	d1f5      	bne.n	8008dc0 <__s2b+0x4c>
 8008dd4:	f1a5 0408 	sub.w	r4, r5, #8
 8008dd8:	444c      	add	r4, r9
 8008dda:	1b2d      	subs	r5, r5, r4
 8008ddc:	1963      	adds	r3, r4, r5
 8008dde:	42bb      	cmp	r3, r7
 8008de0:	db04      	blt.n	8008dec <__s2b+0x78>
 8008de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de6:	340a      	adds	r4, #10
 8008de8:	2509      	movs	r5, #9
 8008dea:	e7f6      	b.n	8008dda <__s2b+0x66>
 8008dec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008df0:	4601      	mov	r1, r0
 8008df2:	3b30      	subs	r3, #48	; 0x30
 8008df4:	220a      	movs	r2, #10
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7ff ff76 	bl	8008ce8 <__multadd>
 8008dfc:	e7ee      	b.n	8008ddc <__s2b+0x68>
 8008dfe:	bf00      	nop
 8008e00:	0800a6a0 	.word	0x0800a6a0
 8008e04:	0800a790 	.word	0x0800a790

08008e08 <__hi0bits>:
 8008e08:	0c03      	lsrs	r3, r0, #16
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	b9d3      	cbnz	r3, 8008e44 <__hi0bits+0x3c>
 8008e0e:	0400      	lsls	r0, r0, #16
 8008e10:	2310      	movs	r3, #16
 8008e12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e16:	bf04      	itt	eq
 8008e18:	0200      	lsleq	r0, r0, #8
 8008e1a:	3308      	addeq	r3, #8
 8008e1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e20:	bf04      	itt	eq
 8008e22:	0100      	lsleq	r0, r0, #4
 8008e24:	3304      	addeq	r3, #4
 8008e26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e2a:	bf04      	itt	eq
 8008e2c:	0080      	lsleq	r0, r0, #2
 8008e2e:	3302      	addeq	r3, #2
 8008e30:	2800      	cmp	r0, #0
 8008e32:	db05      	blt.n	8008e40 <__hi0bits+0x38>
 8008e34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e38:	f103 0301 	add.w	r3, r3, #1
 8008e3c:	bf08      	it	eq
 8008e3e:	2320      	moveq	r3, #32
 8008e40:	4618      	mov	r0, r3
 8008e42:	4770      	bx	lr
 8008e44:	2300      	movs	r3, #0
 8008e46:	e7e4      	b.n	8008e12 <__hi0bits+0xa>

08008e48 <__lo0bits>:
 8008e48:	6803      	ldr	r3, [r0, #0]
 8008e4a:	f013 0207 	ands.w	r2, r3, #7
 8008e4e:	4601      	mov	r1, r0
 8008e50:	d00b      	beq.n	8008e6a <__lo0bits+0x22>
 8008e52:	07da      	lsls	r2, r3, #31
 8008e54:	d423      	bmi.n	8008e9e <__lo0bits+0x56>
 8008e56:	0798      	lsls	r0, r3, #30
 8008e58:	bf49      	itett	mi
 8008e5a:	085b      	lsrmi	r3, r3, #1
 8008e5c:	089b      	lsrpl	r3, r3, #2
 8008e5e:	2001      	movmi	r0, #1
 8008e60:	600b      	strmi	r3, [r1, #0]
 8008e62:	bf5c      	itt	pl
 8008e64:	600b      	strpl	r3, [r1, #0]
 8008e66:	2002      	movpl	r0, #2
 8008e68:	4770      	bx	lr
 8008e6a:	b298      	uxth	r0, r3
 8008e6c:	b9a8      	cbnz	r0, 8008e9a <__lo0bits+0x52>
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	2010      	movs	r0, #16
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	b90a      	cbnz	r2, 8008e7a <__lo0bits+0x32>
 8008e76:	3008      	adds	r0, #8
 8008e78:	0a1b      	lsrs	r3, r3, #8
 8008e7a:	071a      	lsls	r2, r3, #28
 8008e7c:	bf04      	itt	eq
 8008e7e:	091b      	lsreq	r3, r3, #4
 8008e80:	3004      	addeq	r0, #4
 8008e82:	079a      	lsls	r2, r3, #30
 8008e84:	bf04      	itt	eq
 8008e86:	089b      	lsreq	r3, r3, #2
 8008e88:	3002      	addeq	r0, #2
 8008e8a:	07da      	lsls	r2, r3, #31
 8008e8c:	d403      	bmi.n	8008e96 <__lo0bits+0x4e>
 8008e8e:	085b      	lsrs	r3, r3, #1
 8008e90:	f100 0001 	add.w	r0, r0, #1
 8008e94:	d005      	beq.n	8008ea2 <__lo0bits+0x5a>
 8008e96:	600b      	str	r3, [r1, #0]
 8008e98:	4770      	bx	lr
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	e7e9      	b.n	8008e72 <__lo0bits+0x2a>
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	4770      	bx	lr
 8008ea2:	2020      	movs	r0, #32
 8008ea4:	4770      	bx	lr
	...

08008ea8 <__i2b>:
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	460c      	mov	r4, r1
 8008eac:	2101      	movs	r1, #1
 8008eae:	f7ff feb9 	bl	8008c24 <_Balloc>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	b928      	cbnz	r0, 8008ec2 <__i2b+0x1a>
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <__i2b+0x24>)
 8008eb8:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <__i2b+0x28>)
 8008eba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ebe:	f001 f86f 	bl	8009fa0 <__assert_func>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	6144      	str	r4, [r0, #20]
 8008ec6:	6103      	str	r3, [r0, #16]
 8008ec8:	bd10      	pop	{r4, pc}
 8008eca:	bf00      	nop
 8008ecc:	0800a6a0 	.word	0x0800a6a0
 8008ed0:	0800a790 	.word	0x0800a790

08008ed4 <__multiply>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	4691      	mov	r9, r2
 8008eda:	690a      	ldr	r2, [r1, #16]
 8008edc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	bfb8      	it	lt
 8008ee4:	460b      	movlt	r3, r1
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	bfbc      	itt	lt
 8008eea:	464c      	movlt	r4, r9
 8008eec:	4699      	movlt	r9, r3
 8008eee:	6927      	ldr	r7, [r4, #16]
 8008ef0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ef4:	68a3      	ldr	r3, [r4, #8]
 8008ef6:	6861      	ldr	r1, [r4, #4]
 8008ef8:	eb07 060a 	add.w	r6, r7, sl
 8008efc:	42b3      	cmp	r3, r6
 8008efe:	b085      	sub	sp, #20
 8008f00:	bfb8      	it	lt
 8008f02:	3101      	addlt	r1, #1
 8008f04:	f7ff fe8e 	bl	8008c24 <_Balloc>
 8008f08:	b930      	cbnz	r0, 8008f18 <__multiply+0x44>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	4b44      	ldr	r3, [pc, #272]	; (8009020 <__multiply+0x14c>)
 8008f0e:	4845      	ldr	r0, [pc, #276]	; (8009024 <__multiply+0x150>)
 8008f10:	f240 115d 	movw	r1, #349	; 0x15d
 8008f14:	f001 f844 	bl	8009fa0 <__assert_func>
 8008f18:	f100 0514 	add.w	r5, r0, #20
 8008f1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f20:	462b      	mov	r3, r5
 8008f22:	2200      	movs	r2, #0
 8008f24:	4543      	cmp	r3, r8
 8008f26:	d321      	bcc.n	8008f6c <__multiply+0x98>
 8008f28:	f104 0314 	add.w	r3, r4, #20
 8008f2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f30:	f109 0314 	add.w	r3, r9, #20
 8008f34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f38:	9202      	str	r2, [sp, #8]
 8008f3a:	1b3a      	subs	r2, r7, r4
 8008f3c:	3a15      	subs	r2, #21
 8008f3e:	f022 0203 	bic.w	r2, r2, #3
 8008f42:	3204      	adds	r2, #4
 8008f44:	f104 0115 	add.w	r1, r4, #21
 8008f48:	428f      	cmp	r7, r1
 8008f4a:	bf38      	it	cc
 8008f4c:	2204      	movcc	r2, #4
 8008f4e:	9201      	str	r2, [sp, #4]
 8008f50:	9a02      	ldr	r2, [sp, #8]
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d80c      	bhi.n	8008f72 <__multiply+0x9e>
 8008f58:	2e00      	cmp	r6, #0
 8008f5a:	dd03      	ble.n	8008f64 <__multiply+0x90>
 8008f5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d05a      	beq.n	800901a <__multiply+0x146>
 8008f64:	6106      	str	r6, [r0, #16]
 8008f66:	b005      	add	sp, #20
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	f843 2b04 	str.w	r2, [r3], #4
 8008f70:	e7d8      	b.n	8008f24 <__multiply+0x50>
 8008f72:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f76:	f1ba 0f00 	cmp.w	sl, #0
 8008f7a:	d024      	beq.n	8008fc6 <__multiply+0xf2>
 8008f7c:	f104 0e14 	add.w	lr, r4, #20
 8008f80:	46a9      	mov	r9, r5
 8008f82:	f04f 0c00 	mov.w	ip, #0
 8008f86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f8a:	f8d9 1000 	ldr.w	r1, [r9]
 8008f8e:	fa1f fb82 	uxth.w	fp, r2
 8008f92:	b289      	uxth	r1, r1
 8008f94:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8008fa0:	4461      	add	r1, ip
 8008fa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fa6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008faa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fae:	b289      	uxth	r1, r1
 8008fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fb4:	4577      	cmp	r7, lr
 8008fb6:	f849 1b04 	str.w	r1, [r9], #4
 8008fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fbe:	d8e2      	bhi.n	8008f86 <__multiply+0xb2>
 8008fc0:	9a01      	ldr	r2, [sp, #4]
 8008fc2:	f845 c002 	str.w	ip, [r5, r2]
 8008fc6:	9a03      	ldr	r2, [sp, #12]
 8008fc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	f1b9 0f00 	cmp.w	r9, #0
 8008fd2:	d020      	beq.n	8009016 <__multiply+0x142>
 8008fd4:	6829      	ldr	r1, [r5, #0]
 8008fd6:	f104 0c14 	add.w	ip, r4, #20
 8008fda:	46ae      	mov	lr, r5
 8008fdc:	f04f 0a00 	mov.w	sl, #0
 8008fe0:	f8bc b000 	ldrh.w	fp, [ip]
 8008fe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fe8:	fb09 220b 	mla	r2, r9, fp, r2
 8008fec:	4492      	add	sl, r2
 8008fee:	b289      	uxth	r1, r1
 8008ff0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ff4:	f84e 1b04 	str.w	r1, [lr], #4
 8008ff8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ffc:	f8be 1000 	ldrh.w	r1, [lr]
 8009000:	0c12      	lsrs	r2, r2, #16
 8009002:	fb09 1102 	mla	r1, r9, r2, r1
 8009006:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800900a:	4567      	cmp	r7, ip
 800900c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009010:	d8e6      	bhi.n	8008fe0 <__multiply+0x10c>
 8009012:	9a01      	ldr	r2, [sp, #4]
 8009014:	50a9      	str	r1, [r5, r2]
 8009016:	3504      	adds	r5, #4
 8009018:	e79a      	b.n	8008f50 <__multiply+0x7c>
 800901a:	3e01      	subs	r6, #1
 800901c:	e79c      	b.n	8008f58 <__multiply+0x84>
 800901e:	bf00      	nop
 8009020:	0800a6a0 	.word	0x0800a6a0
 8009024:	0800a790 	.word	0x0800a790

08009028 <__pow5mult>:
 8009028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800902c:	4615      	mov	r5, r2
 800902e:	f012 0203 	ands.w	r2, r2, #3
 8009032:	4606      	mov	r6, r0
 8009034:	460f      	mov	r7, r1
 8009036:	d007      	beq.n	8009048 <__pow5mult+0x20>
 8009038:	4c25      	ldr	r4, [pc, #148]	; (80090d0 <__pow5mult+0xa8>)
 800903a:	3a01      	subs	r2, #1
 800903c:	2300      	movs	r3, #0
 800903e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009042:	f7ff fe51 	bl	8008ce8 <__multadd>
 8009046:	4607      	mov	r7, r0
 8009048:	10ad      	asrs	r5, r5, #2
 800904a:	d03d      	beq.n	80090c8 <__pow5mult+0xa0>
 800904c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800904e:	b97c      	cbnz	r4, 8009070 <__pow5mult+0x48>
 8009050:	2010      	movs	r0, #16
 8009052:	f7ff fdbf 	bl	8008bd4 <malloc>
 8009056:	4602      	mov	r2, r0
 8009058:	6270      	str	r0, [r6, #36]	; 0x24
 800905a:	b928      	cbnz	r0, 8009068 <__pow5mult+0x40>
 800905c:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <__pow5mult+0xac>)
 800905e:	481e      	ldr	r0, [pc, #120]	; (80090d8 <__pow5mult+0xb0>)
 8009060:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009064:	f000 ff9c 	bl	8009fa0 <__assert_func>
 8009068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800906c:	6004      	str	r4, [r0, #0]
 800906e:	60c4      	str	r4, [r0, #12]
 8009070:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009078:	b94c      	cbnz	r4, 800908e <__pow5mult+0x66>
 800907a:	f240 2171 	movw	r1, #625	; 0x271
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff ff12 	bl	8008ea8 <__i2b>
 8009084:	2300      	movs	r3, #0
 8009086:	f8c8 0008 	str.w	r0, [r8, #8]
 800908a:	4604      	mov	r4, r0
 800908c:	6003      	str	r3, [r0, #0]
 800908e:	f04f 0900 	mov.w	r9, #0
 8009092:	07eb      	lsls	r3, r5, #31
 8009094:	d50a      	bpl.n	80090ac <__pow5mult+0x84>
 8009096:	4639      	mov	r1, r7
 8009098:	4622      	mov	r2, r4
 800909a:	4630      	mov	r0, r6
 800909c:	f7ff ff1a 	bl	8008ed4 <__multiply>
 80090a0:	4639      	mov	r1, r7
 80090a2:	4680      	mov	r8, r0
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7ff fdfd 	bl	8008ca4 <_Bfree>
 80090aa:	4647      	mov	r7, r8
 80090ac:	106d      	asrs	r5, r5, #1
 80090ae:	d00b      	beq.n	80090c8 <__pow5mult+0xa0>
 80090b0:	6820      	ldr	r0, [r4, #0]
 80090b2:	b938      	cbnz	r0, 80090c4 <__pow5mult+0x9c>
 80090b4:	4622      	mov	r2, r4
 80090b6:	4621      	mov	r1, r4
 80090b8:	4630      	mov	r0, r6
 80090ba:	f7ff ff0b 	bl	8008ed4 <__multiply>
 80090be:	6020      	str	r0, [r4, #0]
 80090c0:	f8c0 9000 	str.w	r9, [r0]
 80090c4:	4604      	mov	r4, r0
 80090c6:	e7e4      	b.n	8009092 <__pow5mult+0x6a>
 80090c8:	4638      	mov	r0, r7
 80090ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ce:	bf00      	nop
 80090d0:	0800a8e0 	.word	0x0800a8e0
 80090d4:	0800a62e 	.word	0x0800a62e
 80090d8:	0800a790 	.word	0x0800a790

080090dc <__lshift>:
 80090dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e0:	460c      	mov	r4, r1
 80090e2:	6849      	ldr	r1, [r1, #4]
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	4607      	mov	r7, r0
 80090ee:	4691      	mov	r9, r2
 80090f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090f4:	f108 0601 	add.w	r6, r8, #1
 80090f8:	42b3      	cmp	r3, r6
 80090fa:	db0b      	blt.n	8009114 <__lshift+0x38>
 80090fc:	4638      	mov	r0, r7
 80090fe:	f7ff fd91 	bl	8008c24 <_Balloc>
 8009102:	4605      	mov	r5, r0
 8009104:	b948      	cbnz	r0, 800911a <__lshift+0x3e>
 8009106:	4602      	mov	r2, r0
 8009108:	4b2a      	ldr	r3, [pc, #168]	; (80091b4 <__lshift+0xd8>)
 800910a:	482b      	ldr	r0, [pc, #172]	; (80091b8 <__lshift+0xdc>)
 800910c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009110:	f000 ff46 	bl	8009fa0 <__assert_func>
 8009114:	3101      	adds	r1, #1
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	e7ee      	b.n	80090f8 <__lshift+0x1c>
 800911a:	2300      	movs	r3, #0
 800911c:	f100 0114 	add.w	r1, r0, #20
 8009120:	f100 0210 	add.w	r2, r0, #16
 8009124:	4618      	mov	r0, r3
 8009126:	4553      	cmp	r3, sl
 8009128:	db37      	blt.n	800919a <__lshift+0xbe>
 800912a:	6920      	ldr	r0, [r4, #16]
 800912c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009130:	f104 0314 	add.w	r3, r4, #20
 8009134:	f019 091f 	ands.w	r9, r9, #31
 8009138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800913c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009140:	d02f      	beq.n	80091a2 <__lshift+0xc6>
 8009142:	f1c9 0e20 	rsb	lr, r9, #32
 8009146:	468a      	mov	sl, r1
 8009148:	f04f 0c00 	mov.w	ip, #0
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	fa02 f209 	lsl.w	r2, r2, r9
 8009152:	ea42 020c 	orr.w	r2, r2, ip
 8009156:	f84a 2b04 	str.w	r2, [sl], #4
 800915a:	f853 2b04 	ldr.w	r2, [r3], #4
 800915e:	4298      	cmp	r0, r3
 8009160:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009164:	d8f2      	bhi.n	800914c <__lshift+0x70>
 8009166:	1b03      	subs	r3, r0, r4
 8009168:	3b15      	subs	r3, #21
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	3304      	adds	r3, #4
 8009170:	f104 0215 	add.w	r2, r4, #21
 8009174:	4290      	cmp	r0, r2
 8009176:	bf38      	it	cc
 8009178:	2304      	movcc	r3, #4
 800917a:	f841 c003 	str.w	ip, [r1, r3]
 800917e:	f1bc 0f00 	cmp.w	ip, #0
 8009182:	d001      	beq.n	8009188 <__lshift+0xac>
 8009184:	f108 0602 	add.w	r6, r8, #2
 8009188:	3e01      	subs	r6, #1
 800918a:	4638      	mov	r0, r7
 800918c:	612e      	str	r6, [r5, #16]
 800918e:	4621      	mov	r1, r4
 8009190:	f7ff fd88 	bl	8008ca4 <_Bfree>
 8009194:	4628      	mov	r0, r5
 8009196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919a:	f842 0f04 	str.w	r0, [r2, #4]!
 800919e:	3301      	adds	r3, #1
 80091a0:	e7c1      	b.n	8009126 <__lshift+0x4a>
 80091a2:	3904      	subs	r1, #4
 80091a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80091ac:	4298      	cmp	r0, r3
 80091ae:	d8f9      	bhi.n	80091a4 <__lshift+0xc8>
 80091b0:	e7ea      	b.n	8009188 <__lshift+0xac>
 80091b2:	bf00      	nop
 80091b4:	0800a6a0 	.word	0x0800a6a0
 80091b8:	0800a790 	.word	0x0800a790

080091bc <__mcmp>:
 80091bc:	b530      	push	{r4, r5, lr}
 80091be:	6902      	ldr	r2, [r0, #16]
 80091c0:	690c      	ldr	r4, [r1, #16]
 80091c2:	1b12      	subs	r2, r2, r4
 80091c4:	d10e      	bne.n	80091e4 <__mcmp+0x28>
 80091c6:	f100 0314 	add.w	r3, r0, #20
 80091ca:	3114      	adds	r1, #20
 80091cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091dc:	42a5      	cmp	r5, r4
 80091de:	d003      	beq.n	80091e8 <__mcmp+0x2c>
 80091e0:	d305      	bcc.n	80091ee <__mcmp+0x32>
 80091e2:	2201      	movs	r2, #1
 80091e4:	4610      	mov	r0, r2
 80091e6:	bd30      	pop	{r4, r5, pc}
 80091e8:	4283      	cmp	r3, r0
 80091ea:	d3f3      	bcc.n	80091d4 <__mcmp+0x18>
 80091ec:	e7fa      	b.n	80091e4 <__mcmp+0x28>
 80091ee:	f04f 32ff 	mov.w	r2, #4294967295
 80091f2:	e7f7      	b.n	80091e4 <__mcmp+0x28>

080091f4 <__mdiff>:
 80091f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	460c      	mov	r4, r1
 80091fa:	4606      	mov	r6, r0
 80091fc:	4611      	mov	r1, r2
 80091fe:	4620      	mov	r0, r4
 8009200:	4690      	mov	r8, r2
 8009202:	f7ff ffdb 	bl	80091bc <__mcmp>
 8009206:	1e05      	subs	r5, r0, #0
 8009208:	d110      	bne.n	800922c <__mdiff+0x38>
 800920a:	4629      	mov	r1, r5
 800920c:	4630      	mov	r0, r6
 800920e:	f7ff fd09 	bl	8008c24 <_Balloc>
 8009212:	b930      	cbnz	r0, 8009222 <__mdiff+0x2e>
 8009214:	4b3a      	ldr	r3, [pc, #232]	; (8009300 <__mdiff+0x10c>)
 8009216:	4602      	mov	r2, r0
 8009218:	f240 2132 	movw	r1, #562	; 0x232
 800921c:	4839      	ldr	r0, [pc, #228]	; (8009304 <__mdiff+0x110>)
 800921e:	f000 febf 	bl	8009fa0 <__assert_func>
 8009222:	2301      	movs	r3, #1
 8009224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922c:	bfa4      	itt	ge
 800922e:	4643      	movge	r3, r8
 8009230:	46a0      	movge	r8, r4
 8009232:	4630      	mov	r0, r6
 8009234:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009238:	bfa6      	itte	ge
 800923a:	461c      	movge	r4, r3
 800923c:	2500      	movge	r5, #0
 800923e:	2501      	movlt	r5, #1
 8009240:	f7ff fcf0 	bl	8008c24 <_Balloc>
 8009244:	b920      	cbnz	r0, 8009250 <__mdiff+0x5c>
 8009246:	4b2e      	ldr	r3, [pc, #184]	; (8009300 <__mdiff+0x10c>)
 8009248:	4602      	mov	r2, r0
 800924a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800924e:	e7e5      	b.n	800921c <__mdiff+0x28>
 8009250:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009254:	6926      	ldr	r6, [r4, #16]
 8009256:	60c5      	str	r5, [r0, #12]
 8009258:	f104 0914 	add.w	r9, r4, #20
 800925c:	f108 0514 	add.w	r5, r8, #20
 8009260:	f100 0e14 	add.w	lr, r0, #20
 8009264:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009268:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800926c:	f108 0210 	add.w	r2, r8, #16
 8009270:	46f2      	mov	sl, lr
 8009272:	2100      	movs	r1, #0
 8009274:	f859 3b04 	ldr.w	r3, [r9], #4
 8009278:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800927c:	fa1f f883 	uxth.w	r8, r3
 8009280:	fa11 f18b 	uxtah	r1, r1, fp
 8009284:	0c1b      	lsrs	r3, r3, #16
 8009286:	eba1 0808 	sub.w	r8, r1, r8
 800928a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800928e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009292:	fa1f f888 	uxth.w	r8, r8
 8009296:	1419      	asrs	r1, r3, #16
 8009298:	454e      	cmp	r6, r9
 800929a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800929e:	f84a 3b04 	str.w	r3, [sl], #4
 80092a2:	d8e7      	bhi.n	8009274 <__mdiff+0x80>
 80092a4:	1b33      	subs	r3, r6, r4
 80092a6:	3b15      	subs	r3, #21
 80092a8:	f023 0303 	bic.w	r3, r3, #3
 80092ac:	3304      	adds	r3, #4
 80092ae:	3415      	adds	r4, #21
 80092b0:	42a6      	cmp	r6, r4
 80092b2:	bf38      	it	cc
 80092b4:	2304      	movcc	r3, #4
 80092b6:	441d      	add	r5, r3
 80092b8:	4473      	add	r3, lr
 80092ba:	469e      	mov	lr, r3
 80092bc:	462e      	mov	r6, r5
 80092be:	4566      	cmp	r6, ip
 80092c0:	d30e      	bcc.n	80092e0 <__mdiff+0xec>
 80092c2:	f10c 0203 	add.w	r2, ip, #3
 80092c6:	1b52      	subs	r2, r2, r5
 80092c8:	f022 0203 	bic.w	r2, r2, #3
 80092cc:	3d03      	subs	r5, #3
 80092ce:	45ac      	cmp	ip, r5
 80092d0:	bf38      	it	cc
 80092d2:	2200      	movcc	r2, #0
 80092d4:	441a      	add	r2, r3
 80092d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092da:	b17b      	cbz	r3, 80092fc <__mdiff+0x108>
 80092dc:	6107      	str	r7, [r0, #16]
 80092de:	e7a3      	b.n	8009228 <__mdiff+0x34>
 80092e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80092e4:	fa11 f288 	uxtah	r2, r1, r8
 80092e8:	1414      	asrs	r4, r2, #16
 80092ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092ee:	b292      	uxth	r2, r2
 80092f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092f4:	f84e 2b04 	str.w	r2, [lr], #4
 80092f8:	1421      	asrs	r1, r4, #16
 80092fa:	e7e0      	b.n	80092be <__mdiff+0xca>
 80092fc:	3f01      	subs	r7, #1
 80092fe:	e7ea      	b.n	80092d6 <__mdiff+0xe2>
 8009300:	0800a6a0 	.word	0x0800a6a0
 8009304:	0800a790 	.word	0x0800a790

08009308 <__ulp>:
 8009308:	b082      	sub	sp, #8
 800930a:	ed8d 0b00 	vstr	d0, [sp]
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	4912      	ldr	r1, [pc, #72]	; (800935c <__ulp+0x54>)
 8009312:	4019      	ands	r1, r3
 8009314:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009318:	2900      	cmp	r1, #0
 800931a:	dd05      	ble.n	8009328 <__ulp+0x20>
 800931c:	2200      	movs	r2, #0
 800931e:	460b      	mov	r3, r1
 8009320:	ec43 2b10 	vmov	d0, r2, r3
 8009324:	b002      	add	sp, #8
 8009326:	4770      	bx	lr
 8009328:	4249      	negs	r1, r1
 800932a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800932e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 0300 	mov.w	r3, #0
 800933a:	da04      	bge.n	8009346 <__ulp+0x3e>
 800933c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009340:	fa41 f300 	asr.w	r3, r1, r0
 8009344:	e7ec      	b.n	8009320 <__ulp+0x18>
 8009346:	f1a0 0114 	sub.w	r1, r0, #20
 800934a:	291e      	cmp	r1, #30
 800934c:	bfda      	itte	le
 800934e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009352:	fa20 f101 	lsrle.w	r1, r0, r1
 8009356:	2101      	movgt	r1, #1
 8009358:	460a      	mov	r2, r1
 800935a:	e7e1      	b.n	8009320 <__ulp+0x18>
 800935c:	7ff00000 	.word	0x7ff00000

08009360 <__b2d>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	6905      	ldr	r5, [r0, #16]
 8009364:	f100 0714 	add.w	r7, r0, #20
 8009368:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800936c:	1f2e      	subs	r6, r5, #4
 800936e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff fd48 	bl	8008e08 <__hi0bits>
 8009378:	f1c0 0320 	rsb	r3, r0, #32
 800937c:	280a      	cmp	r0, #10
 800937e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80093fc <__b2d+0x9c>
 8009382:	600b      	str	r3, [r1, #0]
 8009384:	dc14      	bgt.n	80093b0 <__b2d+0x50>
 8009386:	f1c0 0e0b 	rsb	lr, r0, #11
 800938a:	fa24 f10e 	lsr.w	r1, r4, lr
 800938e:	42b7      	cmp	r7, r6
 8009390:	ea41 030c 	orr.w	r3, r1, ip
 8009394:	bf34      	ite	cc
 8009396:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800939a:	2100      	movcs	r1, #0
 800939c:	3015      	adds	r0, #21
 800939e:	fa04 f000 	lsl.w	r0, r4, r0
 80093a2:	fa21 f10e 	lsr.w	r1, r1, lr
 80093a6:	ea40 0201 	orr.w	r2, r0, r1
 80093aa:	ec43 2b10 	vmov	d0, r2, r3
 80093ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b0:	42b7      	cmp	r7, r6
 80093b2:	bf3a      	itte	cc
 80093b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80093bc:	2100      	movcs	r1, #0
 80093be:	380b      	subs	r0, #11
 80093c0:	d017      	beq.n	80093f2 <__b2d+0x92>
 80093c2:	f1c0 0c20 	rsb	ip, r0, #32
 80093c6:	fa04 f500 	lsl.w	r5, r4, r0
 80093ca:	42be      	cmp	r6, r7
 80093cc:	fa21 f40c 	lsr.w	r4, r1, ip
 80093d0:	ea45 0504 	orr.w	r5, r5, r4
 80093d4:	bf8c      	ite	hi
 80093d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80093da:	2400      	movls	r4, #0
 80093dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80093e0:	fa01 f000 	lsl.w	r0, r1, r0
 80093e4:	fa24 f40c 	lsr.w	r4, r4, ip
 80093e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093ec:	ea40 0204 	orr.w	r2, r0, r4
 80093f0:	e7db      	b.n	80093aa <__b2d+0x4a>
 80093f2:	ea44 030c 	orr.w	r3, r4, ip
 80093f6:	460a      	mov	r2, r1
 80093f8:	e7d7      	b.n	80093aa <__b2d+0x4a>
 80093fa:	bf00      	nop
 80093fc:	3ff00000 	.word	0x3ff00000

08009400 <__d2b>:
 8009400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009404:	4689      	mov	r9, r1
 8009406:	2101      	movs	r1, #1
 8009408:	ec57 6b10 	vmov	r6, r7, d0
 800940c:	4690      	mov	r8, r2
 800940e:	f7ff fc09 	bl	8008c24 <_Balloc>
 8009412:	4604      	mov	r4, r0
 8009414:	b930      	cbnz	r0, 8009424 <__d2b+0x24>
 8009416:	4602      	mov	r2, r0
 8009418:	4b25      	ldr	r3, [pc, #148]	; (80094b0 <__d2b+0xb0>)
 800941a:	4826      	ldr	r0, [pc, #152]	; (80094b4 <__d2b+0xb4>)
 800941c:	f240 310a 	movw	r1, #778	; 0x30a
 8009420:	f000 fdbe 	bl	8009fa0 <__assert_func>
 8009424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800942c:	bb35      	cbnz	r5, 800947c <__d2b+0x7c>
 800942e:	2e00      	cmp	r6, #0
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	d028      	beq.n	8009486 <__d2b+0x86>
 8009434:	4668      	mov	r0, sp
 8009436:	9600      	str	r6, [sp, #0]
 8009438:	f7ff fd06 	bl	8008e48 <__lo0bits>
 800943c:	9900      	ldr	r1, [sp, #0]
 800943e:	b300      	cbz	r0, 8009482 <__d2b+0x82>
 8009440:	9a01      	ldr	r2, [sp, #4]
 8009442:	f1c0 0320 	rsb	r3, r0, #32
 8009446:	fa02 f303 	lsl.w	r3, r2, r3
 800944a:	430b      	orrs	r3, r1
 800944c:	40c2      	lsrs	r2, r0
 800944e:	6163      	str	r3, [r4, #20]
 8009450:	9201      	str	r2, [sp, #4]
 8009452:	9b01      	ldr	r3, [sp, #4]
 8009454:	61a3      	str	r3, [r4, #24]
 8009456:	2b00      	cmp	r3, #0
 8009458:	bf14      	ite	ne
 800945a:	2202      	movne	r2, #2
 800945c:	2201      	moveq	r2, #1
 800945e:	6122      	str	r2, [r4, #16]
 8009460:	b1d5      	cbz	r5, 8009498 <__d2b+0x98>
 8009462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009466:	4405      	add	r5, r0
 8009468:	f8c9 5000 	str.w	r5, [r9]
 800946c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009470:	f8c8 0000 	str.w	r0, [r8]
 8009474:	4620      	mov	r0, r4
 8009476:	b003      	add	sp, #12
 8009478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009480:	e7d5      	b.n	800942e <__d2b+0x2e>
 8009482:	6161      	str	r1, [r4, #20]
 8009484:	e7e5      	b.n	8009452 <__d2b+0x52>
 8009486:	a801      	add	r0, sp, #4
 8009488:	f7ff fcde 	bl	8008e48 <__lo0bits>
 800948c:	9b01      	ldr	r3, [sp, #4]
 800948e:	6163      	str	r3, [r4, #20]
 8009490:	2201      	movs	r2, #1
 8009492:	6122      	str	r2, [r4, #16]
 8009494:	3020      	adds	r0, #32
 8009496:	e7e3      	b.n	8009460 <__d2b+0x60>
 8009498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800949c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094a0:	f8c9 0000 	str.w	r0, [r9]
 80094a4:	6918      	ldr	r0, [r3, #16]
 80094a6:	f7ff fcaf 	bl	8008e08 <__hi0bits>
 80094aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ae:	e7df      	b.n	8009470 <__d2b+0x70>
 80094b0:	0800a6a0 	.word	0x0800a6a0
 80094b4:	0800a790 	.word	0x0800a790

080094b8 <__ratio>:
 80094b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094bc:	4688      	mov	r8, r1
 80094be:	4669      	mov	r1, sp
 80094c0:	4681      	mov	r9, r0
 80094c2:	f7ff ff4d 	bl	8009360 <__b2d>
 80094c6:	a901      	add	r1, sp, #4
 80094c8:	4640      	mov	r0, r8
 80094ca:	ec55 4b10 	vmov	r4, r5, d0
 80094ce:	f7ff ff47 	bl	8009360 <__b2d>
 80094d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094da:	eba3 0c02 	sub.w	ip, r3, r2
 80094de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80094e8:	ec51 0b10 	vmov	r0, r1, d0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	bfd6      	itet	le
 80094f0:	460a      	movle	r2, r1
 80094f2:	462a      	movgt	r2, r5
 80094f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094f8:	468b      	mov	fp, r1
 80094fa:	462f      	mov	r7, r5
 80094fc:	bfd4      	ite	le
 80094fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009502:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009506:	4620      	mov	r0, r4
 8009508:	ee10 2a10 	vmov	r2, s0
 800950c:	465b      	mov	r3, fp
 800950e:	4639      	mov	r1, r7
 8009510:	f7f7 f9bc 	bl	800088c <__aeabi_ddiv>
 8009514:	ec41 0b10 	vmov	d0, r0, r1
 8009518:	b003      	add	sp, #12
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800951e <__copybits>:
 800951e:	3901      	subs	r1, #1
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	1149      	asrs	r1, r1, #5
 8009524:	6914      	ldr	r4, [r2, #16]
 8009526:	3101      	adds	r1, #1
 8009528:	f102 0314 	add.w	r3, r2, #20
 800952c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009530:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009534:	1f05      	subs	r5, r0, #4
 8009536:	42a3      	cmp	r3, r4
 8009538:	d30c      	bcc.n	8009554 <__copybits+0x36>
 800953a:	1aa3      	subs	r3, r4, r2
 800953c:	3b11      	subs	r3, #17
 800953e:	f023 0303 	bic.w	r3, r3, #3
 8009542:	3211      	adds	r2, #17
 8009544:	42a2      	cmp	r2, r4
 8009546:	bf88      	it	hi
 8009548:	2300      	movhi	r3, #0
 800954a:	4418      	add	r0, r3
 800954c:	2300      	movs	r3, #0
 800954e:	4288      	cmp	r0, r1
 8009550:	d305      	bcc.n	800955e <__copybits+0x40>
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	f853 6b04 	ldr.w	r6, [r3], #4
 8009558:	f845 6f04 	str.w	r6, [r5, #4]!
 800955c:	e7eb      	b.n	8009536 <__copybits+0x18>
 800955e:	f840 3b04 	str.w	r3, [r0], #4
 8009562:	e7f4      	b.n	800954e <__copybits+0x30>

08009564 <__any_on>:
 8009564:	f100 0214 	add.w	r2, r0, #20
 8009568:	6900      	ldr	r0, [r0, #16]
 800956a:	114b      	asrs	r3, r1, #5
 800956c:	4298      	cmp	r0, r3
 800956e:	b510      	push	{r4, lr}
 8009570:	db11      	blt.n	8009596 <__any_on+0x32>
 8009572:	dd0a      	ble.n	800958a <__any_on+0x26>
 8009574:	f011 011f 	ands.w	r1, r1, #31
 8009578:	d007      	beq.n	800958a <__any_on+0x26>
 800957a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800957e:	fa24 f001 	lsr.w	r0, r4, r1
 8009582:	fa00 f101 	lsl.w	r1, r0, r1
 8009586:	428c      	cmp	r4, r1
 8009588:	d10b      	bne.n	80095a2 <__any_on+0x3e>
 800958a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800958e:	4293      	cmp	r3, r2
 8009590:	d803      	bhi.n	800959a <__any_on+0x36>
 8009592:	2000      	movs	r0, #0
 8009594:	bd10      	pop	{r4, pc}
 8009596:	4603      	mov	r3, r0
 8009598:	e7f7      	b.n	800958a <__any_on+0x26>
 800959a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800959e:	2900      	cmp	r1, #0
 80095a0:	d0f5      	beq.n	800958e <__any_on+0x2a>
 80095a2:	2001      	movs	r0, #1
 80095a4:	e7f6      	b.n	8009594 <__any_on+0x30>

080095a6 <_calloc_r>:
 80095a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095a8:	fba1 2402 	umull	r2, r4, r1, r2
 80095ac:	b94c      	cbnz	r4, 80095c2 <_calloc_r+0x1c>
 80095ae:	4611      	mov	r1, r2
 80095b0:	9201      	str	r2, [sp, #4]
 80095b2:	f000 f87b 	bl	80096ac <_malloc_r>
 80095b6:	9a01      	ldr	r2, [sp, #4]
 80095b8:	4605      	mov	r5, r0
 80095ba:	b930      	cbnz	r0, 80095ca <_calloc_r+0x24>
 80095bc:	4628      	mov	r0, r5
 80095be:	b003      	add	sp, #12
 80095c0:	bd30      	pop	{r4, r5, pc}
 80095c2:	220c      	movs	r2, #12
 80095c4:	6002      	str	r2, [r0, #0]
 80095c6:	2500      	movs	r5, #0
 80095c8:	e7f8      	b.n	80095bc <_calloc_r+0x16>
 80095ca:	4621      	mov	r1, r4
 80095cc:	f7fc faae 	bl	8005b2c <memset>
 80095d0:	e7f4      	b.n	80095bc <_calloc_r+0x16>
	...

080095d4 <_free_r>:
 80095d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095d6:	2900      	cmp	r1, #0
 80095d8:	d044      	beq.n	8009664 <_free_r+0x90>
 80095da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095de:	9001      	str	r0, [sp, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f1a1 0404 	sub.w	r4, r1, #4
 80095e6:	bfb8      	it	lt
 80095e8:	18e4      	addlt	r4, r4, r3
 80095ea:	f000 fe6d 	bl	800a2c8 <__malloc_lock>
 80095ee:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <_free_r+0x94>)
 80095f0:	9801      	ldr	r0, [sp, #4]
 80095f2:	6813      	ldr	r3, [r2, #0]
 80095f4:	b933      	cbnz	r3, 8009604 <_free_r+0x30>
 80095f6:	6063      	str	r3, [r4, #4]
 80095f8:	6014      	str	r4, [r2, #0]
 80095fa:	b003      	add	sp, #12
 80095fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009600:	f000 be68 	b.w	800a2d4 <__malloc_unlock>
 8009604:	42a3      	cmp	r3, r4
 8009606:	d908      	bls.n	800961a <_free_r+0x46>
 8009608:	6825      	ldr	r5, [r4, #0]
 800960a:	1961      	adds	r1, r4, r5
 800960c:	428b      	cmp	r3, r1
 800960e:	bf01      	itttt	eq
 8009610:	6819      	ldreq	r1, [r3, #0]
 8009612:	685b      	ldreq	r3, [r3, #4]
 8009614:	1949      	addeq	r1, r1, r5
 8009616:	6021      	streq	r1, [r4, #0]
 8009618:	e7ed      	b.n	80095f6 <_free_r+0x22>
 800961a:	461a      	mov	r2, r3
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	b10b      	cbz	r3, 8009624 <_free_r+0x50>
 8009620:	42a3      	cmp	r3, r4
 8009622:	d9fa      	bls.n	800961a <_free_r+0x46>
 8009624:	6811      	ldr	r1, [r2, #0]
 8009626:	1855      	adds	r5, r2, r1
 8009628:	42a5      	cmp	r5, r4
 800962a:	d10b      	bne.n	8009644 <_free_r+0x70>
 800962c:	6824      	ldr	r4, [r4, #0]
 800962e:	4421      	add	r1, r4
 8009630:	1854      	adds	r4, r2, r1
 8009632:	42a3      	cmp	r3, r4
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	d1e0      	bne.n	80095fa <_free_r+0x26>
 8009638:	681c      	ldr	r4, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	6053      	str	r3, [r2, #4]
 800963e:	4421      	add	r1, r4
 8009640:	6011      	str	r1, [r2, #0]
 8009642:	e7da      	b.n	80095fa <_free_r+0x26>
 8009644:	d902      	bls.n	800964c <_free_r+0x78>
 8009646:	230c      	movs	r3, #12
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	e7d6      	b.n	80095fa <_free_r+0x26>
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	1961      	adds	r1, r4, r5
 8009650:	428b      	cmp	r3, r1
 8009652:	bf04      	itt	eq
 8009654:	6819      	ldreq	r1, [r3, #0]
 8009656:	685b      	ldreq	r3, [r3, #4]
 8009658:	6063      	str	r3, [r4, #4]
 800965a:	bf04      	itt	eq
 800965c:	1949      	addeq	r1, r1, r5
 800965e:	6021      	streq	r1, [r4, #0]
 8009660:	6054      	str	r4, [r2, #4]
 8009662:	e7ca      	b.n	80095fa <_free_r+0x26>
 8009664:	b003      	add	sp, #12
 8009666:	bd30      	pop	{r4, r5, pc}
 8009668:	20000338 	.word	0x20000338

0800966c <sbrk_aligned>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4e0e      	ldr	r6, [pc, #56]	; (80096a8 <sbrk_aligned+0x3c>)
 8009670:	460c      	mov	r4, r1
 8009672:	6831      	ldr	r1, [r6, #0]
 8009674:	4605      	mov	r5, r0
 8009676:	b911      	cbnz	r1, 800967e <sbrk_aligned+0x12>
 8009678:	f000 fb4a 	bl	8009d10 <_sbrk_r>
 800967c:	6030      	str	r0, [r6, #0]
 800967e:	4621      	mov	r1, r4
 8009680:	4628      	mov	r0, r5
 8009682:	f000 fb45 	bl	8009d10 <_sbrk_r>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d00a      	beq.n	80096a0 <sbrk_aligned+0x34>
 800968a:	1cc4      	adds	r4, r0, #3
 800968c:	f024 0403 	bic.w	r4, r4, #3
 8009690:	42a0      	cmp	r0, r4
 8009692:	d007      	beq.n	80096a4 <sbrk_aligned+0x38>
 8009694:	1a21      	subs	r1, r4, r0
 8009696:	4628      	mov	r0, r5
 8009698:	f000 fb3a 	bl	8009d10 <_sbrk_r>
 800969c:	3001      	adds	r0, #1
 800969e:	d101      	bne.n	80096a4 <sbrk_aligned+0x38>
 80096a0:	f04f 34ff 	mov.w	r4, #4294967295
 80096a4:	4620      	mov	r0, r4
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	2000033c 	.word	0x2000033c

080096ac <_malloc_r>:
 80096ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b0:	1ccd      	adds	r5, r1, #3
 80096b2:	f025 0503 	bic.w	r5, r5, #3
 80096b6:	3508      	adds	r5, #8
 80096b8:	2d0c      	cmp	r5, #12
 80096ba:	bf38      	it	cc
 80096bc:	250c      	movcc	r5, #12
 80096be:	2d00      	cmp	r5, #0
 80096c0:	4607      	mov	r7, r0
 80096c2:	db01      	blt.n	80096c8 <_malloc_r+0x1c>
 80096c4:	42a9      	cmp	r1, r5
 80096c6:	d905      	bls.n	80096d4 <_malloc_r+0x28>
 80096c8:	230c      	movs	r3, #12
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	2600      	movs	r6, #0
 80096ce:	4630      	mov	r0, r6
 80096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d4:	4e2e      	ldr	r6, [pc, #184]	; (8009790 <_malloc_r+0xe4>)
 80096d6:	f000 fdf7 	bl	800a2c8 <__malloc_lock>
 80096da:	6833      	ldr	r3, [r6, #0]
 80096dc:	461c      	mov	r4, r3
 80096de:	bb34      	cbnz	r4, 800972e <_malloc_r+0x82>
 80096e0:	4629      	mov	r1, r5
 80096e2:	4638      	mov	r0, r7
 80096e4:	f7ff ffc2 	bl	800966c <sbrk_aligned>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	4604      	mov	r4, r0
 80096ec:	d14d      	bne.n	800978a <_malloc_r+0xde>
 80096ee:	6834      	ldr	r4, [r6, #0]
 80096f0:	4626      	mov	r6, r4
 80096f2:	2e00      	cmp	r6, #0
 80096f4:	d140      	bne.n	8009778 <_malloc_r+0xcc>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	4631      	mov	r1, r6
 80096fa:	4638      	mov	r0, r7
 80096fc:	eb04 0803 	add.w	r8, r4, r3
 8009700:	f000 fb06 	bl	8009d10 <_sbrk_r>
 8009704:	4580      	cmp	r8, r0
 8009706:	d13a      	bne.n	800977e <_malloc_r+0xd2>
 8009708:	6821      	ldr	r1, [r4, #0]
 800970a:	3503      	adds	r5, #3
 800970c:	1a6d      	subs	r5, r5, r1
 800970e:	f025 0503 	bic.w	r5, r5, #3
 8009712:	3508      	adds	r5, #8
 8009714:	2d0c      	cmp	r5, #12
 8009716:	bf38      	it	cc
 8009718:	250c      	movcc	r5, #12
 800971a:	4629      	mov	r1, r5
 800971c:	4638      	mov	r0, r7
 800971e:	f7ff ffa5 	bl	800966c <sbrk_aligned>
 8009722:	3001      	adds	r0, #1
 8009724:	d02b      	beq.n	800977e <_malloc_r+0xd2>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	442b      	add	r3, r5
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	e00e      	b.n	800974c <_malloc_r+0xa0>
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	1b52      	subs	r2, r2, r5
 8009732:	d41e      	bmi.n	8009772 <_malloc_r+0xc6>
 8009734:	2a0b      	cmp	r2, #11
 8009736:	d916      	bls.n	8009766 <_malloc_r+0xba>
 8009738:	1961      	adds	r1, r4, r5
 800973a:	42a3      	cmp	r3, r4
 800973c:	6025      	str	r5, [r4, #0]
 800973e:	bf18      	it	ne
 8009740:	6059      	strne	r1, [r3, #4]
 8009742:	6863      	ldr	r3, [r4, #4]
 8009744:	bf08      	it	eq
 8009746:	6031      	streq	r1, [r6, #0]
 8009748:	5162      	str	r2, [r4, r5]
 800974a:	604b      	str	r3, [r1, #4]
 800974c:	4638      	mov	r0, r7
 800974e:	f104 060b 	add.w	r6, r4, #11
 8009752:	f000 fdbf 	bl	800a2d4 <__malloc_unlock>
 8009756:	f026 0607 	bic.w	r6, r6, #7
 800975a:	1d23      	adds	r3, r4, #4
 800975c:	1af2      	subs	r2, r6, r3
 800975e:	d0b6      	beq.n	80096ce <_malloc_r+0x22>
 8009760:	1b9b      	subs	r3, r3, r6
 8009762:	50a3      	str	r3, [r4, r2]
 8009764:	e7b3      	b.n	80096ce <_malloc_r+0x22>
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	42a3      	cmp	r3, r4
 800976a:	bf0c      	ite	eq
 800976c:	6032      	streq	r2, [r6, #0]
 800976e:	605a      	strne	r2, [r3, #4]
 8009770:	e7ec      	b.n	800974c <_malloc_r+0xa0>
 8009772:	4623      	mov	r3, r4
 8009774:	6864      	ldr	r4, [r4, #4]
 8009776:	e7b2      	b.n	80096de <_malloc_r+0x32>
 8009778:	4634      	mov	r4, r6
 800977a:	6876      	ldr	r6, [r6, #4]
 800977c:	e7b9      	b.n	80096f2 <_malloc_r+0x46>
 800977e:	230c      	movs	r3, #12
 8009780:	603b      	str	r3, [r7, #0]
 8009782:	4638      	mov	r0, r7
 8009784:	f000 fda6 	bl	800a2d4 <__malloc_unlock>
 8009788:	e7a1      	b.n	80096ce <_malloc_r+0x22>
 800978a:	6025      	str	r5, [r4, #0]
 800978c:	e7de      	b.n	800974c <_malloc_r+0xa0>
 800978e:	bf00      	nop
 8009790:	20000338 	.word	0x20000338

08009794 <__ssputs_r>:
 8009794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	688e      	ldr	r6, [r1, #8]
 800979a:	429e      	cmp	r6, r3
 800979c:	4682      	mov	sl, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	4690      	mov	r8, r2
 80097a2:	461f      	mov	r7, r3
 80097a4:	d838      	bhi.n	8009818 <__ssputs_r+0x84>
 80097a6:	898a      	ldrh	r2, [r1, #12]
 80097a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ac:	d032      	beq.n	8009814 <__ssputs_r+0x80>
 80097ae:	6825      	ldr	r5, [r4, #0]
 80097b0:	6909      	ldr	r1, [r1, #16]
 80097b2:	eba5 0901 	sub.w	r9, r5, r1
 80097b6:	6965      	ldr	r5, [r4, #20]
 80097b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097c0:	3301      	adds	r3, #1
 80097c2:	444b      	add	r3, r9
 80097c4:	106d      	asrs	r5, r5, #1
 80097c6:	429d      	cmp	r5, r3
 80097c8:	bf38      	it	cc
 80097ca:	461d      	movcc	r5, r3
 80097cc:	0553      	lsls	r3, r2, #21
 80097ce:	d531      	bpl.n	8009834 <__ssputs_r+0xa0>
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7ff ff6b 	bl	80096ac <_malloc_r>
 80097d6:	4606      	mov	r6, r0
 80097d8:	b950      	cbnz	r0, 80097f0 <__ssputs_r+0x5c>
 80097da:	230c      	movs	r3, #12
 80097dc:	f8ca 3000 	str.w	r3, [sl]
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f0:	6921      	ldr	r1, [r4, #16]
 80097f2:	464a      	mov	r2, r9
 80097f4:	f7ff fa08 	bl	8008c08 <memcpy>
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	6126      	str	r6, [r4, #16]
 8009806:	6165      	str	r5, [r4, #20]
 8009808:	444e      	add	r6, r9
 800980a:	eba5 0509 	sub.w	r5, r5, r9
 800980e:	6026      	str	r6, [r4, #0]
 8009810:	60a5      	str	r5, [r4, #8]
 8009812:	463e      	mov	r6, r7
 8009814:	42be      	cmp	r6, r7
 8009816:	d900      	bls.n	800981a <__ssputs_r+0x86>
 8009818:	463e      	mov	r6, r7
 800981a:	6820      	ldr	r0, [r4, #0]
 800981c:	4632      	mov	r2, r6
 800981e:	4641      	mov	r1, r8
 8009820:	f000 fd38 	bl	800a294 <memmove>
 8009824:	68a3      	ldr	r3, [r4, #8]
 8009826:	1b9b      	subs	r3, r3, r6
 8009828:	60a3      	str	r3, [r4, #8]
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	4433      	add	r3, r6
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	2000      	movs	r0, #0
 8009832:	e7db      	b.n	80097ec <__ssputs_r+0x58>
 8009834:	462a      	mov	r2, r5
 8009836:	f000 fd53 	bl	800a2e0 <_realloc_r>
 800983a:	4606      	mov	r6, r0
 800983c:	2800      	cmp	r0, #0
 800983e:	d1e1      	bne.n	8009804 <__ssputs_r+0x70>
 8009840:	6921      	ldr	r1, [r4, #16]
 8009842:	4650      	mov	r0, sl
 8009844:	f7ff fec6 	bl	80095d4 <_free_r>
 8009848:	e7c7      	b.n	80097da <__ssputs_r+0x46>
	...

0800984c <_svfiprintf_r>:
 800984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	4698      	mov	r8, r3
 8009852:	898b      	ldrh	r3, [r1, #12]
 8009854:	061b      	lsls	r3, r3, #24
 8009856:	b09d      	sub	sp, #116	; 0x74
 8009858:	4607      	mov	r7, r0
 800985a:	460d      	mov	r5, r1
 800985c:	4614      	mov	r4, r2
 800985e:	d50e      	bpl.n	800987e <_svfiprintf_r+0x32>
 8009860:	690b      	ldr	r3, [r1, #16]
 8009862:	b963      	cbnz	r3, 800987e <_svfiprintf_r+0x32>
 8009864:	2140      	movs	r1, #64	; 0x40
 8009866:	f7ff ff21 	bl	80096ac <_malloc_r>
 800986a:	6028      	str	r0, [r5, #0]
 800986c:	6128      	str	r0, [r5, #16]
 800986e:	b920      	cbnz	r0, 800987a <_svfiprintf_r+0x2e>
 8009870:	230c      	movs	r3, #12
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	e0d1      	b.n	8009a1e <_svfiprintf_r+0x1d2>
 800987a:	2340      	movs	r3, #64	; 0x40
 800987c:	616b      	str	r3, [r5, #20]
 800987e:	2300      	movs	r3, #0
 8009880:	9309      	str	r3, [sp, #36]	; 0x24
 8009882:	2320      	movs	r3, #32
 8009884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009888:	f8cd 800c 	str.w	r8, [sp, #12]
 800988c:	2330      	movs	r3, #48	; 0x30
 800988e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a38 <_svfiprintf_r+0x1ec>
 8009892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009896:	f04f 0901 	mov.w	r9, #1
 800989a:	4623      	mov	r3, r4
 800989c:	469a      	mov	sl, r3
 800989e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098a2:	b10a      	cbz	r2, 80098a8 <_svfiprintf_r+0x5c>
 80098a4:	2a25      	cmp	r2, #37	; 0x25
 80098a6:	d1f9      	bne.n	800989c <_svfiprintf_r+0x50>
 80098a8:	ebba 0b04 	subs.w	fp, sl, r4
 80098ac:	d00b      	beq.n	80098c6 <_svfiprintf_r+0x7a>
 80098ae:	465b      	mov	r3, fp
 80098b0:	4622      	mov	r2, r4
 80098b2:	4629      	mov	r1, r5
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7ff ff6d 	bl	8009794 <__ssputs_r>
 80098ba:	3001      	adds	r0, #1
 80098bc:	f000 80aa 	beq.w	8009a14 <_svfiprintf_r+0x1c8>
 80098c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c2:	445a      	add	r2, fp
 80098c4:	9209      	str	r2, [sp, #36]	; 0x24
 80098c6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 80a2 	beq.w	8009a14 <_svfiprintf_r+0x1c8>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098da:	f10a 0a01 	add.w	sl, sl, #1
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	9307      	str	r3, [sp, #28]
 80098e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098e6:	931a      	str	r3, [sp, #104]	; 0x68
 80098e8:	4654      	mov	r4, sl
 80098ea:	2205      	movs	r2, #5
 80098ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f0:	4851      	ldr	r0, [pc, #324]	; (8009a38 <_svfiprintf_r+0x1ec>)
 80098f2:	f7f6 fc95 	bl	8000220 <memchr>
 80098f6:	9a04      	ldr	r2, [sp, #16]
 80098f8:	b9d8      	cbnz	r0, 8009932 <_svfiprintf_r+0xe6>
 80098fa:	06d0      	lsls	r0, r2, #27
 80098fc:	bf44      	itt	mi
 80098fe:	2320      	movmi	r3, #32
 8009900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009904:	0711      	lsls	r1, r2, #28
 8009906:	bf44      	itt	mi
 8009908:	232b      	movmi	r3, #43	; 0x2b
 800990a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800990e:	f89a 3000 	ldrb.w	r3, [sl]
 8009912:	2b2a      	cmp	r3, #42	; 0x2a
 8009914:	d015      	beq.n	8009942 <_svfiprintf_r+0xf6>
 8009916:	9a07      	ldr	r2, [sp, #28]
 8009918:	4654      	mov	r4, sl
 800991a:	2000      	movs	r0, #0
 800991c:	f04f 0c0a 	mov.w	ip, #10
 8009920:	4621      	mov	r1, r4
 8009922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009926:	3b30      	subs	r3, #48	; 0x30
 8009928:	2b09      	cmp	r3, #9
 800992a:	d94e      	bls.n	80099ca <_svfiprintf_r+0x17e>
 800992c:	b1b0      	cbz	r0, 800995c <_svfiprintf_r+0x110>
 800992e:	9207      	str	r2, [sp, #28]
 8009930:	e014      	b.n	800995c <_svfiprintf_r+0x110>
 8009932:	eba0 0308 	sub.w	r3, r0, r8
 8009936:	fa09 f303 	lsl.w	r3, r9, r3
 800993a:	4313      	orrs	r3, r2
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	46a2      	mov	sl, r4
 8009940:	e7d2      	b.n	80098e8 <_svfiprintf_r+0x9c>
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	1d19      	adds	r1, r3, #4
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	9103      	str	r1, [sp, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	bfbb      	ittet	lt
 800994e:	425b      	neglt	r3, r3
 8009950:	f042 0202 	orrlt.w	r2, r2, #2
 8009954:	9307      	strge	r3, [sp, #28]
 8009956:	9307      	strlt	r3, [sp, #28]
 8009958:	bfb8      	it	lt
 800995a:	9204      	strlt	r2, [sp, #16]
 800995c:	7823      	ldrb	r3, [r4, #0]
 800995e:	2b2e      	cmp	r3, #46	; 0x2e
 8009960:	d10c      	bne.n	800997c <_svfiprintf_r+0x130>
 8009962:	7863      	ldrb	r3, [r4, #1]
 8009964:	2b2a      	cmp	r3, #42	; 0x2a
 8009966:	d135      	bne.n	80099d4 <_svfiprintf_r+0x188>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	1d1a      	adds	r2, r3, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	9203      	str	r2, [sp, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	bfb8      	it	lt
 8009974:	f04f 33ff 	movlt.w	r3, #4294967295
 8009978:	3402      	adds	r4, #2
 800997a:	9305      	str	r3, [sp, #20]
 800997c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a48 <_svfiprintf_r+0x1fc>
 8009980:	7821      	ldrb	r1, [r4, #0]
 8009982:	2203      	movs	r2, #3
 8009984:	4650      	mov	r0, sl
 8009986:	f7f6 fc4b 	bl	8000220 <memchr>
 800998a:	b140      	cbz	r0, 800999e <_svfiprintf_r+0x152>
 800998c:	2340      	movs	r3, #64	; 0x40
 800998e:	eba0 000a 	sub.w	r0, r0, sl
 8009992:	fa03 f000 	lsl.w	r0, r3, r0
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	4303      	orrs	r3, r0
 800999a:	3401      	adds	r4, #1
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a2:	4826      	ldr	r0, [pc, #152]	; (8009a3c <_svfiprintf_r+0x1f0>)
 80099a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099a8:	2206      	movs	r2, #6
 80099aa:	f7f6 fc39 	bl	8000220 <memchr>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d038      	beq.n	8009a24 <_svfiprintf_r+0x1d8>
 80099b2:	4b23      	ldr	r3, [pc, #140]	; (8009a40 <_svfiprintf_r+0x1f4>)
 80099b4:	bb1b      	cbnz	r3, 80099fe <_svfiprintf_r+0x1b2>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	3307      	adds	r3, #7
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	3308      	adds	r3, #8
 80099c0:	9303      	str	r3, [sp, #12]
 80099c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c4:	4433      	add	r3, r6
 80099c6:	9309      	str	r3, [sp, #36]	; 0x24
 80099c8:	e767      	b.n	800989a <_svfiprintf_r+0x4e>
 80099ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80099ce:	460c      	mov	r4, r1
 80099d0:	2001      	movs	r0, #1
 80099d2:	e7a5      	b.n	8009920 <_svfiprintf_r+0xd4>
 80099d4:	2300      	movs	r3, #0
 80099d6:	3401      	adds	r4, #1
 80099d8:	9305      	str	r3, [sp, #20]
 80099da:	4619      	mov	r1, r3
 80099dc:	f04f 0c0a 	mov.w	ip, #10
 80099e0:	4620      	mov	r0, r4
 80099e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e6:	3a30      	subs	r2, #48	; 0x30
 80099e8:	2a09      	cmp	r2, #9
 80099ea:	d903      	bls.n	80099f4 <_svfiprintf_r+0x1a8>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0c5      	beq.n	800997c <_svfiprintf_r+0x130>
 80099f0:	9105      	str	r1, [sp, #20]
 80099f2:	e7c3      	b.n	800997c <_svfiprintf_r+0x130>
 80099f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099f8:	4604      	mov	r4, r0
 80099fa:	2301      	movs	r3, #1
 80099fc:	e7f0      	b.n	80099e0 <_svfiprintf_r+0x194>
 80099fe:	ab03      	add	r3, sp, #12
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	462a      	mov	r2, r5
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <_svfiprintf_r+0x1f8>)
 8009a06:	a904      	add	r1, sp, #16
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f7fc f937 	bl	8005c7c <_printf_float>
 8009a0e:	1c42      	adds	r2, r0, #1
 8009a10:	4606      	mov	r6, r0
 8009a12:	d1d6      	bne.n	80099c2 <_svfiprintf_r+0x176>
 8009a14:	89ab      	ldrh	r3, [r5, #12]
 8009a16:	065b      	lsls	r3, r3, #25
 8009a18:	f53f af2c 	bmi.w	8009874 <_svfiprintf_r+0x28>
 8009a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a1e:	b01d      	add	sp, #116	; 0x74
 8009a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <_svfiprintf_r+0x1f8>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f7fc fbc8 	bl	80061c4 <_printf_i>
 8009a34:	e7eb      	b.n	8009a0e <_svfiprintf_r+0x1c2>
 8009a36:	bf00      	nop
 8009a38:	0800a8ec 	.word	0x0800a8ec
 8009a3c:	0800a8f6 	.word	0x0800a8f6
 8009a40:	08005c7d 	.word	0x08005c7d
 8009a44:	08009795 	.word	0x08009795
 8009a48:	0800a8f2 	.word	0x0800a8f2

08009a4c <__sfputc_r>:
 8009a4c:	6893      	ldr	r3, [r2, #8]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	b410      	push	{r4}
 8009a54:	6093      	str	r3, [r2, #8]
 8009a56:	da08      	bge.n	8009a6a <__sfputc_r+0x1e>
 8009a58:	6994      	ldr	r4, [r2, #24]
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	db01      	blt.n	8009a62 <__sfputc_r+0x16>
 8009a5e:	290a      	cmp	r1, #10
 8009a60:	d103      	bne.n	8009a6a <__sfputc_r+0x1e>
 8009a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a66:	f000 b9bb 	b.w	8009de0 <__swbuf_r>
 8009a6a:	6813      	ldr	r3, [r2, #0]
 8009a6c:	1c58      	adds	r0, r3, #1
 8009a6e:	6010      	str	r0, [r2, #0]
 8009a70:	7019      	strb	r1, [r3, #0]
 8009a72:	4608      	mov	r0, r1
 8009a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <__sfputs_r>:
 8009a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	4614      	mov	r4, r2
 8009a82:	18d5      	adds	r5, r2, r3
 8009a84:	42ac      	cmp	r4, r5
 8009a86:	d101      	bne.n	8009a8c <__sfputs_r+0x12>
 8009a88:	2000      	movs	r0, #0
 8009a8a:	e007      	b.n	8009a9c <__sfputs_r+0x22>
 8009a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a90:	463a      	mov	r2, r7
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff ffda 	bl	8009a4c <__sfputc_r>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d1f3      	bne.n	8009a84 <__sfputs_r+0xa>
 8009a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aa0 <_vfiprintf_r>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	b09d      	sub	sp, #116	; 0x74
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	4698      	mov	r8, r3
 8009aac:	4606      	mov	r6, r0
 8009aae:	b118      	cbz	r0, 8009ab8 <_vfiprintf_r+0x18>
 8009ab0:	6983      	ldr	r3, [r0, #24]
 8009ab2:	b90b      	cbnz	r3, 8009ab8 <_vfiprintf_r+0x18>
 8009ab4:	f7fe fc7a 	bl	80083ac <__sinit>
 8009ab8:	4b89      	ldr	r3, [pc, #548]	; (8009ce0 <_vfiprintf_r+0x240>)
 8009aba:	429d      	cmp	r5, r3
 8009abc:	d11b      	bne.n	8009af6 <_vfiprintf_r+0x56>
 8009abe:	6875      	ldr	r5, [r6, #4]
 8009ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac2:	07d9      	lsls	r1, r3, #31
 8009ac4:	d405      	bmi.n	8009ad2 <_vfiprintf_r+0x32>
 8009ac6:	89ab      	ldrh	r3, [r5, #12]
 8009ac8:	059a      	lsls	r2, r3, #22
 8009aca:	d402      	bmi.n	8009ad2 <_vfiprintf_r+0x32>
 8009acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ace:	f7ff f87e 	bl	8008bce <__retarget_lock_acquire_recursive>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	071b      	lsls	r3, r3, #28
 8009ad6:	d501      	bpl.n	8009adc <_vfiprintf_r+0x3c>
 8009ad8:	692b      	ldr	r3, [r5, #16]
 8009ada:	b9eb      	cbnz	r3, 8009b18 <_vfiprintf_r+0x78>
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f000 f9f0 	bl	8009ec4 <__swsetup_r>
 8009ae4:	b1c0      	cbz	r0, 8009b18 <_vfiprintf_r+0x78>
 8009ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ae8:	07dc      	lsls	r4, r3, #31
 8009aea:	d50e      	bpl.n	8009b0a <_vfiprintf_r+0x6a>
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	b01d      	add	sp, #116	; 0x74
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	4b7b      	ldr	r3, [pc, #492]	; (8009ce4 <_vfiprintf_r+0x244>)
 8009af8:	429d      	cmp	r5, r3
 8009afa:	d101      	bne.n	8009b00 <_vfiprintf_r+0x60>
 8009afc:	68b5      	ldr	r5, [r6, #8]
 8009afe:	e7df      	b.n	8009ac0 <_vfiprintf_r+0x20>
 8009b00:	4b79      	ldr	r3, [pc, #484]	; (8009ce8 <_vfiprintf_r+0x248>)
 8009b02:	429d      	cmp	r5, r3
 8009b04:	bf08      	it	eq
 8009b06:	68f5      	ldreq	r5, [r6, #12]
 8009b08:	e7da      	b.n	8009ac0 <_vfiprintf_r+0x20>
 8009b0a:	89ab      	ldrh	r3, [r5, #12]
 8009b0c:	0598      	lsls	r0, r3, #22
 8009b0e:	d4ed      	bmi.n	8009aec <_vfiprintf_r+0x4c>
 8009b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b12:	f7ff f85d 	bl	8008bd0 <__retarget_lock_release_recursive>
 8009b16:	e7e9      	b.n	8009aec <_vfiprintf_r+0x4c>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b26:	2330      	movs	r3, #48	; 0x30
 8009b28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009cec <_vfiprintf_r+0x24c>
 8009b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b30:	f04f 0901 	mov.w	r9, #1
 8009b34:	4623      	mov	r3, r4
 8009b36:	469a      	mov	sl, r3
 8009b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b3c:	b10a      	cbz	r2, 8009b42 <_vfiprintf_r+0xa2>
 8009b3e:	2a25      	cmp	r2, #37	; 0x25
 8009b40:	d1f9      	bne.n	8009b36 <_vfiprintf_r+0x96>
 8009b42:	ebba 0b04 	subs.w	fp, sl, r4
 8009b46:	d00b      	beq.n	8009b60 <_vfiprintf_r+0xc0>
 8009b48:	465b      	mov	r3, fp
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f7ff ff93 	bl	8009a7a <__sfputs_r>
 8009b54:	3001      	adds	r0, #1
 8009b56:	f000 80aa 	beq.w	8009cae <_vfiprintf_r+0x20e>
 8009b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5c:	445a      	add	r2, fp
 8009b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b60:	f89a 3000 	ldrb.w	r3, [sl]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 80a2 	beq.w	8009cae <_vfiprintf_r+0x20e>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b74:	f10a 0a01 	add.w	sl, sl, #1
 8009b78:	9304      	str	r3, [sp, #16]
 8009b7a:	9307      	str	r3, [sp, #28]
 8009b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b80:	931a      	str	r3, [sp, #104]	; 0x68
 8009b82:	4654      	mov	r4, sl
 8009b84:	2205      	movs	r2, #5
 8009b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8a:	4858      	ldr	r0, [pc, #352]	; (8009cec <_vfiprintf_r+0x24c>)
 8009b8c:	f7f6 fb48 	bl	8000220 <memchr>
 8009b90:	9a04      	ldr	r2, [sp, #16]
 8009b92:	b9d8      	cbnz	r0, 8009bcc <_vfiprintf_r+0x12c>
 8009b94:	06d1      	lsls	r1, r2, #27
 8009b96:	bf44      	itt	mi
 8009b98:	2320      	movmi	r3, #32
 8009b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b9e:	0713      	lsls	r3, r2, #28
 8009ba0:	bf44      	itt	mi
 8009ba2:	232b      	movmi	r3, #43	; 0x2b
 8009ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bac:	2b2a      	cmp	r3, #42	; 0x2a
 8009bae:	d015      	beq.n	8009bdc <_vfiprintf_r+0x13c>
 8009bb0:	9a07      	ldr	r2, [sp, #28]
 8009bb2:	4654      	mov	r4, sl
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	f04f 0c0a 	mov.w	ip, #10
 8009bba:	4621      	mov	r1, r4
 8009bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bc0:	3b30      	subs	r3, #48	; 0x30
 8009bc2:	2b09      	cmp	r3, #9
 8009bc4:	d94e      	bls.n	8009c64 <_vfiprintf_r+0x1c4>
 8009bc6:	b1b0      	cbz	r0, 8009bf6 <_vfiprintf_r+0x156>
 8009bc8:	9207      	str	r2, [sp, #28]
 8009bca:	e014      	b.n	8009bf6 <_vfiprintf_r+0x156>
 8009bcc:	eba0 0308 	sub.w	r3, r0, r8
 8009bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	9304      	str	r3, [sp, #16]
 8009bd8:	46a2      	mov	sl, r4
 8009bda:	e7d2      	b.n	8009b82 <_vfiprintf_r+0xe2>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	1d19      	adds	r1, r3, #4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	9103      	str	r1, [sp, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bfbb      	ittet	lt
 8009be8:	425b      	neglt	r3, r3
 8009bea:	f042 0202 	orrlt.w	r2, r2, #2
 8009bee:	9307      	strge	r3, [sp, #28]
 8009bf0:	9307      	strlt	r3, [sp, #28]
 8009bf2:	bfb8      	it	lt
 8009bf4:	9204      	strlt	r2, [sp, #16]
 8009bf6:	7823      	ldrb	r3, [r4, #0]
 8009bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8009bfa:	d10c      	bne.n	8009c16 <_vfiprintf_r+0x176>
 8009bfc:	7863      	ldrb	r3, [r4, #1]
 8009bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8009c00:	d135      	bne.n	8009c6e <_vfiprintf_r+0x1ce>
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	1d1a      	adds	r2, r3, #4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	9203      	str	r2, [sp, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bfb8      	it	lt
 8009c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c12:	3402      	adds	r4, #2
 8009c14:	9305      	str	r3, [sp, #20]
 8009c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cfc <_vfiprintf_r+0x25c>
 8009c1a:	7821      	ldrb	r1, [r4, #0]
 8009c1c:	2203      	movs	r2, #3
 8009c1e:	4650      	mov	r0, sl
 8009c20:	f7f6 fafe 	bl	8000220 <memchr>
 8009c24:	b140      	cbz	r0, 8009c38 <_vfiprintf_r+0x198>
 8009c26:	2340      	movs	r3, #64	; 0x40
 8009c28:	eba0 000a 	sub.w	r0, r0, sl
 8009c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8009c30:	9b04      	ldr	r3, [sp, #16]
 8009c32:	4303      	orrs	r3, r0
 8009c34:	3401      	adds	r4, #1
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3c:	482c      	ldr	r0, [pc, #176]	; (8009cf0 <_vfiprintf_r+0x250>)
 8009c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c42:	2206      	movs	r2, #6
 8009c44:	f7f6 faec 	bl	8000220 <memchr>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d03f      	beq.n	8009ccc <_vfiprintf_r+0x22c>
 8009c4c:	4b29      	ldr	r3, [pc, #164]	; (8009cf4 <_vfiprintf_r+0x254>)
 8009c4e:	bb1b      	cbnz	r3, 8009c98 <_vfiprintf_r+0x1f8>
 8009c50:	9b03      	ldr	r3, [sp, #12]
 8009c52:	3307      	adds	r3, #7
 8009c54:	f023 0307 	bic.w	r3, r3, #7
 8009c58:	3308      	adds	r3, #8
 8009c5a:	9303      	str	r3, [sp, #12]
 8009c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5e:	443b      	add	r3, r7
 8009c60:	9309      	str	r3, [sp, #36]	; 0x24
 8009c62:	e767      	b.n	8009b34 <_vfiprintf_r+0x94>
 8009c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c68:	460c      	mov	r4, r1
 8009c6a:	2001      	movs	r0, #1
 8009c6c:	e7a5      	b.n	8009bba <_vfiprintf_r+0x11a>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	3401      	adds	r4, #1
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	4619      	mov	r1, r3
 8009c76:	f04f 0c0a 	mov.w	ip, #10
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c80:	3a30      	subs	r2, #48	; 0x30
 8009c82:	2a09      	cmp	r2, #9
 8009c84:	d903      	bls.n	8009c8e <_vfiprintf_r+0x1ee>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0c5      	beq.n	8009c16 <_vfiprintf_r+0x176>
 8009c8a:	9105      	str	r1, [sp, #20]
 8009c8c:	e7c3      	b.n	8009c16 <_vfiprintf_r+0x176>
 8009c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c92:	4604      	mov	r4, r0
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7f0      	b.n	8009c7a <_vfiprintf_r+0x1da>
 8009c98:	ab03      	add	r3, sp, #12
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	462a      	mov	r2, r5
 8009c9e:	4b16      	ldr	r3, [pc, #88]	; (8009cf8 <_vfiprintf_r+0x258>)
 8009ca0:	a904      	add	r1, sp, #16
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7fb ffea 	bl	8005c7c <_printf_float>
 8009ca8:	4607      	mov	r7, r0
 8009caa:	1c78      	adds	r0, r7, #1
 8009cac:	d1d6      	bne.n	8009c5c <_vfiprintf_r+0x1bc>
 8009cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb0:	07d9      	lsls	r1, r3, #31
 8009cb2:	d405      	bmi.n	8009cc0 <_vfiprintf_r+0x220>
 8009cb4:	89ab      	ldrh	r3, [r5, #12]
 8009cb6:	059a      	lsls	r2, r3, #22
 8009cb8:	d402      	bmi.n	8009cc0 <_vfiprintf_r+0x220>
 8009cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cbc:	f7fe ff88 	bl	8008bd0 <__retarget_lock_release_recursive>
 8009cc0:	89ab      	ldrh	r3, [r5, #12]
 8009cc2:	065b      	lsls	r3, r3, #25
 8009cc4:	f53f af12 	bmi.w	8009aec <_vfiprintf_r+0x4c>
 8009cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cca:	e711      	b.n	8009af0 <_vfiprintf_r+0x50>
 8009ccc:	ab03      	add	r3, sp, #12
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <_vfiprintf_r+0x258>)
 8009cd4:	a904      	add	r1, sp, #16
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7fc fa74 	bl	80061c4 <_printf_i>
 8009cdc:	e7e4      	b.n	8009ca8 <_vfiprintf_r+0x208>
 8009cde:	bf00      	nop
 8009ce0:	0800a6d4 	.word	0x0800a6d4
 8009ce4:	0800a6f4 	.word	0x0800a6f4
 8009ce8:	0800a6b4 	.word	0x0800a6b4
 8009cec:	0800a8ec 	.word	0x0800a8ec
 8009cf0:	0800a8f6 	.word	0x0800a8f6
 8009cf4:	08005c7d 	.word	0x08005c7d
 8009cf8:	08009a7b 	.word	0x08009a7b
 8009cfc:	0800a8f2 	.word	0x0800a8f2

08009d00 <nan>:
 8009d00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d08 <nan+0x8>
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	00000000 	.word	0x00000000
 8009d0c:	7ff80000 	.word	0x7ff80000

08009d10 <_sbrk_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d06      	ldr	r5, [pc, #24]	; (8009d2c <_sbrk_r+0x1c>)
 8009d14:	2300      	movs	r3, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	f7f8 fb10 	bl	8002340 <_sbrk>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d102      	bne.n	8009d2a <_sbrk_r+0x1a>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b103      	cbz	r3, 8009d2a <_sbrk_r+0x1a>
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	20000340 	.word	0x20000340

08009d30 <__sread>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	460c      	mov	r4, r1
 8009d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d38:	f000 fb02 	bl	800a340 <_read_r>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	bfab      	itete	ge
 8009d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d42:	89a3      	ldrhlt	r3, [r4, #12]
 8009d44:	181b      	addge	r3, r3, r0
 8009d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d4a:	bfac      	ite	ge
 8009d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d4e:	81a3      	strhlt	r3, [r4, #12]
 8009d50:	bd10      	pop	{r4, pc}

08009d52 <__swrite>:
 8009d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d56:	461f      	mov	r7, r3
 8009d58:	898b      	ldrh	r3, [r1, #12]
 8009d5a:	05db      	lsls	r3, r3, #23
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	4616      	mov	r6, r2
 8009d62:	d505      	bpl.n	8009d70 <__swrite+0x1e>
 8009d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d68:	2302      	movs	r3, #2
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f000 fa1a 	bl	800a1a4 <_lseek_r>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	4632      	mov	r2, r6
 8009d7e:	463b      	mov	r3, r7
 8009d80:	4628      	mov	r0, r5
 8009d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d86:	f000 b88b 	b.w	8009ea0 <_write_r>

08009d8a <__sseek>:
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d92:	f000 fa07 	bl	800a1a4 <_lseek_r>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	bf15      	itete	ne
 8009d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009da6:	81a3      	strheq	r3, [r4, #12]
 8009da8:	bf18      	it	ne
 8009daa:	81a3      	strhne	r3, [r4, #12]
 8009dac:	bd10      	pop	{r4, pc}

08009dae <__sclose>:
 8009dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db2:	f000 b913 	b.w	8009fdc <_close_r>

08009db6 <strncmp>:
 8009db6:	b510      	push	{r4, lr}
 8009db8:	b17a      	cbz	r2, 8009dda <strncmp+0x24>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	3901      	subs	r1, #1
 8009dbe:	1884      	adds	r4, r0, r2
 8009dc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009dc8:	4290      	cmp	r0, r2
 8009dca:	d101      	bne.n	8009dd0 <strncmp+0x1a>
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	d101      	bne.n	8009dd4 <strncmp+0x1e>
 8009dd0:	1a80      	subs	r0, r0, r2
 8009dd2:	bd10      	pop	{r4, pc}
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d1f3      	bne.n	8009dc0 <strncmp+0xa>
 8009dd8:	e7fa      	b.n	8009dd0 <strncmp+0x1a>
 8009dda:	4610      	mov	r0, r2
 8009ddc:	e7f9      	b.n	8009dd2 <strncmp+0x1c>
	...

08009de0 <__swbuf_r>:
 8009de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de2:	460e      	mov	r6, r1
 8009de4:	4614      	mov	r4, r2
 8009de6:	4605      	mov	r5, r0
 8009de8:	b118      	cbz	r0, 8009df2 <__swbuf_r+0x12>
 8009dea:	6983      	ldr	r3, [r0, #24]
 8009dec:	b90b      	cbnz	r3, 8009df2 <__swbuf_r+0x12>
 8009dee:	f7fe fadd 	bl	80083ac <__sinit>
 8009df2:	4b21      	ldr	r3, [pc, #132]	; (8009e78 <__swbuf_r+0x98>)
 8009df4:	429c      	cmp	r4, r3
 8009df6:	d12b      	bne.n	8009e50 <__swbuf_r+0x70>
 8009df8:	686c      	ldr	r4, [r5, #4]
 8009dfa:	69a3      	ldr	r3, [r4, #24]
 8009dfc:	60a3      	str	r3, [r4, #8]
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	071a      	lsls	r2, r3, #28
 8009e02:	d52f      	bpl.n	8009e64 <__swbuf_r+0x84>
 8009e04:	6923      	ldr	r3, [r4, #16]
 8009e06:	b36b      	cbz	r3, 8009e64 <__swbuf_r+0x84>
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	6820      	ldr	r0, [r4, #0]
 8009e0c:	1ac0      	subs	r0, r0, r3
 8009e0e:	6963      	ldr	r3, [r4, #20]
 8009e10:	b2f6      	uxtb	r6, r6
 8009e12:	4283      	cmp	r3, r0
 8009e14:	4637      	mov	r7, r6
 8009e16:	dc04      	bgt.n	8009e22 <__swbuf_r+0x42>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f000 f974 	bl	800a108 <_fflush_r>
 8009e20:	bb30      	cbnz	r0, 8009e70 <__swbuf_r+0x90>
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	60a3      	str	r3, [r4, #8]
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	6022      	str	r2, [r4, #0]
 8009e2e:	701e      	strb	r6, [r3, #0]
 8009e30:	6963      	ldr	r3, [r4, #20]
 8009e32:	3001      	adds	r0, #1
 8009e34:	4283      	cmp	r3, r0
 8009e36:	d004      	beq.n	8009e42 <__swbuf_r+0x62>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	07db      	lsls	r3, r3, #31
 8009e3c:	d506      	bpl.n	8009e4c <__swbuf_r+0x6c>
 8009e3e:	2e0a      	cmp	r6, #10
 8009e40:	d104      	bne.n	8009e4c <__swbuf_r+0x6c>
 8009e42:	4621      	mov	r1, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 f95f 	bl	800a108 <_fflush_r>
 8009e4a:	b988      	cbnz	r0, 8009e70 <__swbuf_r+0x90>
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <__swbuf_r+0x9c>)
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d101      	bne.n	8009e5a <__swbuf_r+0x7a>
 8009e56:	68ac      	ldr	r4, [r5, #8]
 8009e58:	e7cf      	b.n	8009dfa <__swbuf_r+0x1a>
 8009e5a:	4b09      	ldr	r3, [pc, #36]	; (8009e80 <__swbuf_r+0xa0>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	bf08      	it	eq
 8009e60:	68ec      	ldreq	r4, [r5, #12]
 8009e62:	e7ca      	b.n	8009dfa <__swbuf_r+0x1a>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 f82c 	bl	8009ec4 <__swsetup_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0cb      	beq.n	8009e08 <__swbuf_r+0x28>
 8009e70:	f04f 37ff 	mov.w	r7, #4294967295
 8009e74:	e7ea      	b.n	8009e4c <__swbuf_r+0x6c>
 8009e76:	bf00      	nop
 8009e78:	0800a6d4 	.word	0x0800a6d4
 8009e7c:	0800a6f4 	.word	0x0800a6f4
 8009e80:	0800a6b4 	.word	0x0800a6b4

08009e84 <__ascii_wctomb>:
 8009e84:	b149      	cbz	r1, 8009e9a <__ascii_wctomb+0x16>
 8009e86:	2aff      	cmp	r2, #255	; 0xff
 8009e88:	bf85      	ittet	hi
 8009e8a:	238a      	movhi	r3, #138	; 0x8a
 8009e8c:	6003      	strhi	r3, [r0, #0]
 8009e8e:	700a      	strbls	r2, [r1, #0]
 8009e90:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e94:	bf98      	it	ls
 8009e96:	2001      	movls	r0, #1
 8009e98:	4770      	bx	lr
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	4770      	bx	lr
	...

08009ea0 <_write_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d07      	ldr	r5, [pc, #28]	; (8009ec0 <_write_r+0x20>)
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	602a      	str	r2, [r5, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f7f8 f9f5 	bl	800229e <_write>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_write_r+0x1e>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_write_r+0x1e>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	20000340 	.word	0x20000340

08009ec4 <__swsetup_r>:
 8009ec4:	4b32      	ldr	r3, [pc, #200]	; (8009f90 <__swsetup_r+0xcc>)
 8009ec6:	b570      	push	{r4, r5, r6, lr}
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460c      	mov	r4, r1
 8009ece:	b125      	cbz	r5, 8009eda <__swsetup_r+0x16>
 8009ed0:	69ab      	ldr	r3, [r5, #24]
 8009ed2:	b913      	cbnz	r3, 8009eda <__swsetup_r+0x16>
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f7fe fa69 	bl	80083ac <__sinit>
 8009eda:	4b2e      	ldr	r3, [pc, #184]	; (8009f94 <__swsetup_r+0xd0>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	d10f      	bne.n	8009f00 <__swsetup_r+0x3c>
 8009ee0:	686c      	ldr	r4, [r5, #4]
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ee8:	0719      	lsls	r1, r3, #28
 8009eea:	d42c      	bmi.n	8009f46 <__swsetup_r+0x82>
 8009eec:	06dd      	lsls	r5, r3, #27
 8009eee:	d411      	bmi.n	8009f14 <__swsetup_r+0x50>
 8009ef0:	2309      	movs	r3, #9
 8009ef2:	6033      	str	r3, [r6, #0]
 8009ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	f04f 30ff 	mov.w	r0, #4294967295
 8009efe:	e03e      	b.n	8009f7e <__swsetup_r+0xba>
 8009f00:	4b25      	ldr	r3, [pc, #148]	; (8009f98 <__swsetup_r+0xd4>)
 8009f02:	429c      	cmp	r4, r3
 8009f04:	d101      	bne.n	8009f0a <__swsetup_r+0x46>
 8009f06:	68ac      	ldr	r4, [r5, #8]
 8009f08:	e7eb      	b.n	8009ee2 <__swsetup_r+0x1e>
 8009f0a:	4b24      	ldr	r3, [pc, #144]	; (8009f9c <__swsetup_r+0xd8>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	bf08      	it	eq
 8009f10:	68ec      	ldreq	r4, [r5, #12]
 8009f12:	e7e6      	b.n	8009ee2 <__swsetup_r+0x1e>
 8009f14:	0758      	lsls	r0, r3, #29
 8009f16:	d512      	bpl.n	8009f3e <__swsetup_r+0x7a>
 8009f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1a:	b141      	cbz	r1, 8009f2e <__swsetup_r+0x6a>
 8009f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d002      	beq.n	8009f2a <__swsetup_r+0x66>
 8009f24:	4630      	mov	r0, r6
 8009f26:	f7ff fb55 	bl	80095d4 <_free_r>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	2300      	movs	r3, #0
 8009f38:	6063      	str	r3, [r4, #4]
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f043 0308 	orr.w	r3, r3, #8
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	b94b      	cbnz	r3, 8009f5e <__swsetup_r+0x9a>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f54:	d003      	beq.n	8009f5e <__swsetup_r+0x9a>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f95b 	bl	800a214 <__smakebuf_r>
 8009f5e:	89a0      	ldrh	r0, [r4, #12]
 8009f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f64:	f010 0301 	ands.w	r3, r0, #1
 8009f68:	d00a      	beq.n	8009f80 <__swsetup_r+0xbc>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60a3      	str	r3, [r4, #8]
 8009f6e:	6963      	ldr	r3, [r4, #20]
 8009f70:	425b      	negs	r3, r3
 8009f72:	61a3      	str	r3, [r4, #24]
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	b943      	cbnz	r3, 8009f8a <__swsetup_r+0xc6>
 8009f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f7c:	d1ba      	bne.n	8009ef4 <__swsetup_r+0x30>
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	0781      	lsls	r1, r0, #30
 8009f82:	bf58      	it	pl
 8009f84:	6963      	ldrpl	r3, [r4, #20]
 8009f86:	60a3      	str	r3, [r4, #8]
 8009f88:	e7f4      	b.n	8009f74 <__swsetup_r+0xb0>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e7f7      	b.n	8009f7e <__swsetup_r+0xba>
 8009f8e:	bf00      	nop
 8009f90:	2000000c 	.word	0x2000000c
 8009f94:	0800a6d4 	.word	0x0800a6d4
 8009f98:	0800a6f4 	.word	0x0800a6f4
 8009f9c:	0800a6b4 	.word	0x0800a6b4

08009fa0 <__assert_func>:
 8009fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fa2:	4614      	mov	r4, r2
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <__assert_func+0x2c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4605      	mov	r5, r0
 8009fac:	68d8      	ldr	r0, [r3, #12]
 8009fae:	b14c      	cbz	r4, 8009fc4 <__assert_func+0x24>
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <__assert_func+0x30>)
 8009fb2:	9100      	str	r1, [sp, #0]
 8009fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fb8:	4906      	ldr	r1, [pc, #24]	; (8009fd4 <__assert_func+0x34>)
 8009fba:	462b      	mov	r3, r5
 8009fbc:	f000 f8e0 	bl	800a180 <fiprintf>
 8009fc0:	f000 f9d0 	bl	800a364 <abort>
 8009fc4:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <__assert_func+0x38>)
 8009fc6:	461c      	mov	r4, r3
 8009fc8:	e7f3      	b.n	8009fb2 <__assert_func+0x12>
 8009fca:	bf00      	nop
 8009fcc:	2000000c 	.word	0x2000000c
 8009fd0:	0800a8fd 	.word	0x0800a8fd
 8009fd4:	0800a90a 	.word	0x0800a90a
 8009fd8:	0800a938 	.word	0x0800a938

08009fdc <_close_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d06      	ldr	r5, [pc, #24]	; (8009ff8 <_close_r+0x1c>)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	602b      	str	r3, [r5, #0]
 8009fe8:	f7f8 f975 	bl	80022d6 <_close>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_close_r+0x1a>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_close_r+0x1a>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	20000340 	.word	0x20000340

08009ffc <__sflush_r>:
 8009ffc:	898a      	ldrh	r2, [r1, #12]
 8009ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a002:	4605      	mov	r5, r0
 800a004:	0710      	lsls	r0, r2, #28
 800a006:	460c      	mov	r4, r1
 800a008:	d458      	bmi.n	800a0bc <__sflush_r+0xc0>
 800a00a:	684b      	ldr	r3, [r1, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc05      	bgt.n	800a01c <__sflush_r+0x20>
 800a010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	dc02      	bgt.n	800a01c <__sflush_r+0x20>
 800a016:	2000      	movs	r0, #0
 800a018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a01c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a01e:	2e00      	cmp	r6, #0
 800a020:	d0f9      	beq.n	800a016 <__sflush_r+0x1a>
 800a022:	2300      	movs	r3, #0
 800a024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a028:	682f      	ldr	r7, [r5, #0]
 800a02a:	602b      	str	r3, [r5, #0]
 800a02c:	d032      	beq.n	800a094 <__sflush_r+0x98>
 800a02e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	075a      	lsls	r2, r3, #29
 800a034:	d505      	bpl.n	800a042 <__sflush_r+0x46>
 800a036:	6863      	ldr	r3, [r4, #4]
 800a038:	1ac0      	subs	r0, r0, r3
 800a03a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a03c:	b10b      	cbz	r3, 800a042 <__sflush_r+0x46>
 800a03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a040:	1ac0      	subs	r0, r0, r3
 800a042:	2300      	movs	r3, #0
 800a044:	4602      	mov	r2, r0
 800a046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a048:	6a21      	ldr	r1, [r4, #32]
 800a04a:	4628      	mov	r0, r5
 800a04c:	47b0      	blx	r6
 800a04e:	1c43      	adds	r3, r0, #1
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	d106      	bne.n	800a062 <__sflush_r+0x66>
 800a054:	6829      	ldr	r1, [r5, #0]
 800a056:	291d      	cmp	r1, #29
 800a058:	d82c      	bhi.n	800a0b4 <__sflush_r+0xb8>
 800a05a:	4a2a      	ldr	r2, [pc, #168]	; (800a104 <__sflush_r+0x108>)
 800a05c:	40ca      	lsrs	r2, r1
 800a05e:	07d6      	lsls	r6, r2, #31
 800a060:	d528      	bpl.n	800a0b4 <__sflush_r+0xb8>
 800a062:	2200      	movs	r2, #0
 800a064:	6062      	str	r2, [r4, #4]
 800a066:	04d9      	lsls	r1, r3, #19
 800a068:	6922      	ldr	r2, [r4, #16]
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	d504      	bpl.n	800a078 <__sflush_r+0x7c>
 800a06e:	1c42      	adds	r2, r0, #1
 800a070:	d101      	bne.n	800a076 <__sflush_r+0x7a>
 800a072:	682b      	ldr	r3, [r5, #0]
 800a074:	b903      	cbnz	r3, 800a078 <__sflush_r+0x7c>
 800a076:	6560      	str	r0, [r4, #84]	; 0x54
 800a078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07a:	602f      	str	r7, [r5, #0]
 800a07c:	2900      	cmp	r1, #0
 800a07e:	d0ca      	beq.n	800a016 <__sflush_r+0x1a>
 800a080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a084:	4299      	cmp	r1, r3
 800a086:	d002      	beq.n	800a08e <__sflush_r+0x92>
 800a088:	4628      	mov	r0, r5
 800a08a:	f7ff faa3 	bl	80095d4 <_free_r>
 800a08e:	2000      	movs	r0, #0
 800a090:	6360      	str	r0, [r4, #52]	; 0x34
 800a092:	e7c1      	b.n	800a018 <__sflush_r+0x1c>
 800a094:	6a21      	ldr	r1, [r4, #32]
 800a096:	2301      	movs	r3, #1
 800a098:	4628      	mov	r0, r5
 800a09a:	47b0      	blx	r6
 800a09c:	1c41      	adds	r1, r0, #1
 800a09e:	d1c7      	bne.n	800a030 <__sflush_r+0x34>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0c4      	beq.n	800a030 <__sflush_r+0x34>
 800a0a6:	2b1d      	cmp	r3, #29
 800a0a8:	d001      	beq.n	800a0ae <__sflush_r+0xb2>
 800a0aa:	2b16      	cmp	r3, #22
 800a0ac:	d101      	bne.n	800a0b2 <__sflush_r+0xb6>
 800a0ae:	602f      	str	r7, [r5, #0]
 800a0b0:	e7b1      	b.n	800a016 <__sflush_r+0x1a>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	e7ad      	b.n	800a018 <__sflush_r+0x1c>
 800a0bc:	690f      	ldr	r7, [r1, #16]
 800a0be:	2f00      	cmp	r7, #0
 800a0c0:	d0a9      	beq.n	800a016 <__sflush_r+0x1a>
 800a0c2:	0793      	lsls	r3, r2, #30
 800a0c4:	680e      	ldr	r6, [r1, #0]
 800a0c6:	bf08      	it	eq
 800a0c8:	694b      	ldreq	r3, [r1, #20]
 800a0ca:	600f      	str	r7, [r1, #0]
 800a0cc:	bf18      	it	ne
 800a0ce:	2300      	movne	r3, #0
 800a0d0:	eba6 0807 	sub.w	r8, r6, r7
 800a0d4:	608b      	str	r3, [r1, #8]
 800a0d6:	f1b8 0f00 	cmp.w	r8, #0
 800a0da:	dd9c      	ble.n	800a016 <__sflush_r+0x1a>
 800a0dc:	6a21      	ldr	r1, [r4, #32]
 800a0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0e0:	4643      	mov	r3, r8
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	47b0      	blx	r6
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dc06      	bgt.n	800a0fa <__sflush_r+0xfe>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	e78e      	b.n	800a018 <__sflush_r+0x1c>
 800a0fa:	4407      	add	r7, r0
 800a0fc:	eba8 0800 	sub.w	r8, r8, r0
 800a100:	e7e9      	b.n	800a0d6 <__sflush_r+0xda>
 800a102:	bf00      	nop
 800a104:	20400001 	.word	0x20400001

0800a108 <_fflush_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	690b      	ldr	r3, [r1, #16]
 800a10c:	4605      	mov	r5, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	b913      	cbnz	r3, 800a118 <_fflush_r+0x10>
 800a112:	2500      	movs	r5, #0
 800a114:	4628      	mov	r0, r5
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	b118      	cbz	r0, 800a122 <_fflush_r+0x1a>
 800a11a:	6983      	ldr	r3, [r0, #24]
 800a11c:	b90b      	cbnz	r3, 800a122 <_fflush_r+0x1a>
 800a11e:	f7fe f945 	bl	80083ac <__sinit>
 800a122:	4b14      	ldr	r3, [pc, #80]	; (800a174 <_fflush_r+0x6c>)
 800a124:	429c      	cmp	r4, r3
 800a126:	d11b      	bne.n	800a160 <_fflush_r+0x58>
 800a128:	686c      	ldr	r4, [r5, #4]
 800a12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0ef      	beq.n	800a112 <_fflush_r+0xa>
 800a132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a134:	07d0      	lsls	r0, r2, #31
 800a136:	d404      	bmi.n	800a142 <_fflush_r+0x3a>
 800a138:	0599      	lsls	r1, r3, #22
 800a13a:	d402      	bmi.n	800a142 <_fflush_r+0x3a>
 800a13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a13e:	f7fe fd46 	bl	8008bce <__retarget_lock_acquire_recursive>
 800a142:	4628      	mov	r0, r5
 800a144:	4621      	mov	r1, r4
 800a146:	f7ff ff59 	bl	8009ffc <__sflush_r>
 800a14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a14c:	07da      	lsls	r2, r3, #31
 800a14e:	4605      	mov	r5, r0
 800a150:	d4e0      	bmi.n	800a114 <_fflush_r+0xc>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	059b      	lsls	r3, r3, #22
 800a156:	d4dd      	bmi.n	800a114 <_fflush_r+0xc>
 800a158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a15a:	f7fe fd39 	bl	8008bd0 <__retarget_lock_release_recursive>
 800a15e:	e7d9      	b.n	800a114 <_fflush_r+0xc>
 800a160:	4b05      	ldr	r3, [pc, #20]	; (800a178 <_fflush_r+0x70>)
 800a162:	429c      	cmp	r4, r3
 800a164:	d101      	bne.n	800a16a <_fflush_r+0x62>
 800a166:	68ac      	ldr	r4, [r5, #8]
 800a168:	e7df      	b.n	800a12a <_fflush_r+0x22>
 800a16a:	4b04      	ldr	r3, [pc, #16]	; (800a17c <_fflush_r+0x74>)
 800a16c:	429c      	cmp	r4, r3
 800a16e:	bf08      	it	eq
 800a170:	68ec      	ldreq	r4, [r5, #12]
 800a172:	e7da      	b.n	800a12a <_fflush_r+0x22>
 800a174:	0800a6d4 	.word	0x0800a6d4
 800a178:	0800a6f4 	.word	0x0800a6f4
 800a17c:	0800a6b4 	.word	0x0800a6b4

0800a180 <fiprintf>:
 800a180:	b40e      	push	{r1, r2, r3}
 800a182:	b503      	push	{r0, r1, lr}
 800a184:	4601      	mov	r1, r0
 800a186:	ab03      	add	r3, sp, #12
 800a188:	4805      	ldr	r0, [pc, #20]	; (800a1a0 <fiprintf+0x20>)
 800a18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a18e:	6800      	ldr	r0, [r0, #0]
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	f7ff fc85 	bl	8009aa0 <_vfiprintf_r>
 800a196:	b002      	add	sp, #8
 800a198:	f85d eb04 	ldr.w	lr, [sp], #4
 800a19c:	b003      	add	sp, #12
 800a19e:	4770      	bx	lr
 800a1a0:	2000000c 	.word	0x2000000c

0800a1a4 <_lseek_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d07      	ldr	r5, [pc, #28]	; (800a1c4 <_lseek_r+0x20>)
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	602a      	str	r2, [r5, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f7f8 f8b6 	bl	8002324 <_lseek>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_lseek_r+0x1e>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_lseek_r+0x1e>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	20000340 	.word	0x20000340

0800a1c8 <__swhatbuf_r>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	460e      	mov	r6, r1
 800a1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	b096      	sub	sp, #88	; 0x58
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	461d      	mov	r5, r3
 800a1d8:	da08      	bge.n	800a1ec <__swhatbuf_r+0x24>
 800a1da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	602a      	str	r2, [r5, #0]
 800a1e2:	061a      	lsls	r2, r3, #24
 800a1e4:	d410      	bmi.n	800a208 <__swhatbuf_r+0x40>
 800a1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ea:	e00e      	b.n	800a20a <__swhatbuf_r+0x42>
 800a1ec:	466a      	mov	r2, sp
 800a1ee:	f000 f8c1 	bl	800a374 <_fstat_r>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	dbf1      	blt.n	800a1da <__swhatbuf_r+0x12>
 800a1f6:	9a01      	ldr	r2, [sp, #4]
 800a1f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a200:	425a      	negs	r2, r3
 800a202:	415a      	adcs	r2, r3
 800a204:	602a      	str	r2, [r5, #0]
 800a206:	e7ee      	b.n	800a1e6 <__swhatbuf_r+0x1e>
 800a208:	2340      	movs	r3, #64	; 0x40
 800a20a:	2000      	movs	r0, #0
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	b016      	add	sp, #88	; 0x58
 800a210:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a214 <__smakebuf_r>:
 800a214:	898b      	ldrh	r3, [r1, #12]
 800a216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a218:	079d      	lsls	r5, r3, #30
 800a21a:	4606      	mov	r6, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	d507      	bpl.n	800a230 <__smakebuf_r+0x1c>
 800a220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	6123      	str	r3, [r4, #16]
 800a228:	2301      	movs	r3, #1
 800a22a:	6163      	str	r3, [r4, #20]
 800a22c:	b002      	add	sp, #8
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	ab01      	add	r3, sp, #4
 800a232:	466a      	mov	r2, sp
 800a234:	f7ff ffc8 	bl	800a1c8 <__swhatbuf_r>
 800a238:	9900      	ldr	r1, [sp, #0]
 800a23a:	4605      	mov	r5, r0
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff fa35 	bl	80096ac <_malloc_r>
 800a242:	b948      	cbnz	r0, 800a258 <__smakebuf_r+0x44>
 800a244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a248:	059a      	lsls	r2, r3, #22
 800a24a:	d4ef      	bmi.n	800a22c <__smakebuf_r+0x18>
 800a24c:	f023 0303 	bic.w	r3, r3, #3
 800a250:	f043 0302 	orr.w	r3, r3, #2
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	e7e3      	b.n	800a220 <__smakebuf_r+0xc>
 800a258:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <__smakebuf_r+0x7c>)
 800a25a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	6020      	str	r0, [r4, #0]
 800a260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	9b00      	ldr	r3, [sp, #0]
 800a268:	6163      	str	r3, [r4, #20]
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	6120      	str	r0, [r4, #16]
 800a26e:	b15b      	cbz	r3, 800a288 <__smakebuf_r+0x74>
 800a270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a274:	4630      	mov	r0, r6
 800a276:	f000 f88f 	bl	800a398 <_isatty_r>
 800a27a:	b128      	cbz	r0, 800a288 <__smakebuf_r+0x74>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f023 0303 	bic.w	r3, r3, #3
 800a282:	f043 0301 	orr.w	r3, r3, #1
 800a286:	81a3      	strh	r3, [r4, #12]
 800a288:	89a0      	ldrh	r0, [r4, #12]
 800a28a:	4305      	orrs	r5, r0
 800a28c:	81a5      	strh	r5, [r4, #12]
 800a28e:	e7cd      	b.n	800a22c <__smakebuf_r+0x18>
 800a290:	08008345 	.word	0x08008345

0800a294 <memmove>:
 800a294:	4288      	cmp	r0, r1
 800a296:	b510      	push	{r4, lr}
 800a298:	eb01 0402 	add.w	r4, r1, r2
 800a29c:	d902      	bls.n	800a2a4 <memmove+0x10>
 800a29e:	4284      	cmp	r4, r0
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	d807      	bhi.n	800a2b4 <memmove+0x20>
 800a2a4:	1e43      	subs	r3, r0, #1
 800a2a6:	42a1      	cmp	r1, r4
 800a2a8:	d008      	beq.n	800a2bc <memmove+0x28>
 800a2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2b2:	e7f8      	b.n	800a2a6 <memmove+0x12>
 800a2b4:	4402      	add	r2, r0
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	428a      	cmp	r2, r1
 800a2ba:	d100      	bne.n	800a2be <memmove+0x2a>
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2c6:	e7f7      	b.n	800a2b8 <memmove+0x24>

0800a2c8 <__malloc_lock>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	; (800a2d0 <__malloc_lock+0x8>)
 800a2ca:	f7fe bc80 	b.w	8008bce <__retarget_lock_acquire_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	20000334 	.word	0x20000334

0800a2d4 <__malloc_unlock>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	; (800a2dc <__malloc_unlock+0x8>)
 800a2d6:	f7fe bc7b 	b.w	8008bd0 <__retarget_lock_release_recursive>
 800a2da:	bf00      	nop
 800a2dc:	20000334 	.word	0x20000334

0800a2e0 <_realloc_r>:
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	4614      	mov	r4, r2
 800a2e8:	460e      	mov	r6, r1
 800a2ea:	b921      	cbnz	r1, 800a2f6 <_realloc_r+0x16>
 800a2ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	f7ff b9db 	b.w	80096ac <_malloc_r>
 800a2f6:	b92a      	cbnz	r2, 800a304 <_realloc_r+0x24>
 800a2f8:	f7ff f96c 	bl	80095d4 <_free_r>
 800a2fc:	4625      	mov	r5, r4
 800a2fe:	4628      	mov	r0, r5
 800a300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a304:	f000 f858 	bl	800a3b8 <_malloc_usable_size_r>
 800a308:	4284      	cmp	r4, r0
 800a30a:	4607      	mov	r7, r0
 800a30c:	d802      	bhi.n	800a314 <_realloc_r+0x34>
 800a30e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a312:	d812      	bhi.n	800a33a <_realloc_r+0x5a>
 800a314:	4621      	mov	r1, r4
 800a316:	4640      	mov	r0, r8
 800a318:	f7ff f9c8 	bl	80096ac <_malloc_r>
 800a31c:	4605      	mov	r5, r0
 800a31e:	2800      	cmp	r0, #0
 800a320:	d0ed      	beq.n	800a2fe <_realloc_r+0x1e>
 800a322:	42bc      	cmp	r4, r7
 800a324:	4622      	mov	r2, r4
 800a326:	4631      	mov	r1, r6
 800a328:	bf28      	it	cs
 800a32a:	463a      	movcs	r2, r7
 800a32c:	f7fe fc6c 	bl	8008c08 <memcpy>
 800a330:	4631      	mov	r1, r6
 800a332:	4640      	mov	r0, r8
 800a334:	f7ff f94e 	bl	80095d4 <_free_r>
 800a338:	e7e1      	b.n	800a2fe <_realloc_r+0x1e>
 800a33a:	4635      	mov	r5, r6
 800a33c:	e7df      	b.n	800a2fe <_realloc_r+0x1e>
	...

0800a340 <_read_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d07      	ldr	r5, [pc, #28]	; (800a360 <_read_r+0x20>)
 800a344:	4604      	mov	r4, r0
 800a346:	4608      	mov	r0, r1
 800a348:	4611      	mov	r1, r2
 800a34a:	2200      	movs	r2, #0
 800a34c:	602a      	str	r2, [r5, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f7f7 ff88 	bl	8002264 <_read>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_read_r+0x1e>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_read_r+0x1e>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	20000340 	.word	0x20000340

0800a364 <abort>:
 800a364:	b508      	push	{r3, lr}
 800a366:	2006      	movs	r0, #6
 800a368:	f000 f856 	bl	800a418 <raise>
 800a36c:	2001      	movs	r0, #1
 800a36e:	f7f7 ff6f 	bl	8002250 <_exit>
	...

0800a374 <_fstat_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d07      	ldr	r5, [pc, #28]	; (800a394 <_fstat_r+0x20>)
 800a378:	2300      	movs	r3, #0
 800a37a:	4604      	mov	r4, r0
 800a37c:	4608      	mov	r0, r1
 800a37e:	4611      	mov	r1, r2
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	f7f7 ffb4 	bl	80022ee <_fstat>
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	d102      	bne.n	800a390 <_fstat_r+0x1c>
 800a38a:	682b      	ldr	r3, [r5, #0]
 800a38c:	b103      	cbz	r3, 800a390 <_fstat_r+0x1c>
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	20000340 	.word	0x20000340

0800a398 <_isatty_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d06      	ldr	r5, [pc, #24]	; (800a3b4 <_isatty_r+0x1c>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	f7f7 ffb3 	bl	800230e <_isatty>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_isatty_r+0x1a>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_isatty_r+0x1a>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20000340 	.word	0x20000340

0800a3b8 <_malloc_usable_size_r>:
 800a3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3bc:	1f18      	subs	r0, r3, #4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	bfbc      	itt	lt
 800a3c2:	580b      	ldrlt	r3, [r1, r0]
 800a3c4:	18c0      	addlt	r0, r0, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_raise_r>:
 800a3c8:	291f      	cmp	r1, #31
 800a3ca:	b538      	push	{r3, r4, r5, lr}
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	d904      	bls.n	800a3dc <_raise_r+0x14>
 800a3d2:	2316      	movs	r3, #22
 800a3d4:	6003      	str	r3, [r0, #0]
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3de:	b112      	cbz	r2, 800a3e6 <_raise_r+0x1e>
 800a3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3e4:	b94b      	cbnz	r3, 800a3fa <_raise_r+0x32>
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 f830 	bl	800a44c <_getpid_r>
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	4601      	mov	r1, r0
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3f6:	f000 b817 	b.w	800a428 <_kill_r>
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d00a      	beq.n	800a414 <_raise_r+0x4c>
 800a3fe:	1c59      	adds	r1, r3, #1
 800a400:	d103      	bne.n	800a40a <_raise_r+0x42>
 800a402:	2316      	movs	r3, #22
 800a404:	6003      	str	r3, [r0, #0]
 800a406:	2001      	movs	r0, #1
 800a408:	e7e7      	b.n	800a3da <_raise_r+0x12>
 800a40a:	2400      	movs	r4, #0
 800a40c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a410:	4628      	mov	r0, r5
 800a412:	4798      	blx	r3
 800a414:	2000      	movs	r0, #0
 800a416:	e7e0      	b.n	800a3da <_raise_r+0x12>

0800a418 <raise>:
 800a418:	4b02      	ldr	r3, [pc, #8]	; (800a424 <raise+0xc>)
 800a41a:	4601      	mov	r1, r0
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	f7ff bfd3 	b.w	800a3c8 <_raise_r>
 800a422:	bf00      	nop
 800a424:	2000000c 	.word	0x2000000c

0800a428 <_kill_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	; (800a448 <_kill_r+0x20>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	4611      	mov	r1, r2
 800a434:	602b      	str	r3, [r5, #0]
 800a436:	f7f7 fefb 	bl	8002230 <_kill>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d102      	bne.n	800a444 <_kill_r+0x1c>
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	b103      	cbz	r3, 800a444 <_kill_r+0x1c>
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	bd38      	pop	{r3, r4, r5, pc}
 800a446:	bf00      	nop
 800a448:	20000340 	.word	0x20000340

0800a44c <_getpid_r>:
 800a44c:	f7f7 bee8 	b.w	8002220 <_getpid>

0800a450 <_init>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr

0800a45c <_fini>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	bf00      	nop
 800a460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a462:	bc08      	pop	{r3}
 800a464:	469e      	mov	lr, r3
 800a466:	4770      	bx	lr
